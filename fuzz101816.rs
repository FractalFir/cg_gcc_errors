#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, lazy_get)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::collections::hash_map::DefaultHasher;
    use std::hash::{Hash, Hasher};
    use std::sync::LazyLock;

    static mut H: LazyLock<DefaultHasher> = LazyLock::new(|| DefaultHasher::new());

    #[inline(never)]
    fn dump_var(
        val0: impl Hash,
        val1: impl Hash,
        val2: impl Hash,
        val3: impl Hash,
    ) {
        unsafe {
            val0.hash(LazyLock::force_mut(&mut H));
            val1.hash(LazyLock::force_mut(&mut H));
            val2.hash(LazyLock::force_mut(&mut H));
            val3.hash(LazyLock::force_mut(&mut H));
        }
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: i64,mut _3: isize,mut _4: i8,mut _5: u64,mut _6: i128) -> u128 {
mir! {
type RET = u128;
let _7: f64;
let _8: *const u32;
let _9: ();
let _10: ();
{
_2 = !6624183462409755949_i64;
RET = !35779236819961818222860532761308203328_u128;
_4 = (-70_i8);
Goto(bb1)
}
bb1 = {
_1 = !true;
_7 = 7_usize as f64;
_1 = !false;
_3 = -9223372036854775807_isize;
_7 = 3144944743_u32 as f64;
_4 = (-128_i8) - 122_i8;
Call(RET = fn1(_7, _3, _3, _7, _4, _2, _1, _3, _4, _3, _2, _7), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_1 = false;
_1 = !false;
Goto(bb3)
}
bb3 = {
Call(_9 = dump_var(Move(_3), Move(_2), _10, _10), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: f64,mut _2: isize,mut _3: isize,mut _4: f64,mut _5: i8,mut _6: i64,mut _7: bool,mut _8: isize,mut _9: i8,mut _10: isize,mut _11: i64,mut _12: f64) -> u128 {
mir! {
type RET = u128;
let _13: usize;
let _14: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _15: usize;
let _16: bool;
let _17: bool;
let _18: u64;
let _19: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _20: *const &'static mut usize;
let _21: [isize; 5];
let _22: &'static mut char;
let _23: isize;
let _24: u128;
let _25: i16;
let _26: (f64,);
let _27: bool;
let _28: u64;
let _29: isize;
let _30: *mut ([isize; 6], (isize, u8, i64));
let _31: u64;
let _32: u16;
let _33: (*mut char, i128, (u128,));
let _34: bool;
let _35: u128;
let _36: &'static *mut f64;
let _37: i8;
let _38: f64;
let _39: i64;
let _40: *mut ([isize; 6], (isize, u8, i64));
let _41: (u16, (*const Adt17, [isize; 6], [u64; 3], i128), ([i8; 3], [i8; 3], (u128,), i128), f32);
let _42: *const u32;
let _43: i16;
let _44: f32;
let _45: usize;
let _46: [isize; 6];
let _47: f64;
let _48: u8;
let _49: *const isize;
let _50: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _51: char;
let _52: *const &'static mut usize;
let _53: isize;
let _54: ();
let _55: ();
{
RET = 82070062237255708980563779096134872455_u128;
_8 = _10 + _10;
_11 = _6 >> _8;
RET = 3_usize as u128;
_10 = _2 ^ _8;
_15 = 18248847859051587647_usize & 1_usize;
_4 = -_1;
_9 = _5 + _5;
_1 = _12 * _12;
_4 = -_1;
_9 = _1 as i8;
_11 = _6 - _6;
_15 = 4_usize;
_15 = !6855498159373057014_usize;
_16 = !_7;
_16 = _9 == _5;
_6 = _11 * _11;
_6 = !_11;
_13 = 46780_u16 as usize;
_11 = _5 as i64;
_7 = _16 == _16;
Goto(bb1)
}
bb1 = {
_3 = !_10;
_8 = _10 ^ _3;
_4 = _1;
_1 = _12;
Goto(bb2)
}
bb2 = {
_2 = 44966_u16 as isize;
RET = !119838414764761572646666109256917728459_u128;
_7 = _16 == _16;
_15 = _5 as usize;
RET = 160361676081929938526863920933272616237_u128 - 176925313848632836608597753673151386637_u128;
_2 = _3 & _8;
_18 = 5477858496285842066_u64 << RET;
Goto(bb3)
}
bb3 = {
_18 = 10262678667903100406_u64 & 4187274610301325857_u64;
_1 = _4;
_2 = _10 - _10;
RET = 32642511792782927785817341925532653492_u128 & 281722774176139569849024232582087708309_u128;
_10 = _2 + _2;
RET = 266315602761412649435416222520665358930_u128 | 338449331847910235521695557788436451570_u128;
_8 = _2;
_6 = _11;
_7 = !_16;
_16 = _10 < _2;
_12 = -_4;
_17 = !_16;
_10 = _2;
_3 = _10 ^ _8;
_9 = _5 >> _10;
_9 = _5;
_17 = _16;
_15 = _13;
RET = 198486106864343721060139104071973638029_u128 ^ 332123296276275711314456031981625083633_u128;
_9 = _5;
_7 = _17 ^ _16;
_4 = 21854_i16 as f64;
_21 = [_2,_8,_8,_8,_10];
Call(_13 = fn2(_12, _3, _11, _12, _10, _17, _3, _17, _4, _8, _21, _21), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_18 = _12 as u64;
_18 = 16279738688210236815_u64 * 8549813896131195121_u64;
_5 = _9;
_13 = _15 | _15;
_9 = _5 << _18;
_15 = _13 & _13;
RET = 138048890872826410076549272377545599815_u128 * 54897496038540942297967044298282672949_u128;
_7 = !_16;
_1 = _4 + _12;
_13 = _15 + _15;
_4 = _12 + _1;
_16 = _17 != _7;
_18 = !7806639146312263838_u64;
_6 = 3662558039_u32 as i64;
_15 = 821152148_u32 as usize;
_6 = _11;
_18 = 18427552630318276985_u64 | 12272653074420680131_u64;
_15 = (-7117_i16) as usize;
_1 = _4 - _12;
_11 = _6 & _6;
_7 = !_17;
_23 = _16 as isize;
_9 = _5 + _5;
_23 = _8 << _3;
_16 = _3 != _8;
_1 = _4;
_23 = _9 as isize;
_24 = !RET;
_11 = -_6;
_17 = !_7;
Call(_9 = core::intrinsics::transmute(_5), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_10 = _13 as isize;
_8 = _10;
_21 = [_8,_3,_2,_3,_3];
_25 = 11757_i16 * 21071_i16;
_21 = [_3,_8,_23,_10,_23];
_1 = _12 + _12;
_23 = _8 ^ _10;
_16 = _13 <= _13;
_17 = _7;
_5 = _9;
_6 = !_11;
_16 = !_7;
_24 = (-159229457431515440783430511679711037522_i128) as u128;
Goto(bb6)
}
bb6 = {
_1 = _4 * _4;
_21 = [_3,_23,_23,_23,_23];
_11 = 1652324752_u32 as i64;
_24 = RET + RET;
_6 = _11;
_9 = _5 ^ _5;
_18 = 8250081734227798256_u64 << _23;
_5 = _4 as i8;
_3 = -_23;
RET = !_24;
_7 = _16;
_15 = _1 as usize;
_18 = (-1680293575_i32) as u64;
_23 = _2;
Call(RET = core::intrinsics::bswap(_24), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_26.0 = _4;
_29 = _3 & _23;
_1 = _26.0 - _12;
_24 = 1628866311_u32 as u128;
_4 = 2755_u16 as f64;
_9 = _5 | _5;
_5 = !_9;
_16 = _1 == _1;
_12 = _1;
_4 = -_26.0;
_11 = _6;
_18 = '\u{33796}' as u64;
_28 = _18 ^ _18;
_18 = _28 - _28;
_28 = _18 & _18;
_6 = _11 << _9;
_31 = _7 as u64;
_7 = !_17;
_8 = _3 - _3;
_21 = [_8,_3,_8,_3,_3];
RET = _24 & _24;
_25 = '\u{f0ef5}' as i16;
_33.2.0 = RET & RET;
_12 = _31 as f64;
Goto(bb8)
}
bb8 = {
_1 = _4 * _12;
_13 = _15 ^ _15;
RET = _33.2.0 >> _18;
_10 = -_2;
_34 = _16;
_32 = 8997_u16 + 20660_u16;
_13 = !_15;
_8 = !_10;
_28 = !_31;
_3 = _10 ^ _10;
_34 = !_16;
_2 = _29 - _29;
Goto(bb9)
}
bb9 = {
_21 = [_3,_2,_2,_2,_2];
_9 = _5 - _5;
_24 = _32 as u128;
_23 = _9 as isize;
_9 = !_5;
_35 = RET & RET;
_21 = [_10,_23,_29,_29,_29];
_5 = 51_u8 as i8;
_10 = _1 as isize;
_23 = _2;
_33.1 = (-18539137052804118235793625464658903617_i128) & 105820074029190006037118282794018362996_i128;
_27 = _3 < _3;
_10 = _23;
_33.2 = (_35,);
_33.2.0 = _27 as u128;
_3 = _32 as isize;
_38 = -_26.0;
_6 = -_11;
_15 = !_13;
_2 = _11 as isize;
Call(_2 = core::intrinsics::bswap(_29), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_39 = !_6;
_26 = (_12,);
_21 = [_23,_10,_23,_10,_10];
_31 = !_28;
_12 = _5 as f64;
_13 = _17 as usize;
_8 = !_23;
_32 = 11295_u16;
_13 = _1 as usize;
_37 = _9 << _13;
_25 = (-19534_i16);
_11 = _25 as i64;
match _25 {
0 => bb11,
340282366920938463463374607431768191922 => bb13,
_ => bb12
}
}
bb11 = {
_10 = _13 as isize;
_8 = _10;
_21 = [_8,_3,_2,_3,_3];
_25 = 11757_i16 * 21071_i16;
_21 = [_3,_8,_23,_10,_23];
_1 = _12 + _12;
_23 = _8 ^ _10;
_16 = _13 <= _13;
_17 = _7;
_5 = _9;
_6 = !_11;
_16 = !_7;
_24 = (-159229457431515440783430511679711037522_i128) as u128;
Goto(bb6)
}
bb12 = {
_18 = 10262678667903100406_u64 & 4187274610301325857_u64;
_1 = _4;
_2 = _10 - _10;
RET = 32642511792782927785817341925532653492_u128 & 281722774176139569849024232582087708309_u128;
_10 = _2 + _2;
RET = 266315602761412649435416222520665358930_u128 | 338449331847910235521695557788436451570_u128;
_8 = _2;
_6 = _11;
_7 = !_16;
_16 = _10 < _2;
_12 = -_4;
_17 = !_16;
_10 = _2;
_3 = _10 ^ _8;
_9 = _5 >> _10;
_9 = _5;
_17 = _16;
_15 = _13;
RET = 198486106864343721060139104071973638029_u128 ^ 332123296276275711314456031981625083633_u128;
_9 = _5;
_7 = _17 ^ _16;
_4 = 21854_i16 as f64;
_21 = [_2,_8,_8,_8,_10];
Call(_13 = fn2(_12, _3, _11, _12, _10, _17, _3, _17, _4, _8, _21, _21), ReturnTo(bb4), UnwindUnreachable())
}
bb13 = {
_41.2.2.0 = 915222612_u32 as u128;
_41.1.2 = [_28,_28,_28];
_21 = [_23,_10,_8,_10,_23];
_41.2.3 = _33.1 | _33.1;
_41.0 = _32 % _32;
_4 = _8 as f64;
_41.3 = _37 as f32;
_41.1.1 = [_10,_2,_23,_8,_23,_29];
_33.2 = (RET,);
_15 = _13;
_2 = _13 as isize;
_41.2.0 = [_9,_37,_37];
_32 = _41.0 * _41.0;
_33.2.0 = _35 << _32;
_24 = _35 + _35;
_25 = 13243_i16 + (-16953_i16);
_39 = _6 ^ _11;
_3 = -_10;
_49 = core::ptr::addr_of!(_3);
_41.2.2.0 = _24;
Goto(bb14)
}
bb14 = {
(*_49) = !_23;
_46 = [(*_49),(*_49),(*_49),(*_49),(*_49),(*_49)];
(*_49) = _23;
_25 = '\u{b1018}' as i16;
_12 = -_4;
_45 = !_15;
_5 = !_9;
_41.2.0 = [_37,_37,_37];
(*_49) = _10 - _23;
_33.0 = core::ptr::addr_of_mut!(_51);
_51 = '\u{13191}';
Goto(bb15)
}
bb15 = {
_44 = _28 as f32;
_47 = _12 + _4;
(*_49) = _39 as isize;
_43 = _28 as i16;
_11 = _51 as i64;
(*_49) = 148_u8 as isize;
RET = _27 as u128;
_33.1 = _25 as i128;
_26 = (_12,);
_41.1.3 = -_41.2.3;
_48 = _44 as u8;
(*_49) = -_10;
_27 = _48 >= _48;
_26.0 = -_4;
_46 = _41.1.1;
_49 = core::ptr::addr_of!(_2);
(*_49) = _10 | _29;
Goto(bb16)
}
bb16 = {
Call(_54 = dump_var(Move(_13), Move(_8), Move(_15), Move(_32)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_54 = dump_var(Move(_6), Move(_29), Move(_9), Move(_23)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_54 = dump_var(Move(_37), Move(_11), Move(_35), Move(_18)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_54 = dump_var(Move(_46), Move(_27), Move(_16), Move(_2)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: f64,mut _2: isize,mut _3: i64,mut _4: f64,mut _5: isize,mut _6: bool,mut _7: isize,mut _8: bool,mut _9: f64,mut _10: isize,mut _11: [isize; 5],mut _12: [isize; 5]) -> usize {
mir! {
type RET = usize;
let _13: f32;
let _14: f64;
let _15: *mut f64;
let _16: *mut ([isize; 6], (isize, u8, i64));
let _17: *const f64;
let _18: *const f64;
let _19: *const f64;
let _20: f32;
let _21: *const Adt17;
let _22: isize;
let _23: f64;
let _24: u32;
let _25: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _26: ((*mut u32, u16, [i128; 4], i8), i16);
let _27: i16;
let _28: u64;
let _29: (isize,);
let _30: u128;
let _31: char;
let _32: i64;
let _33: (char,);
let _34: char;
let _35: f64;
let _36: f64;
let _37: *const isize;
let _38: f32;
let _39: (&'static i32, (i32,));
let _40: bool;
let _41: isize;
let _42: isize;
let _43: f64;
let _44: isize;
let _45: bool;
let _46: bool;
let _47: u64;
let _48: *mut u16;
let _49: (isize, u8, i64);
let _50: u16;
let _51: Adt82;
let _52: isize;
let _53: u32;
let _54: f64;
let _55: u64;
let _56: u128;
let _57: &'static mut usize;
let _58: isize;
let _59: (Adt21,);
let _60: isize;
let _61: bool;
let _62: &'static i32;
let _63: i64;
let _64: (&'static mut char,);
let _65: isize;
let _66: isize;
let _67: isize;
let _68: ();
let _69: ();
{
RET = 267544328171297205432012459764427125059_u128 as usize;
_7 = _2 * _2;
_9 = _4 + _4;
_8 = _6 ^ _6;
_1 = _9 * _4;
_9 = _1;
_13 = RET as f32;
RET = 0_usize;
_2 = -_7;
RET = 4106375037914490970_usize;
_14 = 157_u8 as f64;
_12 = _11;
_9 = 2107063804_i32 as f64;
_4 = _1 + _1;
_7 = _2;
_14 = 4173143245_u32 as f64;
_17 = core::ptr::addr_of!(_1);
_6 = (*_17) <= _4;
(*_17) = _14 * _4;
_15 = core::ptr::addr_of_mut!((*_17));
(*_17) = _4 - _4;
Goto(bb1)
}
bb1 = {
(*_17) = _4 + _4;
(*_17) = _4 + _4;
_14 = (*_17);
(*_17) = _14;
(*_17) = (-7_i8) as f64;
_8 = _14 > (*_17);
(*_17) = _4;
(*_17) = -_14;
(*_17) = _14 + _14;
(*_17) = 18317392541741763065_u64 as f64;
_2 = -_7;
(*_17) = _14 * _14;
_19 = core::ptr::addr_of!(_4);
(*_19) = (*_17) - (*_17);
(*_17) = (*_19);
_2 = !_5;
_11 = [_7,_7,_7,_7,_7];
_19 = Move(_17);
_10 = 1312820763_i32 as isize;
_13 = 51483_u16 as f32;
_3 = 940900410_i32 as i64;
_20 = _13;
_5 = '\u{5e2f6}' as isize;
_18 = core::ptr::addr_of!(_9);
(*_18) = _1;
_12 = [_7,_2,_7,_7,_7];
match RET {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
4106375037914490970 => bb8,
_ => bb7
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_19 = core::ptr::addr_of!((*_18));
(*_19) = _4 + _1;
_6 = (*_18) >= (*_19);
(*_18) = 18037944217630725228_u64 as f64;
(*_18) = _14 - _4;
(*_18) = _4 * _4;
_1 = (*_18) * (*_18);
_12 = _11;
(*_18) = _4 + _1;
(*_18) = RET as f64;
_5 = RET as isize;
_7 = 75_u8 as isize;
(*_18) = _1 + _1;
_18 = core::ptr::addr_of!(_1);
_20 = 14964482141206410788_u64 as f32;
(*_18) = _4 - _4;
(*_18) = _14;
_13 = _20 + _20;
Call((*_18) = fn3(Move(_18), _12, Move(_19)), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_23 = -_4;
_17 = core::ptr::addr_of!(_23);
_24 = _3 as u32;
_4 = -(*_17);
_18 = core::ptr::addr_of!((*_17));
_14 = -(*_17);
(*_18) = _9;
(*_17) = _20 as f64;
(*_17) = _9;
Goto(bb10)
}
bb10 = {
_2 = (*_17) as isize;
(*_17) = -_4;
Goto(bb11)
}
bb11 = {
match RET {
0 => bb12,
1 => bb13,
4106375037914490970 => bb15,
_ => bb14
}
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
(*_17) = _4 - _1;
_19 = core::ptr::addr_of!(_23);
_26.0.2 = [(-55405712910506863363913198027116293964_i128),161465289271378779632310764365326780512_i128,(-18281553667476222495790185097200730681_i128),106847180629262191337786254977875670165_i128];
(*_17) = _1 * _14;
_28 = 98651953746810606_u64 ^ 4233491857136117626_u64;
_12 = [_2,_2,_2,_2,_2];
(*_17) = _9 + _4;
_15 = core::ptr::addr_of_mut!((*_17));
_27 = 12130_i16 - 24665_i16;
_29 = (_2,);
(*_17) = _14 - _14;
_10 = _2 + _29.0;
(*_17) = _4 * _4;
_23 = _4 - _14;
_32 = !_3;
_9 = (*_17) + (*_17);
(*_17) = _1 + _9;
(*_17) = -_14;
_14 = (*_17) + (*_17);
(*_17) = (-723366521_i32) as f64;
(*_17) = -_1;
Goto(bb16)
}
bb16 = {
(*_17) = _4 + _1;
_31 = '\u{e8820}';
_24 = _32 as u32;
_26.0.3 = 61_i8 & 1_i8;
_22 = _24 as isize;
_10 = _29.0 >> _29.0;
match RET {
0 => bb1,
4106375037914490970 => bb17,
_ => bb4
}
}
bb17 = {
(*_17) = -_14;
_17 = core::ptr::addr_of!((*_17));
Goto(bb18)
}
bb18 = {
_37 = core::ptr::addr_of!(_29.0);
(*_17) = _14 + _1;
_37 = core::ptr::addr_of!((*_37));
_30 = _28 as u128;
(*_37) = _10 >> _2;
(*_37) = _2;
_14 = (*_17) * (*_17);
(*_37) = !_2;
_33.0 = _31;
_34 = _31;
(*_17) = -_14;
(*_37) = _10 ^ _10;
_26.0.1 = _34 as u16;
(*_37) = -_2;
_1 = (*_17);
_15 = core::ptr::addr_of_mut!((*_17));
_18 = core::ptr::addr_of!((*_15));
(*_17) = _4;
_12 = [(*_37),(*_37),(*_37),(*_37),(*_37)];
(*_17) = _1 - _4;
_12 = _11;
_26.0.0 = core::ptr::addr_of_mut!(_24);
(*_37) = _2;
(*_37) = _10;
(*_37) = _2;
Goto(bb19)
}
bb19 = {
_34 = _31;
_33 = (_34,);
_27 = !20075_i16;
_34 = _31;
(*_37) = _30 as isize;
(*_37) = -_10;
_18 = core::ptr::addr_of!((*_17));
(*_17) = _1 * _1;
_37 = core::ptr::addr_of!(_5);
_35 = -(*_17);
_5 = _10;
_39.1 = ((-588121899_i32),);
_26.0.3 = 29_u8 as i8;
_29.0 = (*_37) >> (*_37);
_17 = core::ptr::addr_of!(_4);
_24 = 4019817245_u32 >> (*_37);
_38 = _13 * _13;
_49.2 = _32 ^ _32;
_23 = -(*_17);
_33.0 = _31;
match _39.1.0 {
0 => bb20,
1 => bb21,
2 => bb22,
3 => bb23,
340282366920938463463374607431180089557 => bb25,
_ => bb24
}
}
bb20 = {
_37 = core::ptr::addr_of!(_29.0);
(*_17) = _14 + _1;
_37 = core::ptr::addr_of!((*_37));
_30 = _28 as u128;
(*_37) = _10 >> _2;
(*_37) = _2;
_14 = (*_17) * (*_17);
(*_37) = !_2;
_33.0 = _31;
_34 = _31;
(*_17) = -_14;
(*_37) = _10 ^ _10;
_26.0.1 = _34 as u16;
(*_37) = -_2;
_1 = (*_17);
_15 = core::ptr::addr_of_mut!((*_17));
_18 = core::ptr::addr_of!((*_15));
(*_17) = _4;
_12 = [(*_37),(*_37),(*_37),(*_37),(*_37)];
(*_17) = _1 - _4;
_12 = _11;
_26.0.0 = core::ptr::addr_of_mut!(_24);
(*_37) = _2;
(*_37) = _10;
(*_37) = _2;
Goto(bb19)
}
bb21 = {
Return()
}
bb22 = {
Return()
}
bb23 = {
Return()
}
bb24 = {
Return()
}
bb25 = {
(*_17) = _23 * _9;
(*_37) = _29.0 | _10;
(*_17) = _30 as f64;
match _39.1.0 {
0 => bb1,
1 => bb18,
2 => bb17,
3 => bb24,
4 => bb5,
5 => bb22,
340282366920938463463374607431180089557 => bb27,
_ => bb26
}
}
bb26 = {
Return()
}
bb27 = {
_40 = !_6;
(*_37) = _38 as isize;
_41 = _28 as isize;
_49 = (_2, 142_u8, _3);
_45 = !_8;
match _49.1 {
0 => bb6,
1 => bb25,
2 => bb15,
3 => bb19,
142 => bb29,
_ => bb28
}
}
bb28 = {
Return()
}
bb29 = {
(*_17) = _35;
_49.1 = _26.0.1 as u8;
_42 = _10 >> _2;
_19 = core::ptr::addr_of!((*_17));
match _39.1.0 {
0 => bb1,
1 => bb30,
2 => bb31,
3 => bb32,
4 => bb33,
5 => bb34,
340282366920938463463374607431180089557 => bb36,
_ => bb35
}
}
bb30 = {
Return()
}
bb31 = {
_40 = !_6;
(*_37) = _38 as isize;
_41 = _28 as isize;
_49 = (_2, 142_u8, _3);
_45 = !_8;
match _49.1 {
0 => bb6,
1 => bb25,
2 => bb15,
3 => bb19,
142 => bb29,
_ => bb28
}
}
bb32 = {
Return()
}
bb33 = {
(*_17) = _23 * _9;
(*_37) = _29.0 | _10;
(*_17) = _30 as f64;
match _39.1.0 {
0 => bb1,
1 => bb18,
2 => bb17,
3 => bb24,
4 => bb5,
5 => bb22,
340282366920938463463374607431180089557 => bb27,
_ => bb26
}
}
bb34 = {
Return()
}
bb35 = {
Return()
}
bb36 = {
_2 = _10 | _29.0;
(*_19) = _9 + _9;
_46 = _45;
(*_19) = _1 + _23;
_53 = _24 * _24;
_26.1 = -_27;
_26.1 = _27 << _2;
(*_19) = _10 as f64;
(*_37) = _42 << _53;
(*_17) = -_23;
(*_17) = _35 * _14;
(*_37) = _10;
_41 = _5 * (*_37);
(*_37) = _2 >> _10;
(*_37) = !_42;
(*_37) = _41 + _2;
_49.2 = _3 >> (*_37);
_55 = _28;
_33 = (_34,);
_36 = _26.1 as f64;
match RET {
0 => bb11,
1 => bb17,
2 => bb23,
3 => bb32,
4 => bb10,
5 => bb37,
6 => bb38,
4106375037914490970 => bb40,
_ => bb39
}
}
bb37 = {
_37 = core::ptr::addr_of!(_29.0);
(*_17) = _14 + _1;
_37 = core::ptr::addr_of!((*_37));
_30 = _28 as u128;
(*_37) = _10 >> _2;
(*_37) = _2;
_14 = (*_17) * (*_17);
(*_37) = !_2;
_33.0 = _31;
_34 = _31;
(*_17) = -_14;
(*_37) = _10 ^ _10;
_26.0.1 = _34 as u16;
(*_37) = -_2;
_1 = (*_17);
_15 = core::ptr::addr_of_mut!((*_17));
_18 = core::ptr::addr_of!((*_15));
(*_17) = _4;
_12 = [(*_37),(*_37),(*_37),(*_37),(*_37)];
(*_17) = _1 - _4;
_12 = _11;
_26.0.0 = core::ptr::addr_of_mut!(_24);
(*_37) = _2;
(*_37) = _10;
(*_37) = _2;
Goto(bb19)
}
bb38 = {
Return()
}
bb39 = {
Return()
}
bb40 = {
(*_37) = _49.2 as isize;
_39.1.0 = 1682544952_i32 ^ (-48563313_i32);
_44 = (*_37) * (*_37);
(*_37) = _26.0.3 as isize;
_10 = _26.1 as isize;
_45 = (*_17) <= (*_17);
_41 = !_10;
_35 = (*_17) * (*_17);
_7 = _44 * _44;
(*_17) = -_14;
match RET {
0 => bb41,
1 => bb42,
2 => bb43,
3 => bb44,
4 => bb45,
5 => bb46,
4106375037914490970 => bb48,
_ => bb47
}
}
bb41 = {
_37 = core::ptr::addr_of!(_29.0);
(*_17) = _14 + _1;
_37 = core::ptr::addr_of!((*_37));
_30 = _28 as u128;
(*_37) = _10 >> _2;
(*_37) = _2;
_14 = (*_17) * (*_17);
(*_37) = !_2;
_33.0 = _31;
_34 = _31;
(*_17) = -_14;
(*_37) = _10 ^ _10;
_26.0.1 = _34 as u16;
(*_37) = -_2;
_1 = (*_17);
_15 = core::ptr::addr_of_mut!((*_17));
_18 = core::ptr::addr_of!((*_15));
(*_17) = _4;
_12 = [(*_37),(*_37),(*_37),(*_37),(*_37)];
(*_17) = _1 - _4;
_12 = _11;
_26.0.0 = core::ptr::addr_of_mut!(_24);
(*_37) = _2;
(*_37) = _10;
(*_37) = _2;
Goto(bb19)
}
bb42 = {
_40 = !_6;
(*_37) = _38 as isize;
_41 = _28 as isize;
_49 = (_2, 142_u8, _3);
_45 = !_8;
match _49.1 {
0 => bb6,
1 => bb25,
2 => bb15,
3 => bb19,
142 => bb29,
_ => bb28
}
}
bb43 = {
Return()
}
bb44 = {
(*_17) = _4 + _1;
_31 = '\u{e8820}';
_24 = _32 as u32;
_26.0.3 = 61_i8 & 1_i8;
_22 = _24 as isize;
_10 = _29.0 >> _29.0;
match RET {
0 => bb1,
4106375037914490970 => bb17,
_ => bb4
}
}
bb45 = {
Return()
}
bb46 = {
(*_17) = _23 * _9;
(*_37) = _29.0 | _10;
(*_17) = _30 as f64;
match _39.1.0 {
0 => bb1,
1 => bb18,
2 => bb17,
3 => bb24,
4 => bb5,
5 => bb22,
340282366920938463463374607431180089557 => bb27,
_ => bb26
}
}
bb47 = {
(*_17) = _23 * _9;
(*_37) = _29.0 | _10;
(*_17) = _30 as f64;
match _39.1.0 {
0 => bb1,
1 => bb18,
2 => bb17,
3 => bb24,
4 => bb5,
5 => bb22,
340282366920938463463374607431180089557 => bb27,
_ => bb26
}
}
bb48 = {
_50 = _26.0.1 - _26.0.1;
_39.0 = &_39.1.0;
(*_37) = !_7;
_3 = !_49.2;
(*_37) = _42 & _29.0;
(*_37) = !_49.0;
_31 = _33.0;
(*_37) = _39.1.0 as isize;
_39.1.0 = _31 as i32;
(*_17) = _39.1.0 as f64;
_50 = !_26.0.1;
_26.0.1 = _50;
_40 = !_6;
_4 = -_14;
_26.1 = _27 - _27;
_12 = [_7,_29.0,_41,_49.0,_29.0];
_6 = _45 | _45;
_56 = !_30;
_52 = _44 - _44;
_49 = (_44, 136_u8, _3);
match _49.1 {
136 => bb50,
_ => bb49
}
}
bb49 = {
_19 = core::ptr::addr_of!((*_18));
(*_19) = _4 + _1;
_6 = (*_18) >= (*_19);
(*_18) = 18037944217630725228_u64 as f64;
(*_18) = _14 - _4;
(*_18) = _4 * _4;
_1 = (*_18) * (*_18);
_12 = _11;
(*_18) = _4 + _1;
(*_18) = RET as f64;
_5 = RET as isize;
_7 = 75_u8 as isize;
(*_18) = _1 + _1;
_18 = core::ptr::addr_of!(_1);
_20 = 14964482141206410788_u64 as f32;
(*_18) = _4 - _4;
(*_18) = _14;
_13 = _20 + _20;
Call((*_18) = fn3(Move(_18), _12, Move(_19)), ReturnTo(bb9), UnwindUnreachable())
}
bb50 = {
(*_17) = _23 + _14;
_67 = _56 as isize;
_46 = _6;
(*_17) = _38 as f64;
(*_17) = _1 - _35;
_60 = _29.0;
Goto(bb51)
}
bb51 = {
Call(_68 = dump_var(Move(_40), Move(_2), Move(_8), Move(_22)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_68 = dump_var(Move(_10), Move(_53), Move(_5), Move(_44)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_68 = dump_var(Move(_34), Move(_50), Move(_27), Move(_42)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_68 = dump_var(Move(_31), Move(_29), Move(_28), Move(_60)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: *const f64,mut _2: [isize; 5],mut _3: *const f64) -> f64 {
mir! {
type RET = f64;
let _4: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _5: *const isize;
let _6: [isize; 6];
let _7: isize;
let _8: char;
let _9: [u64; 6];
let _10: isize;
let _11: ((Adt21,), [i128; 4]);
let _12: *const *const u32;
let _13: [u64; 4];
let _14: bool;
let _15: i128;
let _16: isize;
let _17: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _18: i64;
let _19: [isize; 6];
let _20: &'static mut char;
let _21: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _22: (isize,);
let _23: *mut f64;
let _24: isize;
let _25: isize;
let _26: *mut u128;
let _27: f32;
let _28: isize;
let _29: i32;
let _30: i64;
let _31: &'static mut usize;
let _32: bool;
let _33: i128;
let _34: i8;
let _35: char;
let _36: bool;
let _37: f32;
let _38: f32;
let _39: isize;
let _40: [i128; 7];
let _41: *const f64;
let _42: bool;
let _43: (&'static mut usize, (*const Adt17, [isize; 6], [u64; 3], i128), u32);
let _44: &'static char;
let _45: *mut char;
let _46: *mut u32;
let _47: char;
let _48: bool;
let _49: i16;
let _50: &'static i32;
let _51: [i128; 7];
let _52: i64;
let _53: f32;
let _54: Adt53;
let _55: f64;
let _56: f32;
let _57: &'static mut usize;
let _58: ();
let _59: ();
{
RET = 6586_u16 as f64;
_2 = [6_isize,(-9223372036854775808_isize),30_isize,97_isize,(-9223372036854775808_isize)];
_1 = core::ptr::addr_of!(RET);
(*_1) = 151392410642905703555463178316960573001_u128 as f64;
(*_1) = (-50833864244450018729972671778386804309_i128) as f64;
Goto(bb1)
}
bb1 = {
(*_1) = 16956_i16 as f64;
(*_1) = 22949_i16 as f64;
(*_1) = 210_u8 as f64;
(*_1) = (-84_isize) as f64;
(*_1) = (-4020945210517429554_i64) as f64;
(*_1) = 2_usize as f64;
(*_1) = (-60_isize) as f64;
(*_1) = (-1576808878_i32) as f64;
(*_1) = (-17_isize) as f64;
(*_1) = 55300152837636007857746937644076423621_i128 as f64;
(*_1) = 1239103738_i32 as f64;
(*_1) = (-27016_i16) as f64;
(*_1) = 209560266479444370_u64 as f64;
_1 = core::ptr::addr_of!((*_1));
_3 = core::ptr::addr_of!((*_1));
(*_1) = 2414_u16 as f64;
(*_1) = 54384_u16 as f64;
_6 = [(-9223372036854775808_isize),(-9223372036854775808_isize),(-100_isize),(-9223372036854775808_isize),2_isize,(-97_isize)];
(*_1) = 10100365425108343573_usize as f64;
(*_1) = (-23_i8) as f64;
_3 = Move(_1);
_3 = core::ptr::addr_of!(RET);
(*_3) = (-92004924258612193353870286504213429285_i128) as f64;
(*_3) = (-98674364_i32) as f64;
(*_3) = 208_u8 as f64;
(*_3) = (-1718923651_i32) as f64;
(*_3) = 201_u8 as f64;
Goto(bb2)
}
bb2 = {
(*_3) = 91686796031959784242054644411844519654_u128 as f64;
(*_3) = 19558516444233447284913528090200787683_u128 as f64;
(*_3) = 113_u8 as f64;
Goto(bb3)
}
bb3 = {
(*_3) = 118_i8 as f64;
(*_3) = (-445091904_i32) as f64;
(*_3) = (-76_isize) as f64;
_5 = core::ptr::addr_of!(_7);
Goto(bb4)
}
bb4 = {
(*_5) = 9223372036854775807_isize;
(*_5) = (-9223372036854775808_isize) - (-9223372036854775808_isize);
(*_5) = (-9223372036854775808_isize) | (-9223372036854775808_isize);
_2 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
Call((*_3) = core::intrinsics::transmute((*_5)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_9 = [2482589472795036624_u64,12358485099904329717_u64,3766746829080200579_u64,13584103487243977427_u64,17603045429823560553_u64,13562288978322804674_u64];
(*_3) = 7_usize as f64;
_6 = [(*_5),(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_3) = 43842020222301758646107702395051796989_u128 as f64;
(*_5) = false as isize;
(*_3) = 2921482287549685482_usize as f64;
(*_3) = (*_5) as f64;
(*_5) = (-9223372036854775808_isize) & (-9223372036854775808_isize);
_3 = core::ptr::addr_of!((*_3));
(*_3) = (*_5) as f64;
_1 = core::ptr::addr_of!((*_3));
(*_5) = 9223372036854775807_isize | (-74_isize);
(*_5) = (-17_isize) | (-9223372036854775808_isize);
(*_5) = 11947025219413229790_u64 as isize;
(*_5) = (-9223372036854775808_isize) << 15_i8;
(*_5) = !9223372036854775807_isize;
(*_5) = 12832898328635126482_u64 as isize;
_8 = '\u{3eef4}';
(*_5) = (-17_isize) | 9223372036854775807_isize;
(*_5) = 4778_u16 as isize;
(*_1) = 8477_i16 as f64;
_5 = core::ptr::addr_of!((*_5));
(*_1) = 7941511106497568986_u64 as f64;
(*_3) = 105657867913190736231568819516022147229_i128 as f64;
_8 = '\u{37f4a}';
Goto(bb6)
}
bb6 = {
(*_5) = 9223372036854775807_isize << (-46011501525294972125043985502393036473_i128);
_14 = true;
(*_5) = 9223372036854775807_isize | (-9223372036854775808_isize);
(*_3) = 37_u8 as f64;
(*_3) = (-5244608122723470811_i64) as f64;
(*_3) = 91008407512585301662681487934557688562_i128 as f64;
_13 = [3636433135848655391_u64,7916679456737927309_u64,8360848760615459590_u64,11427905558101009973_u64];
(*_5) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_3) = (*_5) as f64;
_10 = (*_5) + (*_5);
(*_3) = 27079_u16 as f64;
(*_5) = _10 & _10;
(*_5) = 19_i8 as isize;
(*_5) = _10 >> _10;
(*_3) = 12224364377154908358_usize as f64;
(*_5) = (-32071_i16) as isize;
(*_3) = _10 as f64;
(*_5) = -_10;
(*_5) = _10 * _10;
Call(_1 = fn4((*_5)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
_1 = Move(_3);
(*_5) = !_10;
(*_5) = !_10;
(*_5) = !_10;
Goto(bb8)
}
bb8 = {
(*_5) = _10 + _10;
(*_5) = _10 ^ _10;
_10 = (*_5) + (*_5);
_16 = (*_5) & (*_5);
_2 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_11.1 = [125800592555004185955243490477671652118_i128,108907994721082760086056949524618077693_i128,(-103245453062246082846465697470018971604_i128),5231327225385754244195766879162905646_i128];
_15 = -(-92100058981285413514523713574117923088_i128);
_11.1 = [_15,_15,_15,_15];
_9 = [680248147206609617_u64,353824701616993574_u64,6401842625898608721_u64,4323931688341769905_u64,11760570087435682119_u64,16117731535254357786_u64];
(*_5) = !_16;
_8 = '\u{e3274}';
(*_5) = _16 * _10;
(*_5) = _16;
(*_5) = (-815009014121764689_i64) as isize;
_15 = 48839923448190974090500815794335279062_i128 & (-65388925595739906244406615592333308611_i128);
_16 = _10 ^ _10;
_19 = [_16,_16,(*_5),_16,_16,_16];
_14 = !false;
_24 = -_10;
(*_5) = 1787452863_u32 as isize;
_20 = &mut _8;
(*_5) = _10 * _10;
_22 = (_10,);
_18 = (-6280701840166855848_i64) >> (*_5);
(*_5) = _16;
Goto(bb9)
}
bb9 = {
(*_20) = '\u{90f65}';
_14 = (*_5) != (*_5);
(*_5) = _18 as isize;
(*_5) = _16 >> _10;
(*_5) = _10 & _22.0;
(*_5) = _10 ^ _10;
(*_5) = _16;
(*_5) = 539877465_u32 as isize;
_10 = !_24;
(*_5) = !_10;
(*_20) = '\u{102554}';
(*_20) = '\u{51004}';
_18 = RET as i64;
(*_5) = _16 + _22.0;
(*_5) = _16;
(*_20) = '\u{ea4e6}';
_23 = core::ptr::addr_of_mut!(RET);
(*_20) = '\u{52a60}';
_13 = [12839331977996558573_u64,12500741775851585744_u64,11454741933712977291_u64,11962917719172540566_u64];
_3 = core::ptr::addr_of!((*_23));
(*_5) = -_24;
(*_5) = _22.0 << _22.0;
Goto(bb10)
}
bb10 = {
(*_3) = 1838533162_u32 as f64;
_14 = (*_5) != (*_5);
(*_3) = _18 as f64;
(*_3) = (*_5) as f64;
_11.1 = [_15,_15,_15,_15];
_6 = _19;
(*_3) = 28088_u16 as f64;
(*_5) = _16 + _22.0;
(*_5) = _22.0 >> _16;
_22 = ((*_5),);
(*_3) = _18 as f64;
(*_20) = '\u{37841}';
(*_5) = _22.0 - _10;
_13 = [11126877871924434531_u64,14613900854901350195_u64,12228989793497788820_u64,7565785541134902347_u64];
(*_3) = 5_usize as f64;
(*_3) = 8953151863864362391_u64 as f64;
(*_20) = '\u{32dff}';
_9 = [3743667188166553732_u64,8568278328021213787_u64,3737108093977144992_u64,1626928783037991455_u64,17996833094258294061_u64,14216324181252849259_u64];
(*_20) = '\u{e245c}';
_27 = (-10380_i16) as f32;
(*_23) = 7906111149261266497_usize as f64;
RET = 39054_u16 as f64;
Goto(bb11)
}
bb11 = {
(*_20) = '\u{25917}';
_16 = 3341066581_u32 as isize;
(*_5) = _22.0 - _24;
_11.1 = [_15,_15,_15,_15];
_19 = _6;
(*_23) = 245400679129562574740355934894955103328_u128 as f64;
_16 = (*_5) * (*_5);
(*_20) = '\u{5a105}';
(*_20) = '\u{fdb1d}';
(*_23) = 214_u8 as f64;
(*_20) = '\u{19f2f}';
Goto(bb12)
}
bb12 = {
(*_23) = 167_u8 as f64;
_22.0 = 39985_u16 as isize;
_27 = 59572_u16 as f32;
_15 = _18 as i128;
_28 = (*_5) << (*_5);
_27 = 2134489230_i32 as f32;
_14 = !true;
(*_5) = (*_23) as isize;
(*_23) = 36571_u16 as f64;
(*_5) = _16 ^ _28;
_14 = !false;
Goto(bb13)
}
bb13 = {
(*_20) = '\u{7b91a}';
_16 = (*_5);
_11.1 = [_15,_15,_15,_15];
(*_23) = _18 as f64;
_14 = !false;
(*_5) = _28;
(*_20) = '\u{1dd6}';
_18 = _14 as i64;
(*_5) = _14 as isize;
(*_23) = 1033_i16 as f64;
_7 = !_16;
(*_20) = '\u{34040}';
(*_20) = '\u{e334c}';
(*_20) = '\u{ac84a}';
_11.0.0 = Adt21::Variant2 { fld0: Move(_23),fld1: 171137463221646430243910223797889451794_u128,fld2: (*_5),fld3: 11519781880029846224_usize };
_7 = _28;
(*_5) = Field::<isize>(Variant(_11.0.0, 2), 2);
(*_5) = (*_20) as isize;
(*_20) = '\u{a1c21}';
_25 = 1261526059_i32 as isize;
(*_20) = '\u{10b4f8}';
Goto(bb14)
}
bb14 = {
_30 = _18;
_36 = Field::<isize>(Variant(_11.0.0, 2), 2) > _28;
(*_5) = !_16;
(*_20) = '\u{ce15e}';
_15 = (-95273296136741787912083496126065977854_i128);
_30 = -_18;
_10 = _16 | (*_5);
place!(Field::<u128>(Variant(_11.0.0, 2), 1)) = 239453236460351507271082985455030991021_u128;
(*_5) = Field::<isize>(Variant(_11.0.0, 2), 2) | _16;
_37 = _27 + _27;
_38 = _27 * _37;
_28 = (-103_i8) as isize;
_24 = (-25668_i16) as isize;
(*_20) = '\u{991cd}';
(*_20) = '\u{849f9}';
(*_5) = RET as isize;
(*_5) = _16 & _10;
_35 = (*_20);
_5 = core::ptr::addr_of!((*_5));
Goto(bb15)
}
bb15 = {
_33 = _15 & _15;
(*_5) = Field::<isize>(Variant(_11.0.0, 2), 2);
_7 = Field::<isize>(Variant(_11.0.0, 2), 2) >> _10;
_35 = (*_20);
_40 = [_33,_33,_33,_33,_33,_33,_15];
place!(Field::<u128>(Variant(_11.0.0, 2), 1)) = RET as u128;
(*_20) = _35;
_28 = _33 as isize;
_36 = _14;
_39 = 2355111484_u32 as isize;
match _15 {
0 => bb13,
1 => bb2,
2 => bb3,
3 => bb8,
4 => bb5,
5 => bb14,
245009070784196675551291111305702233602 => bb17,
_ => bb16
}
}
bb16 = {
(*_20) = '\u{7b91a}';
_16 = (*_5);
_11.1 = [_15,_15,_15,_15];
(*_23) = _18 as f64;
_14 = !false;
(*_5) = _28;
(*_20) = '\u{1dd6}';
_18 = _14 as i64;
(*_5) = _14 as isize;
(*_23) = 1033_i16 as f64;
_7 = !_16;
(*_20) = '\u{34040}';
(*_20) = '\u{e334c}';
(*_20) = '\u{ac84a}';
_11.0.0 = Adt21::Variant2 { fld0: Move(_23),fld1: 171137463221646430243910223797889451794_u128,fld2: (*_5),fld3: 11519781880029846224_usize };
_7 = _28;
(*_5) = Field::<isize>(Variant(_11.0.0, 2), 2);
(*_5) = (*_20) as isize;
(*_20) = '\u{a1c21}';
_25 = 1261526059_i32 as isize;
(*_20) = '\u{10b4f8}';
Goto(bb14)
}
bb17 = {
_23 = core::ptr::addr_of_mut!(RET);
(*_20) = _35;
(*_5) = _10 & _16;
_11.1 = [_33,_33,_15,_15];
(*_20) = _35;
(*_20) = _35;
_34 = (-101_i8);
(*_20) = _35;
(*_20) = _35;
Goto(bb18)
}
bb18 = {
(*_20) = _35;
(*_20) = _35;
(*_20) = _35;
(*_20) = _35;
_36 = _14 ^ _14;
_35 = (*_20);
_39 = (*_5) << (*_5);
(*_23) = 15401752894325950475_u64 as f64;
(*_5) = !_10;
(*_23) = 8810290172063066755_u64 as f64;
(*_20) = _35;
_24 = _38 as isize;
(*_23) = _38 as f64;
(*_5) = Field::<isize>(Variant(_11.0.0, 2), 2) * Field::<isize>(Variant(_11.0.0, 2), 2);
(*_5) = _10;
(*_20) = _35;
(*_20) = _35;
_10 = !(*_5);
(*_23) = _34 as f64;
_27 = _38 - _37;
_28 = -(*_5);
(*_5) = Field::<isize>(Variant(_11.0.0, 2), 2) ^ _39;
Goto(bb19)
}
bb19 = {
_22.0 = -(*_5);
_33 = _15 * _15;
_46 = core::ptr::addr_of_mut!(_43.2);
_41 = core::ptr::addr_of!((*_23));
_43.1.3 = 910854910_i32 as i128;
(*_46) = 6780293910340946710_usize as u32;
_43.2 = _39 as u32;
_32 = !_36;
(*_20) = _35;
_42 = _36 ^ _14;
(*_23) = (*_46) as f64;
(*_20) = _35;
_3 = Move(_41);
(*_20) = _35;
_41 = core::ptr::addr_of!((*_23));
(*_23) = (*_46) as f64;
(*_5) = !Field::<isize>(Variant(_11.0.0, 2), 2);
(*_23) = _37 as f64;
(*_23) = _34 as f64;
_42 = !_14;
_20 = &mut _35;
_25 = (*_5);
(*_23) = _15 as f64;
match _34 {
0 => bb14,
1 => bb20,
2 => bb21,
3 => bb22,
340282366920938463463374607431768211355 => bb24,
_ => bb23
}
}
bb20 = {
_9 = [2482589472795036624_u64,12358485099904329717_u64,3766746829080200579_u64,13584103487243977427_u64,17603045429823560553_u64,13562288978322804674_u64];
(*_3) = 7_usize as f64;
_6 = [(*_5),(*_5),(*_5),(*_5),(*_5),(*_5)];
(*_3) = 43842020222301758646107702395051796989_u128 as f64;
(*_5) = false as isize;
(*_3) = 2921482287549685482_usize as f64;
(*_3) = (*_5) as f64;
(*_5) = (-9223372036854775808_isize) & (-9223372036854775808_isize);
_3 = core::ptr::addr_of!((*_3));
(*_3) = (*_5) as f64;
_1 = core::ptr::addr_of!((*_3));
(*_5) = 9223372036854775807_isize | (-74_isize);
(*_5) = (-17_isize) | (-9223372036854775808_isize);
(*_5) = 11947025219413229790_u64 as isize;
(*_5) = (-9223372036854775808_isize) << 15_i8;
(*_5) = !9223372036854775807_isize;
(*_5) = 12832898328635126482_u64 as isize;
_8 = '\u{3eef4}';
(*_5) = (-17_isize) | 9223372036854775807_isize;
(*_5) = 4778_u16 as isize;
(*_1) = 8477_i16 as f64;
_5 = core::ptr::addr_of!((*_5));
(*_1) = 7941511106497568986_u64 as f64;
(*_3) = 105657867913190736231568819516022147229_i128 as f64;
_8 = '\u{37f4a}';
Goto(bb6)
}
bb21 = {
(*_5) = _10 + _10;
(*_5) = _10 ^ _10;
_10 = (*_5) + (*_5);
_16 = (*_5) & (*_5);
_2 = [(*_5),(*_5),(*_5),(*_5),(*_5)];
_11.1 = [125800592555004185955243490477671652118_i128,108907994721082760086056949524618077693_i128,(-103245453062246082846465697470018971604_i128),5231327225385754244195766879162905646_i128];
_15 = -(-92100058981285413514523713574117923088_i128);
_11.1 = [_15,_15,_15,_15];
_9 = [680248147206609617_u64,353824701616993574_u64,6401842625898608721_u64,4323931688341769905_u64,11760570087435682119_u64,16117731535254357786_u64];
(*_5) = !_16;
_8 = '\u{e3274}';
(*_5) = _16 * _10;
(*_5) = _16;
(*_5) = (-815009014121764689_i64) as isize;
_15 = 48839923448190974090500815794335279062_i128 & (-65388925595739906244406615592333308611_i128);
_16 = _10 ^ _10;
_19 = [_16,_16,(*_5),_16,_16,_16];
_14 = !false;
_24 = -_10;
(*_5) = 1787452863_u32 as isize;
_20 = &mut _8;
(*_5) = _10 * _10;
_22 = (_10,);
_18 = (-6280701840166855848_i64) >> (*_5);
(*_5) = _16;
Goto(bb9)
}
bb22 = {
(*_3) = 1838533162_u32 as f64;
_14 = (*_5) != (*_5);
(*_3) = _18 as f64;
(*_3) = (*_5) as f64;
_11.1 = [_15,_15,_15,_15];
_6 = _19;
(*_3) = 28088_u16 as f64;
(*_5) = _16 + _22.0;
(*_5) = _22.0 >> _16;
_22 = ((*_5),);
(*_3) = _18 as f64;
(*_20) = '\u{37841}';
(*_5) = _22.0 - _10;
_13 = [11126877871924434531_u64,14613900854901350195_u64,12228989793497788820_u64,7565785541134902347_u64];
(*_3) = 5_usize as f64;
(*_3) = 8953151863864362391_u64 as f64;
(*_20) = '\u{32dff}';
_9 = [3743667188166553732_u64,8568278328021213787_u64,3737108093977144992_u64,1626928783037991455_u64,17996833094258294061_u64,14216324181252849259_u64];
(*_20) = '\u{e245c}';
_27 = (-10380_i16) as f32;
(*_23) = 7906111149261266497_usize as f64;
RET = 39054_u16 as f64;
Goto(bb11)
}
bb23 = {
_1 = Move(_3);
(*_5) = !_10;
(*_5) = !_10;
(*_5) = !_10;
Goto(bb8)
}
bb24 = {
_55 = -(*_23);
_43.1.1 = [(*_5),(*_5),(*_5),_28,(*_5),(*_5)];
_6 = [(*_5),(*_5),(*_5),(*_5),(*_5),(*_5)];
_52 = 850_i16 as i64;
_44 = &(*_20);
_47 = (*_44);
_11.1 = [_43.1.3,_43.1.3,_43.1.3,_33];
(*_5) = 5537_i16 as isize;
(*_46) = 376087240_u32 - 1837751910_u32;
(*_20) = _47;
_10 = _22.0;
(*_46) = !1624975289_u32;
(*_46) = 2500213466_u32;
_54.fld0.0.1 = 4453_u16;
_13 = [1442828972253812986_u64,12422375624170923457_u64,7814969629063078206_u64,5908390097286236078_u64];
_52 = _30 >> _22.0;
(*_23) = _52 as f64;
_23 = core::ptr::addr_of_mut!((*_23));
_54.fld0.0.2 = [_33,_15,_33,_33];
_14 = _52 != _52;
(*_5) = _10;
Goto(bb25)
}
bb25 = {
Call(_58 = dump_var(Move(_47), Move(_33), Move(_13), Move(_2)), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
Call(_58 = dump_var(Move(_7), Move(_25), Move(_42), Move(_15)), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
Call(_58 = dump_var(Move(_10), Move(_39), Move(_30), Move(_19)), ReturnTo(bb28), UnwindUnreachable())
}
bb28 = {
Call(_58 = dump_var(Move(_40), _59, _59, _59), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn4(mut _1: isize) -> *const f64 {
mir! {
type RET = *const f64;
let _2: &'static mut char;
let _3: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _4: bool;
let _5: isize;
let _6: char;
let _7: &'static char;
let _8: i8;
let _9: i8;
let _10: [isize; 5];
let _11: bool;
let _12: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _13: (i32,);
let _14: *const *const u32;
let _15: i128;
let _16: Adt79;
let _17: f64;
let _18: i8;
let _19: i16;
let _20: *mut u128;
let _21: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _22: bool;
let _23: i16;
let _24: [char; 8];
let _25: i128;
let _26: isize;
let _27: bool;
let _28: f32;
let _29: &'static mut usize;
let _30: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _31: &'static mut char;
let _32: i128;
let _33: (isize, u8, i64);
let _34: f32;
let _35: (*mut char, i128, (u128,));
let _36: bool;
let _37: [u128; 2];
let _38: isize;
let _39: *mut &'static i128;
let _40: ((Adt21,), [i128; 4]);
let _41: isize;
let _42: i16;
let _43: *const &'static mut usize;
let _44: [u64; 3];
let _45: [i8; 5];
let _46: *mut u32;
let _47: isize;
let _48: i16;
let _49: *mut char;
let _50: ((Adt21,), [i128; 4]);
let _51: isize;
let _52: u64;
let _53: *mut u128;
let _54: f32;
let _55: f64;
let _56: i128;
let _57: ((*mut u32, u16, [i128; 4], i8), i16);
let _58: i128;
let _59: *const *const u32;
let _60: &'static mut char;
let _61: u8;
let _62: usize;
let _63: &'static i128;
let _64: i32;
let _65: &'static i32;
let _66: isize;
let _67: bool;
let _68: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _69: ((Adt21,), [i128; 4]);
let _70: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _71: *const Adt17;
let _72: (*mut u32, u16, [i128; 4], i8);
let _73: bool;
let _74: *const isize;
let _75: *const f64;
let _76: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _77: [i128; 7];
let _78: isize;
let _79: *mut ([isize; 6], (isize, u8, i64));
let _80: &'static char;
let _81: bool;
let _82: (i32,);
let _83: char;
let _84: isize;
let _85: *const *const u32;
let _86: f64;
let _87: Adt21;
let _88: &'static *mut f64;
let _89: &'static i32;
let _90: [i128; 3];
let _91: isize;
let _92: isize;
let _93: *mut u32;
let _94: *mut f64;
let _95: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _96: f64;
let _97: [isize; 1];
let _98: *const f64;
let _99: [i8; 5];
let _100: *const u32;
let _101: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _102: i128;
let _103: *const u32;
let _104: i64;
let _105: i8;
let _106: ();
let _107: ();
{
_1 = 1525247064430102991_i64 as isize;
_1 = (-9223372036854775808_isize) - 9223372036854775807_isize;
_1 = 15679391844848084155_u64 as isize;
_1 = 9223372036854775807_isize;
_1 = 9223372036854775807_isize << 2_i8;
_1 = 4_isize | 9223372036854775807_isize;
_1 = !(-9223372036854775808_isize);
_1 = (-28_isize) & 88_isize;
Goto(bb1)
}
bb1 = {
_4 = false;
_5 = _4 as isize;
_4 = false;
_4 = true ^ false;
_4 = true;
_4 = false | false;
_4 = _1 != _1;
_1 = (-927744431_i32) as isize;
_1 = _5;
_4 = _1 >= _1;
_5 = !_1;
_1 = _5 - _5;
_5 = !_1;
_5 = _1 * _1;
_6 = '\u{f151b}';
_2 = &mut _6;
(*_2) = '\u{c16e0}';
_5 = _1 >> _1;
(*_2) = '\u{d6b67}';
(*_2) = '\u{a1cd4}';
(*_2) = '\u{649bd}';
_5 = 3910944655_u32 as isize;
_4 = (*_2) >= (*_2);
_8 = (-24_i8) - 52_i8;
(*_2) = '\u{bbbe5}';
(*_2) = '\u{b0d5}';
(*_2) = '\u{4e991}';
(*_2) = '\u{9b398}';
Call((*_2) = fn5(_8, _4, _1, _1, _8, _1, _5, _4, _1, _4, _1, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
(*_2) = '\u{d9177}';
(*_2) = '\u{44e47}';
(*_2) = '\u{6717a}';
Goto(bb3)
}
bb3 = {
(*_2) = '\u{799e6}';
_1 = !_5;
(*_2) = '\u{cdd93}';
(*_2) = '\u{ff965}';
(*_2) = '\u{f482f}';
(*_2) = '\u{10afd8}';
(*_2) = '\u{6b726}';
(*_2) = '\u{308e}';
(*_2) = '\u{9f46a}';
_11 = _4;
_1 = _5;
_9 = 51963084935367697728653616194656675261_u128 as i8;
_11 = _4;
(*_2) = '\u{100217}';
(*_2) = '\u{ab7ba}';
(*_2) = '\u{4b731}';
_15 = 42451035253656262990026513138532661737_i128;
match _15 {
0 => bb2,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
42451035253656262990026513138532661737 => bb9,
_ => bb8
}
}
bb4 = {
(*_2) = '\u{d9177}';
(*_2) = '\u{44e47}';
(*_2) = '\u{6717a}';
Goto(bb3)
}
bb5 = {
_4 = false;
_5 = _4 as isize;
_4 = false;
_4 = true ^ false;
_4 = true;
_4 = false | false;
_4 = _1 != _1;
_1 = (-927744431_i32) as isize;
_1 = _5;
_4 = _1 >= _1;
_5 = !_1;
_1 = _5 - _5;
_5 = !_1;
_5 = _1 * _1;
_6 = '\u{f151b}';
_2 = &mut _6;
(*_2) = '\u{c16e0}';
_5 = _1 >> _1;
(*_2) = '\u{d6b67}';
(*_2) = '\u{a1cd4}';
(*_2) = '\u{649bd}';
_5 = 3910944655_u32 as isize;
_4 = (*_2) >= (*_2);
_8 = (-24_i8) - 52_i8;
(*_2) = '\u{bbbe5}';
(*_2) = '\u{b0d5}';
(*_2) = '\u{4e991}';
(*_2) = '\u{9b398}';
Call((*_2) = fn5(_8, _4, _1, _1, _8, _1, _5, _4, _1, _4, _1, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_13.0 = 50_u8 as i32;
_4 = _11;
(*_2) = '\u{24d01}';
_7 = &(*_2);
(*_2) = '\u{20a87}';
_15 = (-123272276132496291494590720278500950171_i128);
_10 = [_5,_5,_1,_1,_1];
(*_2) = '\u{a6b6}';
(*_2) = '\u{6335b}';
(*_2) = '\u{a34b5}';
_8 = _9;
(*_2) = '\u{41e8d}';
(*_2) = '\u{d6723}';
(*_2) = '\u{2f944}';
(*_2) = '\u{efef0}';
_11 = (*_2) >= (*_2);
_9 = _15 as i8;
(*_2) = '\u{823cb}';
_15 = (-36859338260836219880032019435130096629_i128) * (-150341539846549910800399604481367688858_i128);
(*_2) = '\u{e112f}';
Goto(bb10)
}
bb10 = {
_16 = Adt79::Variant0 { fld0: 33013014999322079838551056776575810411_u128 };
_4 = _11 | _11;
(*_2) = '\u{a83cf}';
place!(Field::<u128>(Variant(_16, 0), 0)) = !119021883849177449755818746002565371041_u128;
(*_2) = '\u{9600a}';
(*_2) = '\u{a7d9}';
(*_2) = '\u{8a7a8}';
_19 = (-8238_i16) * (-25872_i16);
(*_2) = '\u{8462f}';
place!(Field::<u128>(Variant(_16, 0), 0)) = 232236833994625787003078079849097250331_u128;
(*_2) = '\u{10a6}';
(*_2) = '\u{c7807}';
(*_2) = '\u{29527}';
RET = core::ptr::addr_of!(_17);
(*_2) = '\u{7905}';
(*_2) = '\u{dedfa}';
(*RET) = 9354713382723526014_u64 as f64;
(*RET) = 11159713884045364059_usize as f64;
place!(Field::<u128>(Variant(_16, 0), 0)) = 283558060312418583567784766287685931596_u128;
(*_2) = '\u{7f707}';
(*_2) = '\u{9c477}';
(*_2) = '\u{47713}';
_9 = !_8;
(*RET) = _15 as f64;
(*RET) = _15 as f64;
RET = core::ptr::addr_of!(_17);
(*_2) = '\u{7e5a4}';
match Field::<u128>(Variant(_16, 0), 0) {
0 => bb9,
1 => bb7,
2 => bb5,
3 => bb11,
4 => bb12,
283558060312418583567784766287685931596 => bb14,
_ => bb13
}
}
bb11 = {
_4 = false;
_5 = _4 as isize;
_4 = false;
_4 = true ^ false;
_4 = true;
_4 = false | false;
_4 = _1 != _1;
_1 = (-927744431_i32) as isize;
_1 = _5;
_4 = _1 >= _1;
_5 = !_1;
_1 = _5 - _5;
_5 = !_1;
_5 = _1 * _1;
_6 = '\u{f151b}';
_2 = &mut _6;
(*_2) = '\u{c16e0}';
_5 = _1 >> _1;
(*_2) = '\u{d6b67}';
(*_2) = '\u{a1cd4}';
(*_2) = '\u{649bd}';
_5 = 3910944655_u32 as isize;
_4 = (*_2) >= (*_2);
_8 = (-24_i8) - 52_i8;
(*_2) = '\u{bbbe5}';
(*_2) = '\u{b0d5}';
(*_2) = '\u{4e991}';
(*_2) = '\u{9b398}';
Call((*_2) = fn5(_8, _4, _1, _1, _8, _1, _5, _4, _1, _4, _1, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb12 = {
(*_2) = '\u{799e6}';
_1 = !_5;
(*_2) = '\u{cdd93}';
(*_2) = '\u{ff965}';
(*_2) = '\u{f482f}';
(*_2) = '\u{10afd8}';
(*_2) = '\u{6b726}';
(*_2) = '\u{308e}';
(*_2) = '\u{9f46a}';
_11 = _4;
_1 = _5;
_9 = 51963084935367697728653616194656675261_u128 as i8;
_11 = _4;
(*_2) = '\u{100217}';
(*_2) = '\u{ab7ba}';
(*_2) = '\u{4b731}';
_15 = 42451035253656262990026513138532661737_i128;
match _15 {
0 => bb2,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
42451035253656262990026513138532661737 => bb9,
_ => bb8
}
}
bb13 = {
Return()
}
bb14 = {
(*_2) = '\u{79240}';
(*_2) = '\u{b91fd}';
(*_2) = '\u{ea849}';
(*RET) = _13.0 as f64;
(*_2) = '\u{df8da}';
RET = core::ptr::addr_of!((*RET));
_8 = _9 >> _9;
_20 = core::ptr::addr_of_mut!(place!(Field::<u128>(Variant(_16, 0), 0)));
Goto(bb15)
}
bb15 = {
(*_20) = 74534112147333338555054204370733941261_u128 << _15;
_19 = 10797_i16 & 13754_i16;
(*_20) = 10504161207776266034_u64 as u128;
(*RET) = _19 as f64;
_9 = _19 as i8;
(*RET) = 1251966263578607710_usize as f64;
_24 = [(*_2),(*_2),(*_2),(*_2),(*_2),(*_2),(*_2),(*_2)];
_23 = _15 as i16;
(*_20) = 122559915512406350759435625673188842185_u128 & 40881525776494371526214483874213749453_u128;
(*RET) = 45464_u16 as f64;
place!(Field::<u128>(Variant(_16, 0), 0)) = (*RET) as u128;
(*RET) = 159_u8 as f64;
(*_2) = '\u{817e2}';
_22 = !_11;
_26 = _5;
(*_2) = '\u{55e01}';
(*_2) = '\u{5ec7e}';
(*_2) = '\u{c8094}';
(*RET) = 18354839458315208891_u64 as f64;
_27 = _4;
_17 = 9971401401850704227_usize as f64;
_5 = _1;
(*_20) = 10154345314195981936091305178153684232_u128 & 320098086998816266529576074233568553480_u128;
(*_20) = !300594247288585826178942619049811786796_u128;
Goto(bb16)
}
bb16 = {
_9 = _8;
(*_20) = 3376062538644830631309182999969933013_u128;
(*_20) = 12706042944520105444641498672149571392_u128;
(*_20) = _9 as u128;
_1 = !_5;
_19 = 16602296661188576126_u64 as i16;
(*RET) = _23 as f64;
(*RET) = _13.0 as f64;
_15 = _22 as i128;
_18 = _13.0 as i8;
(*_20) = _13.0 as u128;
(*RET) = _9 as f64;
(*RET) = 6_usize as f64;
_26 = -_5;
(*_2) = '\u{233e2}';
(*RET) = 228_u8 as f64;
(*_2) = '\u{c2bb5}';
(*RET) = 6196903986983377457_usize as f64;
(*RET) = (-6024053854567977245_i64) as f64;
Goto(bb17)
}
bb17 = {
(*RET) = 108_u8 as f64;
_5 = -_26;
(*RET) = 93_u8 as f64;
(*RET) = _18 as f64;
_9 = _8;
_35.2.0 = !(*_20);
(*RET) = 4_usize as f64;
_33 = (_26, 175_u8, 8649833082077371193_i64);
_27 = _33.2 > _33.2;
_11 = !_22;
(*_2) = '\u{1b4d0}';
(*_20) = _35.2.0 - _35.2.0;
_34 = _9 as f32;
_31 = &mut (*_2);
(*_31) = '\u{9bc1f}';
(*_31) = '\u{32b59}';
_37 = [(*_20),(*_20)];
(*RET) = _5 as f64;
_5 = _1 << _35.2.0;
(*RET) = _33.1 as f64;
_35.0 = core::ptr::addr_of_mut!((*_31));
Call(_38 = core::intrinsics::bswap(_26), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
(*RET) = 0_usize as f64;
_32 = _15 | _15;
(*RET) = _5 as f64;
_28 = _34;
(*RET) = (*_20) as f64;
(*_20) = !_35.2.0;
(*_31) = '\u{98380}';
_10 = [_5,_5,_26,_26,_26];
(*_31) = '\u{32fb8}';
_36 = (*RET) >= (*RET);
_33.2 = 8688831188430697163_i64;
_36 = !_11;
_9 = _8 * _18;
(*_20) = !_35.2.0;
_25 = _26 as i128;
(*_31) = '\u{108295}';
_37 = [(*_20),(*_20)];
_33 = (_5, 233_u8, 790227458154171344_i64);
_35.2.0 = (*_20) | (*_20);
(*_20) = !_35.2.0;
(*_20) = 308271675_u32 as u128;
(*RET) = _8 as f64;
(*RET) = 5613703008161560798_u64 as f64;
(*_20) = _35.2.0 >> _19;
_44 = [4218294485410019994_u64,13494908799717602140_u64,415113058700060143_u64];
(*_31) = '\u{f19da}';
(*_20) = _33.1 as u128;
Call(_15 = core::intrinsics::transmute(_32), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
(*_31) = '\u{7ffab}';
(*_20) = _35.2.0 & _35.2.0;
_42 = _34 as i16;
_49 = core::ptr::addr_of_mut!((*_31));
(*_49) = '\u{52ca7}';
_35.0 = core::ptr::addr_of_mut!((*_31));
_23 = _33.0 as i16;
(*_20) = _35.2.0 | _35.2.0;
_25 = _15 >> _33.2;
(*_49) = '\u{593a2}';
(*RET) = _28 as f64;
_26 = _33.0;
_5 = _1 ^ _33.0;
(*_31) = '\u{a9158}';
_28 = _34 * _34;
(*_31) = '\u{f0fef}';
_22 = _27;
(*RET) = _33.1 as f64;
(*_31) = '\u{b3ac6}';
(*_20) = _33.1 as u128;
(*_20) = !_35.2.0;
_48 = _19 * _19;
_36 = _28 > _34;
Goto(bb20)
}
bb20 = {
(*_31) = '\u{33e59}';
(*_20) = _35.2.0;
_19 = -_42;
_28 = _34;
_16 = Adt79::Variant0 { fld0: _35.2.0 };
_10 = [_5,_26,_1,_33.0,_26];
(*_31) = '\u{595fa}';
_25 = _4 as i128;
(*_31) = '\u{1399d}';
_35.2 = (Field::<u128>(Variant(_16, 0), 0),);
(*RET) = 50700_u16 as f64;
_23 = _28 as i16;
_51 = _33.0 - _33.0;
_13 = (34798152_i32,);
(*_31) = '\u{d07ee}';
_13.0 = (-1056643865_i32) >> _33.0;
_52 = 1085195221_u32 as u64;
_52 = 15720787384223258082_u64 << _19;
(*_31) = '\u{156f0}';
_41 = _5 & _5;
_48 = _23 + _42;
(*RET) = _41 as f64;
(*_31) = '\u{eb4a4}';
(*_31) = '\u{b40a0}';
RET = core::ptr::addr_of!((*RET));
_48 = _25 as i16;
_50.1 = [_25,_15,_32,_32];
Call((*RET) = core::intrinsics::transmute(_52), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
_28 = _34 + _34;
(*_31) = '\u{4010d}';
place!(Field::<u128>(Variant(_16, 0), 0)) = _35.2.0 | _35.2.0;
_56 = _32;
_27 = _4 ^ _4;
RET = core::ptr::addr_of!((*RET));
_22 = _36;
_45 = [_9,_8,_8,_9,_18];
_28 = _34 - _34;
(*_31) = '\u{102470}';
_50.1 = [_25,_32,_25,_25];
_33.2 = -(-7221708461241351714_i64);
(*_31) = '\u{323e5}';
_28 = _34 - _34;
(*RET) = 50619_u16 as f64;
(*_31) = '\u{194cb}';
_4 = Field::<u128>(Variant(_16, 0), 0) > Field::<u128>(Variant(_16, 0), 0);
(*RET) = _35.2.0 as f64;
_8 = _9 | _18;
(*RET) = 60573_u16 as f64;
_2 = Move(_31);
_41 = !_5;
_57.0.3 = !_8;
Goto(bb22)
}
bb22 = {
_33.2 = -(-4241055954968993438_i64);
(*RET) = 14350_u16 as f64;
_44 = [_52,_52,_52];
_35.0 = Move(_49);
_49 = Move(_35.0);
_10 = [_33.0,_33.0,_41,_5,_5];
_35.0 = Move(_49);
_13.0 = !735636238_i32;
(*RET) = _26 as f64;
(*RET) = _48 as f64;
_11 = !_4;
_57.0.2 = _50.1;
(*RET) = _57.0.3 as f64;
_35.2 = (Field::<u128>(Variant(_16, 0), 0),);
_32 = -_56;
_40.1 = _57.0.2;
_33.0 = _26;
_9 = -_8;
(*RET) = 8949_u16 as f64;
(*RET) = _33.0 as f64;
(*RET) = 1_usize as f64;
_33 = (_5, 65_u8, 1833821959268386557_i64);
(*RET) = _19 as f64;
(*RET) = _33.2 as f64;
Goto(bb23)
}
bb23 = {
_65 = &_13.0;
(*RET) = _28 as f64;
_55 = -(*RET);
(*RET) = 5947_u16 as f64;
(*RET) = -_55;
_15 = _56;
_35.1 = _15;
_61 = !_33.1;
_66 = _51;
_25 = _35.1 >> (*_65);
_27 = _11 ^ _22;
_32 = _56;
(*RET) = _34 as f64;
_13.0 = '\u{56579}' as i32;
(*RET) = _55 + _55;
(*RET) = -_55;
_4 = (*RET) == (*RET);
_64 = _13.0 & _13.0;
match _33.1 {
0 => bb20,
1 => bb8,
2 => bb3,
3 => bb22,
4 => bb21,
5 => bb17,
65 => bb24,
_ => bb16
}
}
bb24 = {
(*RET) = _33.2 as f64;
Goto(bb25)
}
bb25 = {
(*RET) = _55 - _55;
_57.0.2 = [_56,_56,_25,_56];
_65 = &_64;
(*RET) = _55 + _55;
(*RET) = _55 * _55;
_61 = !_33.1;
(*RET) = _55 - _55;
_58 = _33.1 as i128;
_49 = Move(_35.0);
_35.2.0 = _35.1 as u128;
match _33.1 {
0 => bb20,
1 => bb16,
2 => bb17,
3 => bb4,
4 => bb18,
65 => bb27,
_ => bb26
}
}
bb26 = {
(*RET) = _33.2 as f64;
Goto(bb25)
}
bb27 = {
_10 = [_41,_41,_41,_33.0,_51];
_32 = _35.1 >> _33.2;
(*RET) = _55;
_48 = -_19;
_8 = _18 + _57.0.3;
_58 = !_15;
(*RET) = _19 as f64;
_65 = &_13.0;
_63 = &_58;
_9 = _18;
(*RET) = _48 as f64;
_63 = &_32;
_1 = !_66;
_56 = (*_63);
_28 = _34;
(*RET) = 43332_u16 as f64;
_47 = '\u{eafdb}' as isize;
_23 = _19;
(*RET) = _55 - _55;
place!(Field::<u128>(Variant(_16, 0), 0)) = _35.2.0 * _35.2.0;
_18 = -_8;
_66 = -_41;
_32 = _58;
Goto(bb28)
}
bb28 = {
_51 = _5 + _26;
_67 = (*RET) >= (*RET);
_72.1 = !32600_u16;
_9 = !_57.0.3;
_8 = _18 & _9;
_73 = _67 ^ _67;
_42 = !_48;
_54 = _28 * _28;
(*RET) = _55;
_50.1 = [_15,_25,_56,_32];
_41 = _52 as isize;
(*RET) = _8 as f64;
_66 = -_41;
(*RET) = _55 - _55;
Goto(bb29)
}
bb29 = {
_56 = _25 & _58;
(*RET) = -_55;
_72.1 = !47426_u16;
_32 = _58 >> _1;
match _33.1 {
0 => bb30,
1 => bb31,
2 => bb32,
3 => bb33,
4 => bb34,
5 => bb35,
65 => bb37,
_ => bb36
}
}
bb30 = {
_13.0 = 50_u8 as i32;
_4 = _11;
(*_2) = '\u{24d01}';
_7 = &(*_2);
(*_2) = '\u{20a87}';
_15 = (-123272276132496291494590720278500950171_i128);
_10 = [_5,_5,_1,_1,_1];
(*_2) = '\u{a6b6}';
(*_2) = '\u{6335b}';
(*_2) = '\u{a34b5}';
_8 = _9;
(*_2) = '\u{41e8d}';
(*_2) = '\u{d6723}';
(*_2) = '\u{2f944}';
(*_2) = '\u{efef0}';
_11 = (*_2) >= (*_2);
_9 = _15 as i8;
(*_2) = '\u{823cb}';
_15 = (-36859338260836219880032019435130096629_i128) * (-150341539846549910800399604481367688858_i128);
(*_2) = '\u{e112f}';
Goto(bb10)
}
bb31 = {
Return()
}
bb32 = {
(*RET) = _33.2 as f64;
Goto(bb25)
}
bb33 = {
(*_2) = '\u{d9177}';
(*_2) = '\u{44e47}';
(*_2) = '\u{6717a}';
Goto(bb3)
}
bb34 = {
(*RET) = _33.2 as f64;
Goto(bb25)
}
bb35 = {
(*_31) = '\u{7ffab}';
(*_20) = _35.2.0 & _35.2.0;
_42 = _34 as i16;
_49 = core::ptr::addr_of_mut!((*_31));
(*_49) = '\u{52ca7}';
_35.0 = core::ptr::addr_of_mut!((*_31));
_23 = _33.0 as i16;
(*_20) = _35.2.0 | _35.2.0;
_25 = _15 >> _33.2;
(*_49) = '\u{593a2}';
(*RET) = _28 as f64;
_26 = _33.0;
_5 = _1 ^ _33.0;
(*_31) = '\u{a9158}';
_28 = _34 * _34;
(*_31) = '\u{f0fef}';
_22 = _27;
(*RET) = _33.1 as f64;
(*_31) = '\u{b3ac6}';
(*_20) = _33.1 as u128;
(*_20) = !_35.2.0;
_48 = _19 * _19;
_36 = _28 > _34;
Goto(bb20)
}
bb36 = {
Return()
}
bb37 = {
_48 = _41 as i16;
_19 = _42 + _42;
_72.3 = _8 - _18;
_22 = _55 <= _55;
_8 = _17 as i8;
Goto(bb38)
}
bb38 = {
_27 = !_11;
(*RET) = _52 as f64;
_35.1 = _25 * _32;
_80 = Move(_7);
_69.1 = [_58,_25,_15,_58];
_40.1 = [_25,_32,_58,_35.1];
_33.0 = _41;
_62 = 7_usize & 2_usize;
_56 = -_35.1;
Goto(bb39)
}
bb39 = {
_15 = _35.1 * _32;
_66 = _51 * _26;
(*RET) = _55 - _55;
_35.2 = (Field::<u128>(Variant(_16, 0), 0),);
_62 = 9552004401707487908_usize << _15;
_77 = [_32,_15,_25,_58,_32,_56,_56];
(*RET) = _55;
(*RET) = _55 * _55;
_33.2 = _33.1 as i64;
_47 = _33.0 * _41;
_82 = ((*_65),);
Goto(bb40)
}
bb40 = {
_72.1 = 40397_u16;
RET = core::ptr::addr_of!((*RET));
_53 = core::ptr::addr_of_mut!(place!(Field::<u128>(Variant(_16, 0), 0)));
_53 = core::ptr::addr_of_mut!((*_53));
(*_53) = _41 as u128;
_48 = !_23;
(*_53) = !_35.2.0;
_67 = _73;
_18 = _9 * _57.0.3;
(*_53) = _11 as u128;
_72.2 = [_35.1,_25,_35.1,_15];
_64 = (*_65) - (*_65);
(*RET) = _55 * _55;
_4 = !_67;
_33.1 = _62 as u8;
(*_53) = _35.2.0 | _35.2.0;
(*_53) = _35.2.0;
(*RET) = _55;
(*RET) = _55 + _55;
_56 = -_15;
_86 = -(*RET);
_15 = _32 + _35.1;
(*_53) = _35.2.0 * _35.2.0;
_33.0 = _18 as isize;
Goto(bb41)
}
bb41 = {
_72.3 = -_57.0.3;
(*RET) = _55 - _55;
_5 = _33.0 * _26;
_35.2 = ((*_53),);
(*_53) = !_35.2.0;
_32 = _58;
(*RET) = _86;
_33.2 = (-6063581320001348548_i64) >> (*_53);
_72.3 = _18;
_77 = [_56,_15,_35.1,_15,_35.1,_56,_25];
_23 = _19 & _19;
_53 = core::ptr::addr_of_mut!((*_53));
(*_53) = _35.2.0 ^ _35.2.0;
_5 = _33.0 | _1;
_32 = _5 as i128;
(*RET) = _55 + _86;
_78 = _73 as isize;
(*RET) = _55 * _86;
_32 = _42 as i128;
_84 = _78 - _47;
_33.0 = _1 + _51;
_33.0 = _51;
_78 = !_84;
match _72.1 {
0 => bb32,
1 => bb5,
2 => bb42,
3 => bb43,
40397 => bb45,
_ => bb44
}
}
bb42 = {
(*RET) = _33.2 as f64;
Goto(bb25)
}
bb43 = {
_10 = [_41,_41,_41,_33.0,_51];
_32 = _35.1 >> _33.2;
(*RET) = _55;
_48 = -_19;
_8 = _18 + _57.0.3;
_58 = !_15;
(*RET) = _19 as f64;
_65 = &_13.0;
_63 = &_58;
_9 = _18;
(*RET) = _48 as f64;
_63 = &_32;
_1 = !_66;
_56 = (*_63);
_28 = _34;
(*RET) = 43332_u16 as f64;
_47 = '\u{eafdb}' as isize;
_23 = _19;
(*RET) = _55 - _55;
place!(Field::<u128>(Variant(_16, 0), 0)) = _35.2.0 * _35.2.0;
_18 = -_8;
_66 = -_41;
_32 = _58;
Goto(bb28)
}
bb44 = {
(*_31) = '\u{7ffab}';
(*_20) = _35.2.0 & _35.2.0;
_42 = _34 as i16;
_49 = core::ptr::addr_of_mut!((*_31));
(*_49) = '\u{52ca7}';
_35.0 = core::ptr::addr_of_mut!((*_31));
_23 = _33.0 as i16;
(*_20) = _35.2.0 | _35.2.0;
_25 = _15 >> _33.2;
(*_49) = '\u{593a2}';
(*RET) = _28 as f64;
_26 = _33.0;
_5 = _1 ^ _33.0;
(*_31) = '\u{a9158}';
_28 = _34 * _34;
(*_31) = '\u{f0fef}';
_22 = _27;
(*RET) = _33.1 as f64;
(*_31) = '\u{b3ac6}';
(*_20) = _33.1 as u128;
(*_20) = !_35.2.0;
_48 = _19 * _19;
_36 = _28 > _34;
Goto(bb20)
}
bb45 = {
(*RET) = _55 + _86;
_34 = _33.1 as f32;
_63 = &_58;
_92 = _84 + _47;
_57.0.1 = !_72.1;
_1 = -_92;
_35.0 = core::ptr::addr_of_mut!(_83);
_78 = _1 ^ _41;
(*RET) = _62 as f64;
(*RET) = _86 - _86;
(*RET) = -_55;
_25 = _52 as i128;
_92 = _1 * _78;
_38 = !_92;
_92 = _33.0 >> (*_53);
_89 = &_13.0;
_72.3 = !_9;
(*RET) = _86 + _86;
_4 = !_67;
_61 = 1211677082_u32 as u8;
match _72.1 {
40397 => bb47,
_ => bb46
}
}
bb46 = {
_9 = _8;
(*_20) = 3376062538644830631309182999969933013_u128;
(*_20) = 12706042944520105444641498672149571392_u128;
(*_20) = _9 as u128;
_1 = !_5;
_19 = 16602296661188576126_u64 as i16;
(*RET) = _23 as f64;
(*RET) = _13.0 as f64;
_15 = _22 as i128;
_18 = _13.0 as i8;
(*_20) = _13.0 as u128;
(*RET) = _9 as f64;
(*RET) = 6_usize as f64;
_26 = -_5;
(*_2) = '\u{233e2}';
(*RET) = 228_u8 as f64;
(*_2) = '\u{c2bb5}';
(*RET) = 6196903986983377457_usize as f64;
(*RET) = (-6024053854567977245_i64) as f64;
Goto(bb17)
}
bb47 = {
_36 = _67;
(*_53) = _35.2.0 + _35.2.0;
_61 = _8 as u8;
_96 = (*RET) + (*RET);
_33.0 = -_78;
_11 = _36 | _4;
_75 = core::ptr::addr_of!(_96);
_35.1 = _56 * (*_63);
_19 = Field::<u128>(Variant(_16, 0), 0) as i16;
_44 = [_52,_52,_52];
(*_75) = 1262474596_u32 as f64;
Goto(bb48)
}
bb48 = {
_39 = core::ptr::addr_of_mut!(_63);
(*_39) = &_35.1;
_24 = ['\u{7770}','\u{404f3}','\u{6acc5}','\u{9da34}','\u{bb906}','\u{1b7b5}','\u{2cafd}','\u{e69a3}'];
_98 = Move(RET);
_44 = [_52,_52,_52];
(*_39) = &_32;
(*_53) = _35.2.0 - _35.2.0;
_48 = _19;
(*_39) = &_58;
_32 = (*_63) * (*_63);
_19 = -_48;
(*_39) = &_32;
(*_53) = _35.2.0 - _35.2.0;
(*_53) = _35.2.0;
_24 = ['\u{62bee}','\u{5cb0a}','\u{502dc}','\u{d4d1c}','\u{12ab7}','\u{af25b}','\u{d39e6}','\u{d995c}'];
_41 = _78 * _1;
(*_75) = _18 as f64;
_99 = _45;
(*_39) = &_25;
_26 = _33.0 & _33.0;
(*_75) = _86 + _17;
_52 = 7434071191802741697_u64 * 2391439969478737660_u64;
_54 = _34 - _34;
match _72.1 {
0 => bb49,
1 => bb50,
2 => bb51,
40397 => bb53,
_ => bb52
}
}
bb49 = {
Return()
}
bb50 = {
_33.2 = -(-4241055954968993438_i64);
(*RET) = 14350_u16 as f64;
_44 = [_52,_52,_52];
_35.0 = Move(_49);
_49 = Move(_35.0);
_10 = [_33.0,_33.0,_41,_5,_5];
_35.0 = Move(_49);
_13.0 = !735636238_i32;
(*RET) = _26 as f64;
(*RET) = _48 as f64;
_11 = !_4;
_57.0.2 = _50.1;
(*RET) = _57.0.3 as f64;
_35.2 = (Field::<u128>(Variant(_16, 0), 0),);
_32 = -_56;
_40.1 = _57.0.2;
_33.0 = _26;
_9 = -_8;
(*RET) = 8949_u16 as f64;
(*RET) = _33.0 as f64;
(*RET) = 1_usize as f64;
_33 = (_5, 65_u8, 1833821959268386557_i64);
(*RET) = _19 as f64;
(*RET) = _33.2 as f64;
Goto(bb23)
}
bb51 = {
Return()
}
bb52 = {
(*RET) = _33.2 as f64;
Goto(bb25)
}
bb53 = {
(*_75) = _57.0.1 as f64;
RET = core::ptr::addr_of!(_17);
RET = core::ptr::addr_of!((*_75));
_72.2 = [(*_63),(*_63),_35.1,_15];
(*_39) = &_35.1;
_48 = _23 - _19;
(*_75) = _17 * _86;
_72.3 = (*_53) as i8;
_10 = [_26,_1,_84,_38,_41];
_102 = -(*_63);
(*_39) = &_102;
_85 = core::ptr::addr_of!(_100);
_56 = 2900533251_u32 as i128;
_13.0 = _64 + _64;
_73 = _11 | _4;
Goto(bb54)
}
bb54 = {
Call(_106 = dump_var(Move(_58), Move(_67), Move(_78), Move(_64)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_106 = dump_var(Move(_38), Move(_36), Move(_51), Move(_18)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_106 = dump_var(Move(_62), Move(_41), Move(_44), Move(_77)), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Call(_106 = dump_var(Move(_66), Move(_99), Move(_61), Move(_24)), ReturnTo(bb58), UnwindUnreachable())
}
bb58 = {
Call(_106 = dump_var(Move(_5), Move(_48), Move(_42), Move(_19)), ReturnTo(bb59), UnwindUnreachable())
}
bb59 = {
Call(_106 = dump_var(Move(_15), Move(_56), Move(_32), _107), ReturnTo(bb60), UnwindUnreachable())
}
bb60 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn5(mut _1: i8,mut _2: bool,mut _3: isize,mut _4: isize,mut _5: i8,mut _6: isize,mut _7: isize,mut _8: bool,mut _9: isize,mut _10: bool,mut _11: isize,mut _12: i8) -> char {
mir! {
type RET = char;
let _13: *mut &'static i128;
let _14: char;
let _15: *mut u16;
let _16: *mut ([isize; 6], (isize, u8, i64));
let _17: *const Adt17;
let _18: i128;
let _19: u32;
let _20: u32;
let _21: isize;
let _22: &'static i32;
let _23: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _24: *const u32;
let _25: bool;
let _26: u64;
let _27: i32;
let _28: *const u32;
let _29: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _30: [isize; 5];
let _31: Adt79;
let _32: f64;
let _33: bool;
let _34: *const u32;
let _35: u128;
let _36: *mut u16;
let _37: u8;
let _38: bool;
let _39: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _40: i32;
let _41: [u64; 4];
let _42: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _43: f64;
let _44: isize;
let _45: isize;
let _46: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _47: *const *const u32;
let _48: (i32,);
let _49: isize;
let _50: &'static i32;
let _51: [i8; 5];
let _52: usize;
let _53: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _54: i8;
let _55: ([isize; 6], (isize, u8, i64));
let _56: f64;
let _57: i16;
let _58: &'static i32;
let _59: [i128; 4];
let _60: (u16, (*const Adt17, [isize; 6], [u64; 3], i128), ([i8; 3], [i8; 3], (u128,), i128), f32);
let _61: f32;
let _62: i32;
let _63: Adt61;
let _64: f64;
let _65: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _66: (Adt21,);
let _67: *mut u16;
let _68: [u128; 2];
let _69: f32;
let _70: (&'static i32, i32);
let _71: isize;
let _72: u128;
let _73: u32;
let _74: bool;
let _75: *mut &'static i128;
let _76: isize;
let _77: u16;
let _78: isize;
let _79: char;
let _80: i32;
let _81: i8;
let _82: usize;
let _83: *mut char;
let _84: (&'static mut usize, (*const Adt17, [isize; 6], [u64; 3], i128), u32);
let _85: f64;
let _86: f64;
let _87: isize;
let _88: i64;
let _89: [u128; 7];
let _90: ([i8; 3], [i8; 3], (u128,), i128);
let _91: char;
let _92: char;
let _93: &'static mut char;
let _94: *const f64;
let _95: [isize; 1];
let _96: u16;
let _97: &'static i128;
let _98: i128;
let _99: (char,);
let _100: f32;
let _101: u8;
let _102: f32;
let _103: bool;
let _104: u16;
let _105: *const isize;
let _106: isize;
let _107: f32;
let _108: (i32,);
let _109: [isize; 6];
let _110: ();
let _111: ();
{
_12 = _5;
_6 = 10804601491533693282_u64 as isize;
Goto(bb1)
}
bb1 = {
_8 = _10;
RET = '\u{94834}';
_5 = _1 & _12;
_3 = _6 + _9;
_2 = _10;
Call(_3 = fn6(_10, _2, _1, _7, _9, _9, _7, _6, _1, _8, _7, _9), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_2 = _4 <= _3;
_3 = (-134667408151317753625500107419737631183_i128) as isize;
_6 = _11 << _11;
_9 = _11 + _4;
_10 = !_2;
_8 = _2 & _10;
_14 = RET;
_2 = !_8;
_5 = !_1;
_10 = _2;
_1 = 105578433094883571751301482933758734222_i128 as i8;
_9 = _7 << _6;
_9 = _11 * _6;
_1 = _12;
_4 = 11492_i16 as isize;
_5 = _1 & _12;
_7 = _6 >> _9;
_14 = RET;
_12 = _1 * _1;
Goto(bb3)
}
bb3 = {
_18 = 9965242073494040486265641935655712366_i128;
_21 = _7 - _4;
_8 = !_2;
_4 = _7 >> _7;
_20 = 640542209_u32 & 3768874563_u32;
_21 = (-1672874555_i32) as isize;
Call(_12 = core::intrinsics::transmute(_8), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_11 = _7 ^ _4;
_3 = _11;
_11 = _3 - _4;
RET = _14;
_7 = _11;
_2 = !_8;
_12 = _1;
_18 = (-29121848859825002891689505653784150922_i128) >> _7;
_8 = _10;
_11 = 13202_u16 as isize;
_6 = !_7;
_4 = _6 | _7;
_19 = !_20;
Goto(bb5)
}
bb5 = {
_6 = _11 - _7;
_24 = core::ptr::addr_of!(_20);
(*_24) = !_19;
(*_24) = _19;
_8 = !_10;
(*_24) = 4013572688774240888_i64 as u32;
(*_24) = _19;
Goto(bb6)
}
bb6 = {
_24 = core::ptr::addr_of!((*_24));
(*_24) = _19;
(*_24) = !_19;
(*_24) = _19 & _19;
(*_24) = _19 & _19;
_21 = RET as isize;
(*_24) = _19 >> _4;
Goto(bb7)
}
bb7 = {
_14 = RET;
_5 = _12 << (*_24);
(*_24) = RET as u32;
(*_24) = 1_usize as u32;
(*_24) = _19 + _19;
(*_24) = _19 + _19;
(*_24) = _19;
_18 = 87603878616861359840707353476626101436_i128 >> _3;
_24 = core::ptr::addr_of!((*_24));
_14 = RET;
_21 = _6 << (*_24);
(*_24) = _19 + _19;
(*_24) = !_19;
_11 = _4 | _6;
_19 = (-3429085145315968595_i64) as u32;
(*_24) = !_19;
_24 = core::ptr::addr_of!((*_24));
_26 = 15736087042379504011_u64 + 17727053658934571211_u64;
_24 = core::ptr::addr_of!((*_24));
(*_24) = _19 - _19;
(*_24) = _19 ^ _19;
(*_24) = _19;
(*_24) = !_19;
(*_24) = _19 * _19;
(*_24) = _19 >> _5;
(*_24) = _19 | _19;
(*_24) = _19 & _19;
Goto(bb8)
}
bb8 = {
(*_24) = !_19;
_9 = _4;
(*_24) = _19 - _19;
(*_24) = !_19;
(*_24) = _5 as u32;
_9 = -_21;
_11 = _4;
_14 = RET;
_28 = core::ptr::addr_of!((*_24));
(*_28) = _19;
_10 = _8;
(*_24) = RET as u32;
(*_24) = _19 ^ _19;
_31 = Adt79::Variant0 { fld0: 201235976092148908984747665831714131984_u128 };
_25 = _11 <= _6;
_25 = _8 | _8;
_21 = _4 >> _20;
_12 = !_5;
Call((*_24) = fn8(Move(_24), _11, _4, _25, Move(_28), _8, _8, _7, _18), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_30 = [_7,_7,_6,_6,_7];
_27 = 1202913415_i32;
RET = _14;
_22 = &_27;
_4 = _14 as isize;
_31 = Adt79::Variant0 { fld0: 335098256779182558319611031158467239688_u128 };
_1 = _5 << _20;
_10 = _25;
_11 = -_21;
_11 = _6 - _9;
_32 = 5402_u16 as f64;
_20 = _19;
_19 = _20 >> _9;
_4 = _21 - _21;
_7 = _32 as isize;
_2 = !_10;
_34 = core::ptr::addr_of!(_19);
place!(Field::<u128>(Variant(_31, 0), 0)) = 205998532008733341655203225279825051324_u128 + 128181080702270154736329890005053567915_u128;
_28 = core::ptr::addr_of!((*_34));
(*_28) = _20;
_6 = (-5821704514134872111_i64) as isize;
_6 = _21 | _21;
(*_34) = _26 as u32;
_3 = _6;
match (*_22) {
1202913415 => bb11,
_ => bb10
}
}
bb10 = {
(*_24) = !_19;
_9 = _4;
(*_24) = _19 - _19;
(*_24) = !_19;
(*_24) = _5 as u32;
_9 = -_21;
_11 = _4;
_14 = RET;
_28 = core::ptr::addr_of!((*_24));
(*_28) = _19;
_10 = _8;
(*_24) = RET as u32;
(*_24) = _19 ^ _19;
_31 = Adt79::Variant0 { fld0: 201235976092148908984747665831714131984_u128 };
_25 = _11 <= _6;
_25 = _8 | _8;
_21 = _4 >> _20;
_12 = !_5;
Call((*_24) = fn8(Move(_24), _11, _4, _25, Move(_28), _8, _8, _7, _18), ReturnTo(bb9), UnwindUnreachable())
}
bb11 = {
_1 = _5 ^ _5;
_25 = !_2;
(*_34) = _20 - _20;
(*_34) = _20;
_33 = _8 ^ _25;
_1 = _5 | _12;
_20 = (*_34) ^ (*_34);
(*_34) = _26 as u32;
_24 = core::ptr::addr_of!((*_34));
_31 = Adt79::Variant0 { fld0: 193626389505217758086782892662017958773_u128 };
(*_34) = _26 as u32;
_26 = 16251343566180928891_u64 - 11300377973246627467_u64;
_35 = 4502_i16 as u128;
(*_34) = !_20;
_44 = _21 * _11;
(*_34) = !_20;
_5 = _8 as i8;
_3 = _9 >> _12;
Call(_40 = core::intrinsics::bswap((*_22)), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
(*_34) = _20 - _20;
(*_34) = _14 as u32;
_24 = core::ptr::addr_of!((*_34));
(*_34) = _20 ^ _20;
_43 = _32 + _32;
_2 = _33 & _10;
_45 = -_11;
_4 = _44 | _45;
_40 = 2_usize as i32;
_37 = (-255267986202744591_i64) as u8;
_25 = _2;
Call((*_34) = fn9(Move(_24), Move(_34)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
_41 = [_26,_26,_26,_26];
_2 = _10;
_7 = _11 + _3;
_38 = _25 ^ _10;
_40 = (*_22);
_1 = _12;
_48.0 = -(*_22);
_5 = _1 * _12;
Goto(bb14)
}
bb14 = {
_50 = &(*_22);
_11 = _21 + _44;
_41 = [_26,_26,_26,_26];
_12 = _1 ^ _5;
_47 = core::ptr::addr_of!(_24);
match (*_50) {
0 => bb1,
1 => bb2,
2 => bb13,
3 => bb4,
4 => bb9,
5 => bb6,
1202913415 => bb16,
_ => bb15
}
}
bb15 = {
_11 = _7 ^ _4;
_3 = _11;
_11 = _3 - _4;
RET = _14;
_7 = _11;
_2 = !_8;
_12 = _1;
_18 = (-29121848859825002891689505653784150922_i128) >> _7;
_8 = _10;
_11 = 13202_u16 as isize;
_6 = !_7;
_4 = _6 | _7;
_19 = !_20;
Goto(bb5)
}
bb16 = {
_28 = core::ptr::addr_of!(_19);
(*_47) = core::ptr::addr_of!((*_28));
(*_24) = !_20;
(*_24) = _20;
(*_28) = _20;
(*_28) = _20 & _20;
_3 = _6 + _21;
place!(Field::<u128>(Variant(_31, 0), 0)) = _35 ^ _35;
_34 = core::ptr::addr_of!((*_28));
_47 = core::ptr::addr_of!((*_47));
_34 = core::ptr::addr_of!((*_34));
place!(Field::<u128>(Variant(_31, 0), 0)) = _44 as u128;
_30 = [_6,_44,_6,_45,_4];
(*_47) = Move(_28);
_49 = _6;
_51 = [_12,_5,_5,_1,_12];
match (*_50) {
0 => bb7,
1 => bb8,
2 => bb11,
3 => bb4,
1202913415 => bb18,
_ => bb17
}
}
bb17 = {
_14 = RET;
_5 = _12 << (*_24);
(*_24) = RET as u32;
(*_24) = 1_usize as u32;
(*_24) = _19 + _19;
(*_24) = _19 + _19;
(*_24) = _19;
_18 = 87603878616861359840707353476626101436_i128 >> _3;
_24 = core::ptr::addr_of!((*_24));
_14 = RET;
_21 = _6 << (*_24);
(*_24) = _19 + _19;
(*_24) = !_19;
_11 = _4 | _6;
_19 = (-3429085145315968595_i64) as u32;
(*_24) = !_19;
_24 = core::ptr::addr_of!((*_24));
_26 = 15736087042379504011_u64 + 17727053658934571211_u64;
_24 = core::ptr::addr_of!((*_24));
(*_24) = _19 - _19;
(*_24) = _19 ^ _19;
(*_24) = _19;
(*_24) = !_19;
(*_24) = _19 * _19;
(*_24) = _19 >> _5;
(*_24) = _19 | _19;
(*_24) = _19 & _19;
Goto(bb8)
}
bb18 = {
_6 = _9 << _5;
(*_34) = !_20;
_2 = _3 >= _21;
_8 = _45 != _3;
(*_34) = _20 | _20;
(*_47) = core::ptr::addr_of!((*_34));
(*_24) = !_20;
(*_47) = core::ptr::addr_of!((*_24));
_48.0 = _18 as i32;
_21 = -_49;
(*_47) = core::ptr::addr_of!((*_34));
_41 = [_26,_26,_26,_26];
_43 = _32;
(*_24) = _20;
(*_47) = core::ptr::addr_of!((*_24));
_34 = core::ptr::addr_of!((*_24));
_27 = _48.0 + _48.0;
(*_24) = _20 | _20;
(*_47) = core::ptr::addr_of!((*_24));
(*_47) = Move(_34);
_34 = Move((*_47));
(*_47) = core::ptr::addr_of!(_20);
_54 = _5;
Call((*_47) = core::intrinsics::arith_offset(_34, 9223372036854775807_isize), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
_28 = Move((*_47));
_25 = _44 < _4;
_41 = [_26,_26,_26,_26];
_18 = 30061_i16 as i128;
_20 = !_19;
_16 = core::ptr::addr_of_mut!(_55);
(*_16).1 = (_45, _37, (-7023820010503911931_i64));
(*_16).1 = (_45, _37, (-806319388707523212_i64));
(*_16).0 = [_3,_3,(*_16).1.0,_55.1.0,(*_16).1.0,(*_16).1.0];
(*_16).1.0 = !_7;
(*_16).1.2 = 6458923020556028457_i64 + (-948644902689099584_i64);
(*_16).0 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,_4];
(*_16).1.2 = !(-5635567625262752339_i64);
_43 = _32;
_12 = !_1;
(*_16).0 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,_44];
_3 = RET as isize;
_37 = (*_16).1.1 & (*_16).1.1;
(*_16).1.0 = !_44;
(*_16).1.1 = _37;
_27 = _48.0 & _48.0;
(*_16).1.2 = (-2025424739797779809_i64) ^ 4397938867099103377_i64;
Goto(bb20)
}
bb20 = {
(*_16).1.2 = 7321702608608209540_i64;
(*_16).1.0 = _21 << Field::<u128>(Variant(_31, 0), 0);
(*_16).1.0 = !_7;
(*_16).1 = (_49, _37, 8649887581206982466_i64);
(*_16).1.1 = _37 << (*_16).1.2;
(*_16).1.2 = _33 as i64;
(*_16).1 = (_6, _37, 444761136644238958_i64);
(*_16).1.0 = !_21;
Goto(bb21)
}
bb21 = {
_45 = (*_16).1.0;
(*_16).1 = (_49, _37, 3671990316214030468_i64);
_39 = core::ptr::addr_of!(_60.1);
(*_39).2 = [_26,_26,_26];
(*_39).3 = _18;
(*_39).2 = [_26,_26,_26];
(*_16).1 = (_9, _37, 1792154694930098949_i64);
_56 = _43;
_60.2.2 = (Field::<u128>(Variant(_31, 0), 0),);
(*_16).1.1 = _37 + _37;
Goto(bb22)
}
bb22 = {
(*_16).1.2 = 4972546084225282641_i64;
match (*_16).1.2 {
4972546084225282641 => bb24,
_ => bb23
}
}
bb23 = {
_14 = RET;
_5 = _12 << (*_24);
(*_24) = RET as u32;
(*_24) = 1_usize as u32;
(*_24) = _19 + _19;
(*_24) = _19 + _19;
(*_24) = _19;
_18 = 87603878616861359840707353476626101436_i128 >> _3;
_24 = core::ptr::addr_of!((*_24));
_14 = RET;
_21 = _6 << (*_24);
(*_24) = _19 + _19;
(*_24) = !_19;
_11 = _4 | _6;
_19 = (-3429085145315968595_i64) as u32;
(*_24) = !_19;
_24 = core::ptr::addr_of!((*_24));
_26 = 15736087042379504011_u64 + 17727053658934571211_u64;
_24 = core::ptr::addr_of!((*_24));
(*_24) = _19 - _19;
(*_24) = _19 ^ _19;
(*_24) = _19;
(*_24) = !_19;
(*_24) = _19 * _19;
(*_24) = _19 >> _5;
(*_24) = _19 | _19;
(*_24) = _19 & _19;
Goto(bb8)
}
bb24 = {
_21 = _60.2.2.0 as isize;
(*_16).0 = [(*_16).1.0,_21,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0];
_49 = _19 as isize;
(*_39).2 = [_26,_26,_26];
(*_16).1 = (_9, _37, 4772552622665902136_i64);
(*_16).1.0 = _54 as isize;
(*_16).1.1 = _37 >> (*_16).1.0;
(*_39).1 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,_21,_45,(*_16).1.0];
(*_16).0 = (*_39).1;
(*_39).3 = _18 * _18;
_61 = (*_16).1.1 as f32;
Goto(bb25)
}
bb25 = {
(*_16).1 = (_4, _37, (-8506677094043047067_i64));
(*_16).1 = (_7, _37, 9172959473388666198_i64);
(*_39).1 = [(*_16).1.0,_9,(*_16).1.0,_44,(*_16).1.0,(*_16).1.0];
(*_16).0 = (*_39).1;
_63.fld2 = Move(_39);
(*_16).1.0 = _44;
(*_16).1.1 = _37;
_56 = _43;
(*_16).1.1 = !_37;
_63.fld0 = [_26,_26,_26];
_47 = core::ptr::addr_of!(_24);
(*_16).1.0 = _7 * _45;
(*_16).0 = [(*_16).1.0,_9,_6,(*_16).1.0,(*_16).1.0,(*_16).1.0];
(*_16).1.0 = _4 * _6;
(*_16).1.0 = -_4;
(*_16).1 = (_21, _37, 8957761901207030451_i64);
(*_16).1 = (_4, _37, 1545293912413953203_i64);
_30 = [(*_16).1.0,_4,(*_16).1.0,(*_16).1.0,(*_16).1.0];
(*_16).1.0 = _45;
(*_16).1.0 = _45;
_56 = _43 * _32;
Call(_32 = core::intrinsics::transmute((*_16).1.0), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
_2 = _10 | _33;
(*_16).0 = [(*_16).1.0,_11,(*_16).1.0,_45,(*_16).1.0,(*_16).1.0];
(*_16).1.0 = _45 << (*_16).1.2;
(*_16).1 = (_11, _37, 2109505159235661199_i64);
_63.fld1 = (_14,);
_15 = core::ptr::addr_of_mut!(_60.0);
_60.2.1 = [_12,_5,_54];
(*_16).1.2 = _60.1.3 as i64;
(*_16).1 = (_6, _37, 7562443157153603491_i64);
(*_16).1.0 = _7 >> (*_16).1.2;
(*_16).0 = _60.1.1;
(*_16).0 = _60.1.1;
_35 = !_60.2.2.0;
(*_16).1.0 = _44;
(*_16).1 = (_9, _37, 5901681392195793551_i64);
_60.2.3 = _60.1.3 - _18;
_47 = core::ptr::addr_of!((*_47));
match (*_16).1.2 {
0 => bb1,
1 => bb13,
2 => bb3,
3 => bb4,
4 => bb11,
5 => bb8,
5901681392195793551 => bb27,
_ => bb25
}
}
bb27 = {
(*_15) = !32583_u16;
_10 = _33 ^ _25;
(*_16).1.1 = _37 + _37;
(*_16).1.2 = !6985444655134713698_i64;
_69 = _61 - _61;
match _40 {
0 => bb14,
1 => bb17,
2 => bb28,
3 => bb29,
1202913415 => bb31,
_ => bb30
}
}
bb28 = {
_2 = _4 <= _3;
_3 = (-134667408151317753625500107419737631183_i128) as isize;
_6 = _11 << _11;
_9 = _11 + _4;
_10 = !_2;
_8 = _2 & _10;
_14 = RET;
_2 = !_8;
_5 = !_1;
_10 = _2;
_1 = 105578433094883571751301482933758734222_i128 as i8;
_9 = _7 << _6;
_9 = _11 * _6;
_1 = _12;
_4 = 11492_i16 as isize;
_5 = _1 & _12;
_7 = _6 >> _9;
_14 = RET;
_12 = _1 * _1;
Goto(bb3)
}
bb29 = {
_28 = core::ptr::addr_of!(_19);
(*_47) = core::ptr::addr_of!((*_28));
(*_24) = !_20;
(*_24) = _20;
(*_28) = _20;
(*_28) = _20 & _20;
_3 = _6 + _21;
place!(Field::<u128>(Variant(_31, 0), 0)) = _35 ^ _35;
_34 = core::ptr::addr_of!((*_28));
_47 = core::ptr::addr_of!((*_47));
_34 = core::ptr::addr_of!((*_34));
place!(Field::<u128>(Variant(_31, 0), 0)) = _44 as u128;
_30 = [_6,_44,_6,_45,_4];
(*_47) = Move(_28);
_49 = _6;
_51 = [_12,_5,_5,_1,_12];
match (*_50) {
0 => bb7,
1 => bb8,
2 => bb11,
3 => bb4,
1202913415 => bb18,
_ => bb17
}
}
bb30 = {
_14 = RET;
_5 = _12 << (*_24);
(*_24) = RET as u32;
(*_24) = 1_usize as u32;
(*_24) = _19 + _19;
(*_24) = _19 + _19;
(*_24) = _19;
_18 = 87603878616861359840707353476626101436_i128 >> _3;
_24 = core::ptr::addr_of!((*_24));
_14 = RET;
_21 = _6 << (*_24);
(*_24) = _19 + _19;
(*_24) = !_19;
_11 = _4 | _6;
_19 = (-3429085145315968595_i64) as u32;
(*_24) = !_19;
_24 = core::ptr::addr_of!((*_24));
_26 = 15736087042379504011_u64 + 17727053658934571211_u64;
_24 = core::ptr::addr_of!((*_24));
(*_24) = _19 - _19;
(*_24) = _19 ^ _19;
(*_24) = _19;
(*_24) = !_19;
(*_24) = _19 * _19;
(*_24) = _19 >> _5;
(*_24) = _19 | _19;
(*_24) = _19 & _19;
Goto(bb8)
}
bb31 = {
_57 = 20874_i16;
_69 = -_61;
(*_16).1.0 = _4 >> _7;
_57 = 2362_i16;
_60.2.2 = (_35,);
(*_16).1 = (_9, _37, 5436034808245442756_i64);
(*_16).1.0 = _9 ^ _6;
_38 = !_25;
_71 = _27 as isize;
(*_16).0 = _60.1.1;
Goto(bb32)
}
bb32 = {
(*_16).0 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,_21,(*_16).1.0];
_62 = -_27;
_60.1.3 = _26 as i128;
(*_16).0 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,_45];
_59 = [_60.1.3,_60.2.3,_60.2.3,_18];
(*_16).1.1 = _37 * _37;
(*_16).1 = (_44, _37, (-4061996211659841077_i64));
_54 = _5;
(*_16).1.2 = (-5715783245756420908_i64) << (*_16).1.0;
_60.2.0 = [_54,_54,_54];
_73 = _20;
(*_15) = !57250_u16;
(*_15) = _32 as u16;
_70 = (Move(_22), _27);
_59 = [_60.2.3,_60.2.3,_60.1.3,_60.1.3];
(*_16).1.2 = (-3125519027741629942_i64);
_62 = !_27;
(*_15) = (*_16).1.1 as u16;
(*_16).1 = (_44, _37, (-1039871092596504406_i64));
_60.1.2 = _63.fld0;
_60.1.1 = [_45,(*_16).1.0,(*_16).1.0,(*_16).1.0,_21,(*_16).1.0];
_5 = -_54;
_44 = !(*_16).1.0;
(*_15) = 50060_u16 + 42959_u16;
Goto(bb33)
}
bb33 = {
_36 = core::ptr::addr_of_mut!((*_15));
(*_16).1.1 = _54 as u8;
_34 = core::ptr::addr_of!(_73);
_39 = Move(_63.fld2);
(*_34) = _19 ^ _19;
_77 = (*_15) - (*_36);
(*_16).1.1 = _37 - _37;
(*_16).0 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,_4,(*_16).1.0,(*_16).1.0];
_58 = &_70.1;
_63.fld2 = core::ptr::addr_of!(_60.1);
(*_36) = !_77;
(*_16).1 = (_21, _37, (-8565091333236876678_i64));
_10 = !_33;
_64 = _32 * _32;
_18 = _60.2.3;
(*_16).1.2 = 5934166416910038751_i64;
(*_16).1.2 = (-6854363474581908167_i64) | (-137499465980568700_i64);
(*_16).1.0 = _7 + _4;
_19 = !(*_34);
match _57 {
0 => bb17,
1 => bb34,
2362 => bb36,
_ => bb35
}
}
bb34 = {
(*_16).1 = (_4, _37, (-8506677094043047067_i64));
(*_16).1 = (_7, _37, 9172959473388666198_i64);
(*_39).1 = [(*_16).1.0,_9,(*_16).1.0,_44,(*_16).1.0,(*_16).1.0];
(*_16).0 = (*_39).1;
_63.fld2 = Move(_39);
(*_16).1.0 = _44;
(*_16).1.1 = _37;
_56 = _43;
(*_16).1.1 = !_37;
_63.fld0 = [_26,_26,_26];
_47 = core::ptr::addr_of!(_24);
(*_16).1.0 = _7 * _45;
(*_16).0 = [(*_16).1.0,_9,_6,(*_16).1.0,(*_16).1.0,(*_16).1.0];
(*_16).1.0 = _4 * _6;
(*_16).1.0 = -_4;
(*_16).1 = (_21, _37, 8957761901207030451_i64);
(*_16).1 = (_4, _37, 1545293912413953203_i64);
_30 = [(*_16).1.0,_4,(*_16).1.0,(*_16).1.0,(*_16).1.0];
(*_16).1.0 = _45;
(*_16).1.0 = _45;
_56 = _43 * _32;
Call(_32 = core::intrinsics::transmute((*_16).1.0), ReturnTo(bb26), UnwindUnreachable())
}
bb35 = {
_2 = _10 | _33;
(*_16).0 = [(*_16).1.0,_11,(*_16).1.0,_45,(*_16).1.0,(*_16).1.0];
(*_16).1.0 = _45 << (*_16).1.2;
(*_16).1 = (_11, _37, 2109505159235661199_i64);
_63.fld1 = (_14,);
_15 = core::ptr::addr_of_mut!(_60.0);
_60.2.1 = [_12,_5,_54];
(*_16).1.2 = _60.1.3 as i64;
(*_16).1 = (_6, _37, 7562443157153603491_i64);
(*_16).1.0 = _7 >> (*_16).1.2;
(*_16).0 = _60.1.1;
(*_16).0 = _60.1.1;
_35 = !_60.2.2.0;
(*_16).1.0 = _44;
(*_16).1 = (_9, _37, 5901681392195793551_i64);
_60.2.3 = _60.1.3 - _18;
_47 = core::ptr::addr_of!((*_47));
match (*_16).1.2 {
0 => bb1,
1 => bb13,
2 => bb3,
3 => bb4,
4 => bb11,
5 => bb8,
5901681392195793551 => bb27,
_ => bb25
}
}
bb36 = {
(*_16).1 = (_21, _37, (-1831272338602278112_i64));
(*_16).1.1 = _38 as u8;
(*_16).1 = (_4, _37, (-3273214403201684603_i64));
_81 = (*_58) as i8;
_60.1.2 = _63.fld0;
_55.1.0 = _71 >> (*_16).1.2;
_80 = 6_usize as i32;
(*_16).1.1 = !_37;
_58 = &_62;
_60.0 = _77 ^ _77;
_34 = Move(_28);
(*_16).1.0 = _4 * _4;
(*_16).1.1 = _37;
_1 = _5 ^ _12;
(*_16).1.0 = _71;
(*_16).1.2 = (*_16).1.1 as i64;
_54 = -_12;
(*_16).1.0 = _11 << _11;
_48 = ((*_58),);
(*_16).1.0 = _21 >> _1;
_30 = [_21,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0];
match _57 {
0 => bb7,
1 => bb3,
2362 => bb38,
_ => bb37
}
}
bb37 = {
_50 = &(*_22);
_11 = _21 + _44;
_41 = [_26,_26,_26,_26];
_12 = _1 ^ _5;
_47 = core::ptr::addr_of!(_24);
match (*_50) {
0 => bb1,
1 => bb2,
2 => bb13,
3 => bb4,
4 => bb9,
5 => bb6,
1202913415 => bb16,
_ => bb15
}
}
bb38 = {
_26 = 3496890730305244112_u64 ^ 1641541765037352369_u64;
(*_36) = _8 as u16;
_71 = !(*_16).1.0;
_63.fld2 = core::ptr::addr_of!(_60.1);
(*_15) = !_77;
(*_16).1.0 = _71;
_81 = _12 ^ _5;
_63.fld1 = (RET,);
(*_16).0 = _60.1.1;
_45 = -(*_16).1.0;
RET = _63.fld1.0;
(*_16).1.1 = _5 as u8;
_40 = _32 as i32;
_22 = Move(_58);
_55.0 = _60.1.1;
_90.2.0 = _60.2.2.0;
_84.1.3 = _60.1.3 & _60.2.3;
(*_16).0 = [_7,(*_16).1.0,(*_16).1.0,_44,(*_16).1.0,_4];
(*_15) = 10800922194367303810_usize as u16;
_79 = _14;
_30 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,_11];
_79 = RET;
_90.0 = [_54,_54,_1];
(*_16).1.0 = -_49;
_84.1.2 = [_26,_26,_26];
_90.1 = _90.0;
_82 = _57 as usize;
Goto(bb39)
}
bb39 = {
(*_15) = !_77;
_60.3 = _69;
(*_16).1.2 = Field::<u128>(Variant(_31, 0), 0) as i64;
_39 = Move(_63.fld2);
_66.0 = Adt21::Variant0 { fld0: _57,fld1: (*_16).0,fld2: _26 };
_85 = _64;
_84.1.1 = [_44,_45,(*_16).1.0,_21,_71,_21];
(*_16).1.2 = !(-5115907887575878931_i64);
(*_16).0 = [_21,_4,_9,_9,_71,_71];
(*_16).1.0 = _4 + _44;
(*_16).1 = (_71, _37, 7874545173810286798_i64);
_88 = (*_16).1.2 & (*_16).1.2;
_72 = _60.2.2.0;
_71 = _26 as isize;
_35 = _19 as u128;
_58 = &_62;
(*_16).0 = [(*_16).1.0,_55.1.0,(*_16).1.0,_6,(*_16).1.0,(*_16).1.0];
(*_16).0 = _60.1.1;
_63.fld2 = core::ptr::addr_of!(_84.1);
(*_15) = _63.fld1.0 as u16;
(*_15) = _77;
_60.1.3 = _2 as i128;
(*_16).0 = [_45,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0];
_76 = _21 + _44;
_71 = _11 >> (*_16).1.0;
(*_16).0 = [_4,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0];
_95 = [(*_16).1.0];
match (*_16).1.2 {
0 => bb26,
1 => bb29,
2 => bb40,
7874545173810286798 => bb42,
_ => bb41
}
}
bb40 = {
_2 = _4 <= _3;
_3 = (-134667408151317753625500107419737631183_i128) as isize;
_6 = _11 << _11;
_9 = _11 + _4;
_10 = !_2;
_8 = _2 & _10;
_14 = RET;
_2 = !_8;
_5 = !_1;
_10 = _2;
_1 = 105578433094883571751301482933758734222_i128 as i8;
_9 = _7 << _6;
_9 = _11 * _6;
_1 = _12;
_4 = 11492_i16 as isize;
_5 = _1 & _12;
_7 = _6 >> _9;
_14 = RET;
_12 = _1 * _1;
Goto(bb3)
}
bb41 = {
(*_16).1 = (_21, _37, (-1831272338602278112_i64));
(*_16).1.1 = _38 as u8;
(*_16).1 = (_4, _37, (-3273214403201684603_i64));
_81 = (*_58) as i8;
_60.1.2 = _63.fld0;
_55.1.0 = _71 >> (*_16).1.2;
_80 = 6_usize as i32;
(*_16).1.1 = !_37;
_58 = &_62;
_60.0 = _77 ^ _77;
_34 = Move(_28);
(*_16).1.0 = _4 * _4;
(*_16).1.1 = _37;
_1 = _5 ^ _12;
(*_16).1.0 = _71;
(*_16).1.2 = (*_16).1.1 as i64;
_54 = -_12;
(*_16).1.0 = _11 << _11;
_48 = ((*_58),);
(*_16).1.0 = _21 >> _1;
_30 = [_21,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0];
match _57 {
0 => bb7,
1 => bb3,
2362 => bb38,
_ => bb37
}
}
bb42 = {
_84.2 = _19;
_84.2 = !_19;
(*_16).0 = _60.1.1;
_14 = _63.fld1.0;
(*_16).0 = [_7,(*_16).1.0,(*_16).1.0,(*_16).1.0,_45,(*_16).1.0];
_41 = [_26,Field::<u64>(Variant(_66.0, 0), 2),Field::<u64>(Variant(_66.0, 0), 2),Field::<u64>(Variant(_66.0, 0), 2)];
(*_16).1.1 = !_37;
_91 = _79;
(*_16).1.1 = !_37;
_37 = (*_16).1.0 as u8;
_86 = _32;
(*_16).0 = [(*_16).1.0,(*_16).1.0,_45,_44,(*_16).1.0,_45];
(*_16).1.0 = _11;
(*_16).1.0 = _11 << (*_16).1.2;
_82 = 3_usize ^ 16665785275081731987_usize;
_60.0 = _64 as u16;
(*_16).1.0 = _6;
_59 = [_60.1.3,_60.2.3,_18,_60.1.3];
RET = _91;
match (*_16).1.2 {
0 => bb6,
1 => bb18,
2 => bb43,
3 => bb44,
4 => bb45,
7874545173810286798 => bb47,
_ => bb46
}
}
bb43 = {
_28 = core::ptr::addr_of!(_19);
(*_47) = core::ptr::addr_of!((*_28));
(*_24) = !_20;
(*_24) = _20;
(*_28) = _20;
(*_28) = _20 & _20;
_3 = _6 + _21;
place!(Field::<u128>(Variant(_31, 0), 0)) = _35 ^ _35;
_34 = core::ptr::addr_of!((*_28));
_47 = core::ptr::addr_of!((*_47));
_34 = core::ptr::addr_of!((*_34));
place!(Field::<u128>(Variant(_31, 0), 0)) = _44 as u128;
_30 = [_6,_44,_6,_45,_4];
(*_47) = Move(_28);
_49 = _6;
_51 = [_12,_5,_5,_1,_12];
match (*_50) {
0 => bb7,
1 => bb8,
2 => bb11,
3 => bb4,
1202913415 => bb18,
_ => bb17
}
}
bb44 = {
_24 = core::ptr::addr_of!((*_24));
(*_24) = _19;
(*_24) = !_19;
(*_24) = _19 & _19;
(*_24) = _19 & _19;
_21 = RET as isize;
(*_24) = _19 >> _4;
Goto(bb7)
}
bb45 = {
_50 = &(*_22);
_11 = _21 + _44;
_41 = [_26,_26,_26,_26];
_12 = _1 ^ _5;
_47 = core::ptr::addr_of!(_24);
match (*_50) {
0 => bb1,
1 => bb2,
2 => bb13,
3 => bb4,
4 => bb9,
5 => bb6,
1202913415 => bb16,
_ => bb15
}
}
bb46 = {
(*_24) = !_19;
_9 = _4;
(*_24) = _19 - _19;
(*_24) = !_19;
(*_24) = _5 as u32;
_9 = -_21;
_11 = _4;
_14 = RET;
_28 = core::ptr::addr_of!((*_24));
(*_28) = _19;
_10 = _8;
(*_24) = RET as u32;
(*_24) = _19 ^ _19;
_31 = Adt79::Variant0 { fld0: 201235976092148908984747665831714131984_u128 };
_25 = _11 <= _6;
_25 = _8 | _8;
_21 = _4 >> _20;
_12 = !_5;
Call((*_24) = fn8(Move(_24), _11, _4, _25, Move(_28), _8, _8, _7, _18), ReturnTo(bb9), UnwindUnreachable())
}
bb47 = {
(*_16).1.0 = _6;
_82 = 4_usize >> (*_15);
(*_16).1.1 = !_37;
(*_16).1.0 = _2 as isize;
_63.fld1 = (_14,);
_38 = _2;
_35 = (*_16).1.1 as u128;
_63.fld2 = core::ptr::addr_of!(_84.1);
_63.fld1.0 = _91;
_27 = (*_58);
(*_16).0 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,_76,(*_16).1.0,(*_16).1.0];
(*_16).1.2 = _88;
_96 = _32 as u16;
(*_15) = (*_16).1.2 as u16;
(*_16).1.0 = _26 as isize;
(*_16).1.2 = _88 | _88;
_84.1.1 = (*_16).0;
_55.0 = _84.1.1;
(*_16).1.1 = _26 as u8;
(*_16).1.2 = _88 >> (*_58);
_55.1 = (_6, _37, _88);
(*_15) = _6 as u16;
(*_16).1.1 = _37 & _37;
_94 = core::ptr::addr_of!(_32);
_71 = _60.2.2.0 as isize;
Goto(bb48)
}
bb48 = {
(*_16).0 = [(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0,(*_16).1.0];
(*_94) = _64 - _64;
place!(Field::<u64>(Variant(_66.0, 0), 2)) = !_26;
(*_16).1.1 = _37 + _37;
(*_15) = _96 - _96;
(*_16).1.0 = -_7;
(*_16).1.0 = _49;
_10 = _25 & _2;
_84.1.3 = _60.1.3 * _60.1.3;
(*_15) = _96;
(*_16).1.2 = -_88;
_84.2 = _19 - _20;
(*_16).1.2 = Field::<u64>(Variant(_66.0, 0), 2) as i64;
(*_16).1.0 = _88 as isize;
(*_16).1 = (_45, _37, _88);
_84.1.2 = [Field::<u64>(Variant(_66.0, 0), 2),_26,_26];
(*_16).1.1 = _69 as u8;
_18 = _60.1.3 - _60.1.3;
(*_15) = _96 >> (*_16).1.0;
_55.1.0 = _21 << (*_16).1.2;
_39 = core::ptr::addr_of!(_84.1);
(*_39).2 = [Field::<u64>(Variant(_66.0, 0), 2),Field::<u64>(Variant(_66.0, 0), 2),Field::<u64>(Variant(_66.0, 0), 2)];
(*_16).0 = [_44,(*_16).1.0,(*_16).1.0,(*_16).1.0,_6,_7];
(*_16).1.1 = !_37;
(*_39).1 = [(*_16).1.0,(*_16).1.0,_76,(*_16).1.0,_9,_44];
(*_39).1 = [_45,_45,_6,(*_16).1.0,(*_16).1.0,_7];
(*_16).1.0 = !_76;
_104 = (*_15);
Call((*_16).0 = core::intrinsics::transmute((*_39).1), ReturnTo(bb49), UnwindUnreachable())
}
bb49 = {
(*_94) = -_85;
(*_16).1.1 = (*_16).1.2 as u8;
(*_15) = (*_16).1.2 as u16;
_18 = (*_39).3 * (*_39).3;
(*_16).1.2 = Field::<u128>(Variant(_31, 0), 0) as i64;
_51 = [_54,_12,_54,_5,_81];
(*_94) = _85 * _64;
Goto(bb50)
}
bb50 = {
Call(_110 = dump_var(Move(_45), Move(_2), Move(_49), Move(_55)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_110 = dump_var(Move(_38), Move(_71), Move(_81), Move(_18)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_110 = dump_var(Move(_91), Move(_95), Move(_4), Move(_73)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_110 = dump_var(Move(_104), Move(_62), Move(_7), Move(_57)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_110 = dump_var(Move(_26), Move(_72), Move(_14), Move(_88)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_110 = dump_var(Move(_10), Move(_12), Move(_82), Move(_51)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_110 = dump_var(Move(_77), _111, _111, _111), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: bool,mut _2: bool,mut _3: i8,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: i8,mut _10: bool,mut _11: isize,mut _12: isize) -> isize {
mir! {
type RET = isize;
let _13: *const &'static mut usize;
let _14: *const f64;
let _15: [isize; 1];
let _16: *mut u16;
let _17: f64;
let _18: ();
let _19: ();
{
_5 = 33904842886188541454122874869801144199_i128 as isize;
_1 = _8 < _5;
_12 = (-4551503370511523157_i64) as isize;
_12 = 6516395073553108440_u64 as isize;
_9 = _3 - _3;
_9 = _3 - _3;
_10 = _2;
_9 = _3;
_12 = _6 << _9;
_8 = _6 | _5;
_8 = 1259187801_i32 as isize;
_8 = -_7;
_11 = _7;
_1 = _2;
_1 = !_2;
_4 = _12 >> _12;
_2 = _4 > _11;
Call(_11 = fn7(_7, _8, _6, _12, _12, _7, _2), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_7 = _11 - _11;
_15 = [_11];
RET = _11;
_9 = _3;
_5 = _6;
_1 = _2;
Goto(bb2)
}
bb2 = {
Call(_18 = dump_var(Move(_11), Move(_4), Move(_12), Move(_5)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Call(_18 = dump_var(Move(_15), Move(_1), _19, _19), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: isize,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: bool) -> isize {
mir! {
type RET = isize;
let _8: *const isize;
let _9: [usize; 6];
let _10: (u16, (*const Adt17, [isize; 6], [u64; 3], i128), ([i8; 3], [i8; 3], (u128,), i128), f32);
let _11: ();
let _12: ();
{
_4 = _2 << _5;
_1 = _6 & _4;
RET = -_3;
RET = -_1;
_6 = 84_u8 as isize;
_6 = 28130_i16 as isize;
_1 = 14045828279961020146_usize as isize;
_2 = _3 - _4;
RET = !_2;
_7 = RET < _4;
_5 = _4 | RET;
Goto(bb1)
}
bb1 = {
RET = (-73270209179012992529375393905360163026_i128) as isize;
_7 = true;
_7 = !true;
RET = !_5;
_2 = _5;
_1 = RET ^ _2;
_2 = _5 - _5;
_1 = RET << _2;
_7 = false;
_7 = _2 >= RET;
_1 = !_2;
_5 = RET << _1;
_6 = _2 + _2;
_6 = 22_i8 as isize;
_4 = _1 << _1;
_8 = core::ptr::addr_of!(RET);
(*_8) = _5 ^ _5;
_6 = 98_i8 as isize;
(*_8) = (-319447490775728180_i64) as isize;
(*_8) = 5189603296755703118_i64 as isize;
(*_8) = _1 + _4;
(*_8) = !_5;
(*_8) = _1 & _4;
_4 = -(*_8);
(*_8) = _5 >> _5;
Goto(bb2)
}
bb2 = {
Call(_11 = dump_var(Move(_2), Move(_5), Move(_7), _12), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: *const u32,mut _2: isize,mut _3: isize,mut _4: bool,mut _5: *const u32,mut _6: bool,mut _7: bool,mut _8: isize,mut _9: i128) -> u32 {
mir! {
type RET = u32;
let _10: i128;
let _11: *mut u32;
let _12: *mut &'static i128;
let _13: (i32,);
let _14: i16;
let _15: f64;
let _16: f64;
let _17: f64;
let _18: ((i32,), Adt20, u8);
let _19: char;
let _20: *const f64;
let _21: &'static mut char;
let _22: f64;
let _23: (*mut char, i128, (u128,));
let _24: [i128; 7];
let _25: f64;
let _26: (isize, u8, i64);
let _27: u128;
let _28: u8;
let _29: u64;
let _30: f64;
let _31: isize;
let _32: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _33: f64;
let _34: [i128; 3];
let _35: [char; 8];
let _36: &'static mut usize;
let _37: &'static mut char;
let _38: char;
let _39: *mut u16;
let _40: i32;
let _41: i128;
let _42: isize;
let _43: *mut char;
let _44: *mut u16;
let _45: Adt67;
let _46: *mut ([isize; 6], (isize, u8, i64));
let _47: i32;
let _48: ();
let _49: ();
{
_4 = !_6;
_7 = _6;
_10 = 1683544389_i32 as i128;
RET = 3634694764_u32 * 967683970_u32;
_2 = _3;
_3 = _2 & _2;
_7 = _4 | _6;
_2 = _3 | _3;
_2 = 474407724_i32 as isize;
_8 = -_3;
_5 = core::ptr::addr_of!(RET);
(*_5) = !3623590006_u32;
_6 = !_7;
(*_5) = 4206738625_u32;
_9 = _10 - _10;
(*_5) = 1168841244_u32;
(*_5) = 136969365_u32 ^ 472706234_u32;
(*_5) = (-31539_i16) as u32;
(*_5) = 2423889381_u32;
_5 = core::ptr::addr_of!((*_5));
(*_5) = 2205067795_u32 * 1683315539_u32;
(*_5) = !217241906_u32;
_8 = _3 * _3;
Goto(bb1)
}
bb1 = {
_15 = (-67_i8) as f64;
(*_5) = !1362430766_u32;
(*_5) = !4228227887_u32;
(*_5) = !3913366283_u32;
_13 = ((-678718717_i32),);
_13 = ((-1593465185_i32),);
RET = 305012389002731313125224256747578768710_u128 as u32;
(*_5) = 3914442614_u32 >> _8;
(*_5) = _6 as u32;
(*_5) = 3880458579_u32;
_16 = _15 - _15;
(*_5) = 3976768742_u32;
_14 = (-23864_i16);
(*_5) = 3549030582_u32;
_18.0.0 = -_13.0;
(*_5) = 3809779157_u32 >> _8;
(*_5) = 551529043_u32 ^ 2080852840_u32;
(*_5) = !379512120_u32;
_19 = '\u{f550f}';
Goto(bb2)
}
bb2 = {
_7 = _6 & _4;
_22 = -_16;
_20 = core::ptr::addr_of!(_15);
(*_20) = _16 - _16;
_21 = &mut _19;
_23.0 = core::ptr::addr_of_mut!((*_21));
(*_5) = !2733540417_u32;
(*_21) = '\u{edf7c}';
(*_20) = _16 * _16;
(*_5) = 2053003576_u32 + 2365299627_u32;
_11 = core::ptr::addr_of_mut!((*_5));
_8 = _3 << (*_5);
match _14 {
0 => bb1,
1 => bb3,
340282366920938463463374607431768187592 => bb5,
_ => bb4
}
}
bb3 = {
_15 = (-67_i8) as f64;
(*_5) = !1362430766_u32;
(*_5) = !4228227887_u32;
(*_5) = !3913366283_u32;
_13 = ((-678718717_i32),);
_13 = ((-1593465185_i32),);
RET = 305012389002731313125224256747578768710_u128 as u32;
(*_5) = 3914442614_u32 >> _8;
(*_5) = _6 as u32;
(*_5) = 3880458579_u32;
_16 = _15 - _15;
(*_5) = 3976768742_u32;
_14 = (-23864_i16);
(*_5) = 3549030582_u32;
_18.0.0 = -_13.0;
(*_5) = 3809779157_u32 >> _8;
(*_5) = 551529043_u32 ^ 2080852840_u32;
(*_5) = !379512120_u32;
_19 = '\u{f550f}';
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
(*_20) = _16 * _16;
(*_21) = '\u{a0e82}';
(*_21) = '\u{c43be}';
(*_5) = 1823270986_u32 - 4041790137_u32;
(*_21) = '\u{8423d}';
_15 = _16 * _22;
_8 = !_3;
(*_5) = 3741539797_u32 - 23949342_u32;
(*_5) = !2773971257_u32;
(*_5) = 4132348377_u32;
_18.0.0 = _13.0 + _13.0;
(*_21) = '\u{39b6c}';
_9 = 7_usize as i128;
(*_5) = 524931828_u32;
_24 = [_10,_9,_9,_9,_9,_10,_9];
_15 = _16 * _22;
_16 = -(*_20);
(*_21) = '\u{f1e03}';
(*_20) = _22 * _16;
_31 = -_3;
_13 = (_18.0.0,);
_26.2 = 5563394176400638341_i64 ^ 5405039057400131262_i64;
(*_21) = '\u{10f928}';
_22 = (*_20) - (*_20);
Goto(bb6)
}
bb6 = {
(*_21) = '\u{d969e}';
(*_21) = '\u{276fe}';
(*_5) = 18371417899713407361722436308313702087_u128 as u32;
(*_5) = !915012518_u32;
(*_20) = _22;
_26.0 = _3 << _8;
_1 = core::ptr::addr_of!((*_5));
_23.0 = core::ptr::addr_of_mut!((*_21));
(*_5) = 3993265603_u32;
RET = 2140764396_u32 * 1788656413_u32;
_26 = (_31, 101_u8, 5105161809359023192_i64);
_22 = -(*_20);
_8 = _26.0;
(*_20) = _22;
_25 = _26.1 as f64;
_13.0 = !_18.0.0;
match _26.1 {
0 => bb7,
1 => bb8,
2 => bb9,
101 => bb11,
_ => bb10
}
}
bb7 = {
(*_20) = _16 * _16;
(*_21) = '\u{a0e82}';
(*_21) = '\u{c43be}';
(*_5) = 1823270986_u32 - 4041790137_u32;
(*_21) = '\u{8423d}';
_15 = _16 * _22;
_8 = !_3;
(*_5) = 3741539797_u32 - 23949342_u32;
(*_5) = !2773971257_u32;
(*_5) = 4132348377_u32;
_18.0.0 = _13.0 + _13.0;
(*_21) = '\u{39b6c}';
_9 = 7_usize as i128;
(*_5) = 524931828_u32;
_24 = [_10,_9,_9,_9,_9,_10,_9];
_15 = _16 * _22;
_16 = -(*_20);
(*_21) = '\u{f1e03}';
(*_20) = _22 * _16;
_31 = -_3;
_13 = (_18.0.0,);
_26.2 = 5563394176400638341_i64 ^ 5405039057400131262_i64;
(*_21) = '\u{10f928}';
_22 = (*_20) - (*_20);
Goto(bb6)
}
bb8 = {
Return()
}
bb9 = {
_15 = (-67_i8) as f64;
(*_5) = !1362430766_u32;
(*_5) = !4228227887_u32;
(*_5) = !3913366283_u32;
_13 = ((-678718717_i32),);
_13 = ((-1593465185_i32),);
RET = 305012389002731313125224256747578768710_u128 as u32;
(*_5) = 3914442614_u32 >> _8;
(*_5) = _6 as u32;
(*_5) = 3880458579_u32;
_16 = _15 - _15;
(*_5) = 3976768742_u32;
_14 = (-23864_i16);
(*_5) = 3549030582_u32;
_18.0.0 = -_13.0;
(*_5) = 3809779157_u32 >> _8;
(*_5) = 551529043_u32 ^ 2080852840_u32;
(*_5) = !379512120_u32;
_19 = '\u{f550f}';
Goto(bb2)
}
bb10 = {
_7 = _6 & _4;
_22 = -_16;
_20 = core::ptr::addr_of!(_15);
(*_20) = _16 - _16;
_21 = &mut _19;
_23.0 = core::ptr::addr_of_mut!((*_21));
(*_5) = !2733540417_u32;
(*_21) = '\u{edf7c}';
(*_20) = _16 * _16;
(*_5) = 2053003576_u32 + 2365299627_u32;
_11 = core::ptr::addr_of_mut!((*_5));
_8 = _3 << (*_5);
match _14 {
0 => bb1,
1 => bb3,
340282366920938463463374607431768187592 => bb5,
_ => bb4
}
}
bb11 = {
(*_20) = _25 - _25;
_26.1 = 210_u8 * 95_u8;
_11 = core::ptr::addr_of_mut!((*_5));
_23.2 = (162327035703485296654921515824627422759_u128,);
(*_5) = !3745826280_u32;
(*_20) = _22;
(*_5) = 5_usize as u32;
_23.0 = core::ptr::addr_of_mut!(_38);
_30 = _18.0.0 as f64;
_24 = [_9,_10,_9,_9,_10,_9,_10];
(*_5) = !308701947_u32;
(*_21) = '\u{bc690}';
_31 = _3 >> _26.0;
(*_21) = '\u{23a55}';
(*_20) = -_25;
(*_20) = _25;
_26.2 = !3505088487991261540_i64;
(*_5) = 1287181288_u32 ^ 1224940487_u32;
(*_21) = '\u{e4a27}';
_23.2.0 = 194265826321485871507261096125589194048_u128;
(*_20) = _25 + _25;
_18.0.0 = _13.0;
_7 = _4 & _6;
Goto(bb12)
}
bb12 = {
(*_5) = 3547592155_u32 + 747652655_u32;
_18.0.0 = _4 as i32;
(*_21) = '\u{3c6cd}';
(*_5) = 15423350330140941721_u64 as u32;
(*_21) = '\u{99e6e}';
(*_20) = 36179_u16 as f64;
(*_5) = 2076330251_u32 * 3097599775_u32;
Call((*_5) = core::intrinsics::transmute((*_21)), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
(*_21) = '\u{4dc44}';
(*_5) = 3232199691_u32 + 2867286501_u32;
_13.0 = _18.0.0 | _18.0.0;
_27 = _23.2.0 << _31;
(*_5) = 2788962530_u32;
_23.2 = (_27,);
_26.0 = _3;
Goto(bb14)
}
bb14 = {
_14 = (*_21) as i16;
_29 = 10401189676332804590_u64;
_8 = _26.0;
_41 = 7514_u16 as i128;
(*_20) = _25 + _25;
(*_20) = 6111855454996772471_usize as f64;
(*_5) = 3262959635_u32 ^ 3665961646_u32;
_18.1 = Adt20::Variant0 { fld0: 61031_u16 };
_2 = _31 - _31;
_34 = [_9,_10,_41];
_18.1 = Adt20::Variant2 { fld0: _4,fld1: _14,fld2: _29 };
(*_21) = '\u{c8e6c}';
(*_20) = -_22;
_40 = _18.0.0;
(*_20) = -_25;
(*_20) = _25 - _25;
(*_20) = _16;
_43 = core::ptr::addr_of_mut!((*_21));
RET = 2054119596_u32 | 3392172968_u32;
(*_43) = '\u{88f60}';
(*_21) = '\u{a8f0c}';
_26.0 = _2;
RET = 3356849024_u32;
_42 = _31 - _3;
(*_20) = _26.0 as f64;
_8 = _31;
Goto(bb15)
}
bb15 = {
(*_5) = !3803648027_u32;
(*_20) = 47193_u16 as f64;
_25 = -(*_20);
(*_5) = 3269602320_u32 * 2710043481_u32;
_47 = _13.0;
(*_5) = 5461093_u32 >> _47;
Goto(bb16)
}
bb16 = {
Call(_48 = dump_var(Move(_47), Move(_34), Move(_7), Move(_3)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_48 = dump_var(Move(_27), Move(_8), Move(_4), Move(_10)), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Call(_48 = dump_var(Move(_41), Move(_24), _49, _49), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: *const u32,mut _2: *const u32) -> u32 {
mir! {
type RET = u32;
let _3: ((Adt21,), [i128; 4]);
let _4: [usize; 6];
let _5: bool;
let _6: f32;
let _7: *const f64;
let _8: *const *const u32;
let _9: bool;
let _10: *const &'static mut usize;
let _11: ([i8; 3], [i8; 3], (u128,), i128);
let _12: i128;
let _13: Adt79;
let _14: u16;
let _15: *const isize;
let _16: i8;
let _17: *const f64;
let _18: *mut f64;
let _19: isize;
let _20: &'static mut usize;
let _21: (&'static mut usize, (*const Adt17, [isize; 6], [u64; 3], i128), u32);
let _22: Adt53;
let _23: isize;
let _24: *mut &'static i128;
let _25: i32;
let _26: char;
let _27: *const f64;
let _28: f64;
let _29: isize;
let _30: [i8; 3];
let _31: Adt21;
let _32: f64;
let _33: *const *const u32;
let _34: &'static char;
let _35: &'static i128;
let _36: bool;
let _37: *mut u128;
let _38: *mut ([isize; 6], (isize, u8, i64));
let _39: (char,);
let _40: i128;
let _41: *const &'static mut usize;
let _42: i16;
let _43: (*mut char, i128, (u128,));
let _44: f64;
let _45: (isize,);
let _46: f32;
let _47: char;
let _48: u128;
let _49: *mut u32;
let _50: *const Adt17;
let _51: char;
let _52: i128;
let _53: isize;
let _54: bool;
let _55: &'static char;
let _56: usize;
let _57: (&'static i32, i32);
let _58: Adt20;
let _59: f32;
let _60: isize;
let _61: [isize; 1];
let _62: char;
let _63: char;
let _64: [isize; 6];
let _65: (u128,);
let _66: f32;
let _67: f64;
let _68: (*mut u32, u16, [i128; 4], i8);
let _69: *const Adt17;
let _70: &'static i32;
let _71: (*mut u32, u16, [i128; 4], i8);
let _72: u16;
let _73: i16;
let _74: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _75: isize;
let _76: f64;
let _77: Adt82;
let _78: isize;
let _79: ([isize; 6], (isize, u8, i64));
let _80: u128;
let _81: ();
let _82: ();
{
_2 = core::ptr::addr_of!(RET);
(*_2) = !1694252665_u32;
(*_2) = 1150185276_u32 & 1916891421_u32;
(*_2) = 831436131_u32;
(*_2) = 2_usize as u32;
(*_2) = 3039720366_u32 - 629420404_u32;
(*_2) = 4220812643_u32 << 301219924315218344056290027898905591679_u128;
_3.1 = [50044262332762850642766807676886376296_i128,(-4238102269293655409821211211281853539_i128),(-107873960416031913559528415424302929739_i128),78922696530982618880494926708586772974_i128];
(*_2) = 625384768_u32;
(*_2) = 11370526089840617604_usize as u32;
(*_2) = 3800470621_u32;
(*_2) = 221915154_u32 + 128207296_u32;
(*_2) = 3697970554_u32;
(*_2) = 389279764_u32;
Goto(bb1)
}
bb1 = {
_4 = [9827035864033311192_usize,15618254880047684158_usize,2_usize,7_usize,7_usize,8214153047770682847_usize];
(*_2) = 3001751277_u32 << 58387_u16;
_1 = core::ptr::addr_of!((*_2));
(*_1) = 823838667_u32 * 1541694660_u32;
(*_2) = 956670648_u32;
(*_2) = !2618941985_u32;
(*_2) = 1599764405_u32 - 433836341_u32;
(*_2) = (-8005858748154651804_i64) as u32;
(*_2) = 3132813683_u32 - 953206406_u32;
_5 = !false;
(*_2) = 928099282_u32;
(*_2) = 3113294001_u32;
(*_2) = 1914929519_u32;
(*_2) = 2594699030_u32 - 2156815434_u32;
(*_2) = 9223372036854775807_isize as u32;
(*_2) = 3584038006_u32 << (-4941882866447579999_i64);
(*_2) = (-40_i8) as u32;
(*_2) = 106_u8 as u32;
(*_2) = 2875013752_u32 >> (-31791_i16);
(*_2) = 9223372036854775807_isize as u32;
(*_2) = !3195957334_u32;
(*_2) = !455053822_u32;
(*_2) = 1752099531_u32 ^ 2259309954_u32;
(*_2) = 4060026668_u32 & 2088664815_u32;
(*_2) = 34_i8 as u32;
_9 = _5 ^ _5;
_3.1 = [25502645829083641204778330864649156064_i128,(-95698967729658249960764908895310790635_i128),129259845629966470185308456210544555312_i128,(-59462685313371490459371011277548969852_i128)];
Goto(bb2)
}
bb2 = {
_6 = 41285_u16 as f32;
_6 = 9223372036854775807_isize as f32;
(*_2) = 1932491986_u32 + 1551545123_u32;
(*_2) = 2286392834_u32 << (-6689414571024801849_i64);
(*_2) = 376117743_u32;
_5 = !_9;
Call(_8 = fn10(Move(_1), (*_2), (*_2), _5, Move(_2), (*_2), (*_2), (*_2), (*_2), _5, (*_2), (*_2)), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_1 = core::ptr::addr_of!(RET);
(*_1) = 2798837711_u32 - 2128295791_u32;
_1 = core::ptr::addr_of!((*_1));
(*_1) = 1543068422826031409_u64 as u32;
(*_1) = !3484233476_u32;
Goto(bb4)
}
bb4 = {
(*_1) = 3963472610_u32 << 63186732487763767_i64;
(*_1) = !503203888_u32;
_1 = core::ptr::addr_of!((*_1));
(*_1) = 4261761311_u32;
_9 = (*_1) < (*_1);
(*_1) = !547056623_u32;
Goto(bb5)
}
bb5 = {
(*_1) = 3095892904_u32 * 2692930071_u32;
_2 = core::ptr::addr_of!((*_1));
_11.1 = [20_i8,(-17_i8),30_i8];
_11.2 = (97941681595173540921639594262481127409_u128,);
(*_1) = 2904662781_u32 + 4141653599_u32;
_12 = 92527027938646535972665907524207285573_i128 ^ 44607032045320513194573219795277545067_i128;
(*_1) = 729767044_u32 & 591201100_u32;
(*_1) = 91_i8 as u32;
(*_1) = !1755226018_u32;
(*_1) = 3964774546_u32 | 4164177806_u32;
_6 = _12 as f32;
(*_1) = !3971423814_u32;
(*_1) = 2071246928_u32 << _12;
(*_1) = 1314234456_u32 * 77809457_u32;
(*_1) = 3676370084_u32 * 1638904919_u32;
(*_1) = 7_usize as u32;
_11.1 = [(-64_i8),(-18_i8),99_i8];
match _11.2.0 {
97941681595173540921639594262481127409 => bb6,
_ => bb4
}
}
bb6 = {
(*_1) = 2816282031_u32;
_12 = (-89279007883838610749271870898635774098_i128) >> (*_1);
_11.3 = -_12;
(*_1) = 3980425786_u32 * 2690180248_u32;
(*_1) = 754339967_u32 - 1375693603_u32;
(*_1) = 2328108763_u32;
_9 = _5;
_9 = _5;
(*_1) = 1193231413_u32 + 4201988068_u32;
_11.2.0 = 108235756147437193162833065795240780483_u128 - 10205845690013964173037405569063668250_u128;
_14 = 56307_u16;
(*_1) = 366203661_u32 | 875689971_u32;
_11.3 = _12;
_11.2 = (134892647252946311821591794767297070564_u128,);
Goto(bb7)
}
bb7 = {
(*_1) = 2527433125_u32 & 517015116_u32;
_6 = _11.3 as f32;
(*_1) = 2645733236_u32;
_11.2.0 = !248188034709461770201652457588604307147_u128;
Goto(bb8)
}
bb8 = {
(*_1) = (-40901191_i32) as u32;
(*_1) = 111966149_u32;
_11.1 = [33_i8,(-64_i8),(-65_i8)];
(*_1) = 2219250046_u32 | 2161318348_u32;
_2 = core::ptr::addr_of!((*_1));
_8 = core::ptr::addr_of!(_1);
(*_8) = Move(_2);
_15 = core::ptr::addr_of!(_19);
(*_15) = (-939566245459458136_i64) as isize;
(*_8) = core::ptr::addr_of!(RET);
(*_8) = core::ptr::addr_of!((*_1));
_21.1.2 = [16126405637518285633_u64,1315179840266514647_u64,2182480137725767291_u64];
_22.fld0.1 = 11047_i16 & 20570_i16;
_11.0 = [(-126_i8),110_i8,(-127_i8)];
(*_1) = !1594032577_u32;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = _9 as u32;
_8 = core::ptr::addr_of!((*_8));
_22.fld0.0.2 = _3.1;
(*_1) = '\u{6bcbf}' as u32;
_22.fld1 = [(-13_i8),123_i8,87_i8,43_i8,(-123_i8)];
(*_15) = (-9223372036854775808_isize) & 70_isize;
Goto(bb9)
}
bb9 = {
(*_15) = 9223372036854775807_isize >> (*_1);
_25 = -477962107_i32;
_21.1.1 = [(*_15),(*_15),(*_15),(*_15),(*_15),(*_15)];
_2 = core::ptr::addr_of!((*_1));
_2 = Move((*_8));
match _14 {
0 => bb6,
1 => bb2,
56307 => bb11,
_ => bb10
}
}
bb10 = {
_6 = 41285_u16 as f32;
_6 = 9223372036854775807_isize as f32;
(*_2) = 1932491986_u32 + 1551545123_u32;
(*_2) = 2286392834_u32 << (-6689414571024801849_i64);
(*_2) = 376117743_u32;
_5 = !_9;
Call(_8 = fn10(Move(_1), (*_2), (*_2), _5, Move(_2), (*_2), (*_2), (*_2), (*_2), _5, (*_2), (*_2)), ReturnTo(bb3), UnwindUnreachable())
}
bb11 = {
(*_15) = 121_isize ^ 9223372036854775807_isize;
(*_15) = !116_isize;
_11.2 = (149420775783045111151203483351385980119_u128,);
RET = !3484947513_u32;
(*_8) = core::ptr::addr_of!(RET);
(*_1) = 2205467379398293636_i64 as u32;
_16 = -118_i8;
(*_1) = !3669929672_u32;
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = 3710074781_u32 ^ 3821197745_u32;
_21.1.3 = (*_1) as i128;
_21.1.1 = [(*_15),(*_15),(*_15),(*_15),(*_15),(*_15)];
_28 = _21.1.3 as f64;
RET = 1399934144_u32 & 1911564645_u32;
_29 = -(*_15);
(*_15) = _29 & _29;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = _25 as u32;
(*_15) = _29 << _29;
_7 = core::ptr::addr_of!(_28);
(*_1) = 146343135_u32 - 187934203_u32;
match _11.2.0 {
149420775783045111151203483351385980119 => bb12,
_ => bb8
}
}
bb12 = {
(*_7) = _11.3 as f64;
(*_15) = _29;
(*_7) = (-1365926406239894890_i64) as f64;
(*_1) = 3019918659_u32 - 790537447_u32;
(*_7) = _16 as f64;
(*_15) = !_29;
_17 = core::ptr::addr_of!((*_7));
(*_1) = 1231247865_u32;
(*_1) = 4259559205_u32;
_11.2 = (307915977006801436420335927800131867101_u128,);
_21.1.2 = [6238842232847314898_u64,17437314695788887374_u64,1230991926933886465_u64];
(*_15) = _29;
(*_7) = _14 as f64;
_26 = '\u{44285}';
_30 = [_16,_16,_16];
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = 1618943848_u32 & 939706899_u32;
_32 = -(*_7);
_16 = !(-35_i8);
RET = 648633396_u32;
(*_7) = _32;
(*_1) = 3898568997_u32;
(*_7) = _14 as f64;
(*_15) = _29 - _29;
(*_7) = _25 as f64;
match (*_1) {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb11,
4 => bb9,
3898568997 => bb13,
_ => bb7
}
}
bb13 = {
(*_15) = _6 as isize;
(*_15) = 950194198023484630_u64 as isize;
_25 = (-491247232_i32);
(*_7) = _32 * _32;
_1 = core::ptr::addr_of!((*_1));
(*_1) = 1491193238_u32 | 786221783_u32;
_34 = &_26;
(*_8) = Move(_2);
_6 = 10102738043495859068_u64 as f32;
_33 = core::ptr::addr_of!((*_8));
(*_7) = _32 * _32;
_18 = core::ptr::addr_of_mut!((*_7));
_23 = (*_15);
(*_33) = core::ptr::addr_of!(_21.2);
_21.1.2 = [5862223360793170510_u64,1803283186888929395_u64,11201578916483848374_u64];
(*_15) = !_29;
_1 = core::ptr::addr_of!((*_1));
(*_18) = _32;
(*_15) = -_29;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
_31 = Adt21::Variant2 { fld0: Move(_18),fld1: _11.2.0,fld2: (*_15),fld3: 7436732706059119294_usize };
_22.fld0.0.0 = core::ptr::addr_of_mut!((*_1));
Goto(bb14)
}
bb14 = {
_39.0 = (*_34);
match _11.2.0 {
0 => bb4,
1 => bb12,
307915977006801436420335927800131867101 => bb15,
_ => bb3
}
}
bb15 = {
_3.1 = [_12,_21.1.3,_11.3,_21.1.3];
_7 = Move(_17);
(*_8) = core::ptr::addr_of!((*_1));
_11.3 = _21.1.3;
(*_15) = _23;
_6 = _11.2.0 as f32;
_33 = core::ptr::addr_of!(_2);
(*_15) = (*_34) as isize;
(*_15) = !_29;
(*_1) = RET - RET;
(*_15) = _29 << (*_1);
(*_8) = core::ptr::addr_of!((*_1));
(*_15) = Field::<isize>(Variant(_31, 2), 2) + _29;
(*_33) = core::ptr::addr_of!((*_1));
_35 = &_11.3;
(*_8) = core::ptr::addr_of!((*_2));
_19 = _29;
match _11.2.0 {
0 => bb16,
1 => bb17,
2 => bb18,
307915977006801436420335927800131867101 => bb20,
_ => bb19
}
}
bb16 = {
(*_1) = (-40901191_i32) as u32;
(*_1) = 111966149_u32;
_11.1 = [33_i8,(-64_i8),(-65_i8)];
(*_1) = 2219250046_u32 | 2161318348_u32;
_2 = core::ptr::addr_of!((*_1));
_8 = core::ptr::addr_of!(_1);
(*_8) = Move(_2);
_15 = core::ptr::addr_of!(_19);
(*_15) = (-939566245459458136_i64) as isize;
(*_8) = core::ptr::addr_of!(RET);
(*_8) = core::ptr::addr_of!((*_1));
_21.1.2 = [16126405637518285633_u64,1315179840266514647_u64,2182480137725767291_u64];
_22.fld0.1 = 11047_i16 & 20570_i16;
_11.0 = [(-126_i8),110_i8,(-127_i8)];
(*_1) = !1594032577_u32;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = _9 as u32;
_8 = core::ptr::addr_of!((*_8));
_22.fld0.0.2 = _3.1;
(*_1) = '\u{6bcbf}' as u32;
_22.fld1 = [(-13_i8),123_i8,87_i8,43_i8,(-123_i8)];
(*_15) = (-9223372036854775808_isize) & 70_isize;
Goto(bb9)
}
bb17 = {
(*_1) = 2816282031_u32;
_12 = (-89279007883838610749271870898635774098_i128) >> (*_1);
_11.3 = -_12;
(*_1) = 3980425786_u32 * 2690180248_u32;
(*_1) = 754339967_u32 - 1375693603_u32;
(*_1) = 2328108763_u32;
_9 = _5;
_9 = _5;
(*_1) = 1193231413_u32 + 4201988068_u32;
_11.2.0 = 108235756147437193162833065795240780483_u128 - 10205845690013964173037405569063668250_u128;
_14 = 56307_u16;
(*_1) = 366203661_u32 | 875689971_u32;
_11.3 = _12;
_11.2 = (134892647252946311821591794767297070564_u128,);
Goto(bb7)
}
bb18 = {
(*_7) = _11.3 as f64;
(*_15) = _29;
(*_7) = (-1365926406239894890_i64) as f64;
(*_1) = 3019918659_u32 - 790537447_u32;
(*_7) = _16 as f64;
(*_15) = !_29;
_17 = core::ptr::addr_of!((*_7));
(*_1) = 1231247865_u32;
(*_1) = 4259559205_u32;
_11.2 = (307915977006801436420335927800131867101_u128,);
_21.1.2 = [6238842232847314898_u64,17437314695788887374_u64,1230991926933886465_u64];
(*_15) = _29;
(*_7) = _14 as f64;
_26 = '\u{44285}';
_30 = [_16,_16,_16];
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = 1618943848_u32 & 939706899_u32;
_32 = -(*_7);
_16 = !(-35_i8);
RET = 648633396_u32;
(*_7) = _32;
(*_1) = 3898568997_u32;
(*_7) = _14 as f64;
(*_15) = _29 - _29;
(*_7) = _25 as f64;
match (*_1) {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb11,
4 => bb9,
3898568997 => bb13,
_ => bb7
}
}
bb19 = {
(*_15) = 121_isize ^ 9223372036854775807_isize;
(*_15) = !116_isize;
_11.2 = (149420775783045111151203483351385980119_u128,);
RET = !3484947513_u32;
(*_8) = core::ptr::addr_of!(RET);
(*_1) = 2205467379398293636_i64 as u32;
_16 = -118_i8;
(*_1) = !3669929672_u32;
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = 3710074781_u32 ^ 3821197745_u32;
_21.1.3 = (*_1) as i128;
_21.1.1 = [(*_15),(*_15),(*_15),(*_15),(*_15),(*_15)];
_28 = _21.1.3 as f64;
RET = 1399934144_u32 & 1911564645_u32;
_29 = -(*_15);
(*_15) = _29 & _29;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = _25 as u32;
(*_15) = _29 << _29;
_7 = core::ptr::addr_of!(_28);
(*_1) = 146343135_u32 - 187934203_u32;
match _11.2.0 {
149420775783045111151203483351385980119 => bb12,
_ => bb8
}
}
bb20 = {
_26 = _39.0;
_22.fld0.0.3 = !_16;
(*_8) = core::ptr::addr_of!((*_2));
(*_33) = core::ptr::addr_of!((*_2));
(*_1) = RET;
(*_8) = core::ptr::addr_of!((*_1));
match Field::<u128>(Variant(_31, 2), 1) {
0 => bb13,
307915977006801436420335927800131867101 => bb21,
_ => bb6
}
}
bb21 = {
_35 = &_12;
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = RET + RET;
(*_1) = !RET;
(*_15) = -Field::<isize>(Variant(_31, 2), 2);
_4 = [10883183384720586902_usize,5_usize,5_usize,1_usize,3_usize,2_usize];
(*_8) = Move((*_33));
_22.fld0.0.1 = _14 * _14;
(*_33) = core::ptr::addr_of!(RET);
place!(Field::<usize>(Variant(_31, 2), 3)) = !6657708029041660795_usize;
_2 = core::ptr::addr_of!((*_2));
(*_2) = _11.2.0 as u32;
_11.3 = (*_35) + (*_35);
(*_33) = core::ptr::addr_of!((*_2));
(*_33) = core::ptr::addr_of!((*_2));
_33 = Move(_8);
(*_2) = _25 as u32;
_21.0 = &mut place!(Field::<usize>(Variant(_31, 2), 3));
(*_2) = _21.2 | _21.2;
_29 = _16 as isize;
_24 = core::ptr::addr_of_mut!(_35);
_12 = _11.3 | _21.1.3;
_11.2.0 = 23086701671655293901258807382314949363_u128 - 231271065462044325561203850122834638141_u128;
_11.1 = _30;
_8 = Move(_33);
(*_24) = &_11.3;
_23 = 8572985329470324612_usize as isize;
(*_2) = _39.0 as u32;
Goto(bb22)
}
bb22 = {
(*_2) = _21.2 - _21.2;
(*_15) = _23 | _23;
(*_15) = _23;
_43.2 = (_11.2.0,);
_37 = core::ptr::addr_of_mut!(_43.2.0);
(*_24) = &_21.1.3;
(*_37) = _11.2.0 - _11.2.0;
match _25 {
0 => bb4,
1 => bb23,
2 => bb24,
3 => bb25,
4 => bb26,
5 => bb27,
6 => bb28,
340282366920938463463374607431276964224 => bb30,
_ => bb29
}
}
bb23 = {
_6 = 41285_u16 as f32;
_6 = 9223372036854775807_isize as f32;
(*_2) = 1932491986_u32 + 1551545123_u32;
(*_2) = 2286392834_u32 << (-6689414571024801849_i64);
(*_2) = 376117743_u32;
_5 = !_9;
Call(_8 = fn10(Move(_1), (*_2), (*_2), _5, Move(_2), (*_2), (*_2), (*_2), (*_2), _5, (*_2), (*_2)), ReturnTo(bb3), UnwindUnreachable())
}
bb24 = {
_26 = _39.0;
_22.fld0.0.3 = !_16;
(*_8) = core::ptr::addr_of!((*_2));
(*_33) = core::ptr::addr_of!((*_2));
(*_1) = RET;
(*_8) = core::ptr::addr_of!((*_1));
match Field::<u128>(Variant(_31, 2), 1) {
0 => bb13,
307915977006801436420335927800131867101 => bb21,
_ => bb6
}
}
bb25 = {
(*_15) = 121_isize ^ 9223372036854775807_isize;
(*_15) = !116_isize;
_11.2 = (149420775783045111151203483351385980119_u128,);
RET = !3484947513_u32;
(*_8) = core::ptr::addr_of!(RET);
(*_1) = 2205467379398293636_i64 as u32;
_16 = -118_i8;
(*_1) = !3669929672_u32;
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = 3710074781_u32 ^ 3821197745_u32;
_21.1.3 = (*_1) as i128;
_21.1.1 = [(*_15),(*_15),(*_15),(*_15),(*_15),(*_15)];
_28 = _21.1.3 as f64;
RET = 1399934144_u32 & 1911564645_u32;
_29 = -(*_15);
(*_15) = _29 & _29;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = _25 as u32;
(*_15) = _29 << _29;
_7 = core::ptr::addr_of!(_28);
(*_1) = 146343135_u32 - 187934203_u32;
match _11.2.0 {
149420775783045111151203483351385980119 => bb12,
_ => bb8
}
}
bb26 = {
(*_1) = 2527433125_u32 & 517015116_u32;
_6 = _11.3 as f32;
(*_1) = 2645733236_u32;
_11.2.0 = !248188034709461770201652457588604307147_u128;
Goto(bb8)
}
bb27 = {
(*_15) = _6 as isize;
(*_15) = 950194198023484630_u64 as isize;
_25 = (-491247232_i32);
(*_7) = _32 * _32;
_1 = core::ptr::addr_of!((*_1));
(*_1) = 1491193238_u32 | 786221783_u32;
_34 = &_26;
(*_8) = Move(_2);
_6 = 10102738043495859068_u64 as f32;
_33 = core::ptr::addr_of!((*_8));
(*_7) = _32 * _32;
_18 = core::ptr::addr_of_mut!((*_7));
_23 = (*_15);
(*_33) = core::ptr::addr_of!(_21.2);
_21.1.2 = [5862223360793170510_u64,1803283186888929395_u64,11201578916483848374_u64];
(*_15) = !_29;
_1 = core::ptr::addr_of!((*_1));
(*_18) = _32;
(*_15) = -_29;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
_31 = Adt21::Variant2 { fld0: Move(_18),fld1: _11.2.0,fld2: (*_15),fld3: 7436732706059119294_usize };
_22.fld0.0.0 = core::ptr::addr_of_mut!((*_1));
Goto(bb14)
}
bb28 = {
_39.0 = (*_34);
match _11.2.0 {
0 => bb4,
1 => bb12,
307915977006801436420335927800131867101 => bb15,
_ => bb3
}
}
bb29 = {
_3.1 = [_12,_21.1.3,_11.3,_21.1.3];
_7 = Move(_17);
(*_8) = core::ptr::addr_of!((*_1));
_11.3 = _21.1.3;
(*_15) = _23;
_6 = _11.2.0 as f32;
_33 = core::ptr::addr_of!(_2);
(*_15) = (*_34) as isize;
(*_15) = !_29;
(*_1) = RET - RET;
(*_15) = _29 << (*_1);
(*_8) = core::ptr::addr_of!((*_1));
(*_15) = Field::<isize>(Variant(_31, 2), 2) + _29;
(*_33) = core::ptr::addr_of!((*_1));
_35 = &_11.3;
(*_8) = core::ptr::addr_of!((*_2));
_19 = _29;
match _11.2.0 {
0 => bb16,
1 => bb17,
2 => bb18,
307915977006801436420335927800131867101 => bb20,
_ => bb19
}
}
bb30 = {
(*_2) = _21.2 * _21.2;
_25 = 1979625170_i32 + 1849991259_i32;
_34 = &_39.0;
(*_37) = _11.2.0 << (*_35);
_12 = _11.3;
(*_2) = _21.2;
_2 = Move(_1);
_44 = _32 - _28;
(*_37) = _11.2.0;
(*_24) = &_12;
(*_24) = &_11.3;
(*_37) = _11.2.0 >> (*_35);
(*_15) = _29 + _23;
(*_24) = &_21.1.3;
_17 = core::ptr::addr_of!(_32);
(*_24) = &_11.3;
_18 = core::ptr::addr_of_mut!((*_17));
(*_37) = _11.2.0 | _11.2.0;
(*_37) = !_11.2.0;
_11.1 = [_16,_16,_16];
_26 = _39.0;
_15 = core::ptr::addr_of!(_23);
match _14 {
0 => bb17,
1 => bb2,
2 => bb3,
3 => bb9,
4 => bb28,
5 => bb19,
6 => bb24,
56307 => bb32,
_ => bb31
}
}
bb31 = {
_26 = _39.0;
_22.fld0.0.3 = !_16;
(*_8) = core::ptr::addr_of!((*_2));
(*_33) = core::ptr::addr_of!((*_2));
(*_1) = RET;
(*_8) = core::ptr::addr_of!((*_1));
match Field::<u128>(Variant(_31, 2), 1) {
0 => bb13,
307915977006801436420335927800131867101 => bb21,
_ => bb6
}
}
bb32 = {
_39 = (_26,);
_43.1 = (*_35) & (*_35);
_44 = RET as f64;
_22.fld3 = core::ptr::addr_of_mut!((*_37));
_21.2 = RET;
(*_15) = _19 | _19;
_22.fld0.0.1 = !_14;
_28 = _44 * (*_17);
_4 = [4_usize,5_usize,13334657423102034245_usize,3534165902275727240_usize,2_usize,5_usize];
_27 = core::ptr::addr_of!((*_18));
(*_18) = RET as f64;
(*_18) = -_44;
_22.fld0.0.0 = core::ptr::addr_of_mut!(_21.2);
_35 = &_12;
_24 = core::ptr::addr_of_mut!(_35);
_3.0.0 = Adt21::Variant2 { fld0: Move(_18),fld1: (*_37),fld2: (*_15),fld3: 15186067669376907495_usize };
_43.0 = core::ptr::addr_of_mut!(_39.0);
(*_15) = _39.0 as isize;
_42 = !_22.fld0.1;
_46 = -_6;
(*_17) = _28;
Goto(bb33)
}
bb33 = {
(*_17) = (*_37) as f64;
_8 = core::ptr::addr_of!(_2);
(*_37) = _11.2.0;
_21.1.3 = -(*_35);
(*_15) = _19 | _29;
_21.1.1 = [(*_15),(*_15),_23,(*_15),(*_15),(*_15)];
(*_8) = core::ptr::addr_of!(_21.2);
match _14 {
56307 => bb34,
_ => bb13
}
}
bb34 = {
(*_8) = core::ptr::addr_of!((*_2));
(*_17) = _28 + _44;
(*_15) = _19 * _19;
_53 = (*_15) ^ _19;
(*_15) = Field::<isize>(Variant(_3.0.0, 2), 2) << RET;
_8 = core::ptr::addr_of!((*_8));
_39 = (_26,);
(*_8) = core::ptr::addr_of!((*_2));
_49 = core::ptr::addr_of_mut!((*_2));
(*_15) = Field::<isize>(Variant(_3.0.0, 2), 2);
(*_49) = RET;
_48 = !_43.2.0;
_36 = _5;
_9 = _36;
_11.0 = _11.1;
Goto(bb35)
}
bb35 = {
_37 = core::ptr::addr_of_mut!((*_37));
(*_49) = !RET;
(*_8) = core::ptr::addr_of!((*_49));
_39 = (_26,);
(*_37) = Field::<u128>(Variant(_3.0.0, 2), 1) ^ _11.2.0;
(*_8) = core::ptr::addr_of!((*_49));
_54 = _9;
Goto(bb36)
}
bb36 = {
(*_15) = _53 ^ _53;
(*_8) = core::ptr::addr_of!((*_2));
_18 = core::ptr::addr_of_mut!((*_17));
(*_37) = _48 & Field::<u128>(Variant(_3.0.0, 2), 1);
_48 = (*_37) * (*_37);
_44 = (*_18);
_57.0 = &_25;
(*_24) = &_21.1.3;
(*_37) = _48 - _48;
(*_2) = RET + RET;
(*_15) = Field::<isize>(Variant(_3.0.0, 2), 2) | _53;
(*_49) = 161_u8 as u32;
_12 = (*_35) >> (*_15);
_37 = core::ptr::addr_of_mut!((*_37));
(*_15) = 2_usize as isize;
place!(Field::<u128>(Variant(_3.0.0, 2), 1)) = (*_37);
_11.2 = _43.2;
Call((*_15) = core::intrinsics::bswap(_53), ReturnTo(bb37), UnwindUnreachable())
}
bb37 = {
(*_37) = (*_49) as u128;
(*_37) = 5_usize as u128;
_36 = _54;
(*_49) = !RET;
_15 = core::ptr::addr_of!((*_15));
_63 = _26;
(*_24) = &_11.3;
_22.fld0.0.0 = core::ptr::addr_of_mut!((*_49));
_5 = _36;
(*_24) = &_12;
_62 = _39.0;
_37 = core::ptr::addr_of_mut!((*_37));
(*_8) = core::ptr::addr_of!((*_49));
_49 = core::ptr::addr_of_mut!((*_49));
(*_18) = _44;
(*_2) = RET - RET;
_1 = core::ptr::addr_of!((*_2));
match _14 {
0 => bb7,
1 => bb20,
56307 => bb38,
_ => bb3
}
}
bb38 = {
_60 = _53 + (*_15);
(*_17) = _28 - _28;
(*_8) = core::ptr::addr_of!((*_1));
(*_24) = &_21.1.3;
match _14 {
0 => bb19,
1 => bb3,
56307 => bb40,
_ => bb39
}
}
bb39 = {
(*_1) = 2527433125_u32 & 517015116_u32;
_6 = _11.3 as f32;
(*_1) = 2645733236_u32;
_11.2.0 = !248188034709461770201652457588604307147_u128;
Goto(bb8)
}
bb40 = {
(*_24) = &_43.1;
(*_17) = _44 * _28;
_47 = _39.0;
(*_1) = RET;
(*_8) = core::ptr::addr_of!((*_1));
_11.0 = [_22.fld0.0.3,_16,_22.fld0.0.3];
(*_17) = 6953916721634824917_i64 as f64;
(*_2) = RET & RET;
(*_24) = &_21.1.3;
(*_24) = &_43.1;
_5 = !_9;
(*_17) = -_44;
(*_37) = _48;
_24 = core::ptr::addr_of_mut!((*_24));
_11 = (_30, _30, _43.2, (*_35));
(*_17) = _44 * _28;
_26 = _47;
(*_17) = _25 as f64;
Call(_29 = core::intrinsics::bswap((*_15)), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
(*_37) = Field::<u128>(Variant(_3.0.0, 2), 1) - Field::<u128>(Variant(_3.0.0, 2), 1);
_10 = core::ptr::addr_of!(_21.0);
_46 = _6;
(*_1) = !RET;
_37 = core::ptr::addr_of_mut!((*_37));
(*_37) = _11.2.0;
(*_8) = core::ptr::addr_of!((*_1));
Goto(bb42)
}
bb42 = {
_65 = ((*_37),);
_60 = _16 as isize;
_68 = (Move(_22.fld0.0.0), _14, _22.fld0.0.2, _22.fld0.0.3);
(*_2) = !RET;
(*_17) = _44 + _28;
_43.1 = _11.3;
_61 = [(*_15)];
_9 = _48 < (*_37);
_43.2.0 = !_48;
(*_1) = RET;
_22.fld0.0.3 = _68.3 * _68.3;
_71.0 = core::ptr::addr_of_mut!((*_1));
_35 = &_21.1.3;
(*_17) = 192_u8 as f64;
(*_37) = _65.0;
(*_1) = _25 as u32;
_29 = Field::<isize>(Variant(_3.0.0, 2), 2);
_51 = _62;
(*_1) = !RET;
_37 = core::ptr::addr_of_mut!((*_37));
(*_17) = _44;
(*_17) = _28 + _44;
_71.2 = _22.fld0.0.2;
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = RET ^ RET;
_72 = _22.fld0.0.1;
(*_37) = _11.2.0;
Call(_22.fld0.1 = core::intrinsics::bswap(_42), ReturnTo(bb43), UnwindUnreachable())
}
bb43 = {
_68.0 = Move(_49);
_45 = ((*_15),);
(*_1) = 16494602558526973084_usize as u32;
Call((*_15) = core::intrinsics::bswap(Field::<isize>(Variant(_3.0.0, 2), 2)), ReturnTo(bb44), UnwindUnreachable())
}
bb44 = {
(*_15) = _26 as isize;
_46 = _6 * _6;
match _14 {
0 => bb8,
1 => bb45,
2 => bb46,
3 => bb47,
4 => bb48,
56307 => bb50,
_ => bb49
}
}
bb45 = {
_3.1 = [_12,_21.1.3,_11.3,_21.1.3];
_7 = Move(_17);
(*_8) = core::ptr::addr_of!((*_1));
_11.3 = _21.1.3;
(*_15) = _23;
_6 = _11.2.0 as f32;
_33 = core::ptr::addr_of!(_2);
(*_15) = (*_34) as isize;
(*_15) = !_29;
(*_1) = RET - RET;
(*_15) = _29 << (*_1);
(*_8) = core::ptr::addr_of!((*_1));
(*_15) = Field::<isize>(Variant(_31, 2), 2) + _29;
(*_33) = core::ptr::addr_of!((*_1));
_35 = &_11.3;
(*_8) = core::ptr::addr_of!((*_2));
_19 = _29;
match _11.2.0 {
0 => bb16,
1 => bb17,
2 => bb18,
307915977006801436420335927800131867101 => bb20,
_ => bb19
}
}
bb46 = {
(*_15) = 121_isize ^ 9223372036854775807_isize;
(*_15) = !116_isize;
_11.2 = (149420775783045111151203483351385980119_u128,);
RET = !3484947513_u32;
(*_8) = core::ptr::addr_of!(RET);
(*_1) = 2205467379398293636_i64 as u32;
_16 = -118_i8;
(*_1) = !3669929672_u32;
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = 3710074781_u32 ^ 3821197745_u32;
_21.1.3 = (*_1) as i128;
_21.1.1 = [(*_15),(*_15),(*_15),(*_15),(*_15),(*_15)];
_28 = _21.1.3 as f64;
RET = 1399934144_u32 & 1911564645_u32;
_29 = -(*_15);
(*_15) = _29 & _29;
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = _25 as u32;
(*_15) = _29 << _29;
_7 = core::ptr::addr_of!(_28);
(*_1) = 146343135_u32 - 187934203_u32;
match _11.2.0 {
149420775783045111151203483351385980119 => bb12,
_ => bb8
}
}
bb47 = {
_39 = (_26,);
_43.1 = (*_35) & (*_35);
_44 = RET as f64;
_22.fld3 = core::ptr::addr_of_mut!((*_37));
_21.2 = RET;
(*_15) = _19 | _19;
_22.fld0.0.1 = !_14;
_28 = _44 * (*_17);
_4 = [4_usize,5_usize,13334657423102034245_usize,3534165902275727240_usize,2_usize,5_usize];
_27 = core::ptr::addr_of!((*_18));
(*_18) = RET as f64;
(*_18) = -_44;
_22.fld0.0.0 = core::ptr::addr_of_mut!(_21.2);
_35 = &_12;
_24 = core::ptr::addr_of_mut!(_35);
_3.0.0 = Adt21::Variant2 { fld0: Move(_18),fld1: (*_37),fld2: (*_15),fld3: 15186067669376907495_usize };
_43.0 = core::ptr::addr_of_mut!(_39.0);
(*_15) = _39.0 as isize;
_42 = !_22.fld0.1;
_46 = -_6;
(*_17) = _28;
Goto(bb33)
}
bb48 = {
(*_17) = (*_37) as f64;
_8 = core::ptr::addr_of!(_2);
(*_37) = _11.2.0;
_21.1.3 = -(*_35);
(*_15) = _19 | _29;
_21.1.1 = [(*_15),(*_15),_23,(*_15),(*_15),(*_15)];
(*_8) = core::ptr::addr_of!(_21.2);
match _14 {
56307 => bb34,
_ => bb13
}
}
bb49 = {
(*_1) = 2527433125_u32 & 517015116_u32;
_6 = _11.3 as f32;
(*_1) = 2645733236_u32;
_11.2.0 = !248188034709461770201652457588604307147_u128;
Goto(bb8)
}
bb50 = {
(*_15) = _60 + Field::<isize>(Variant(_3.0.0, 2), 2);
_12 = (*_1) as i128;
_71.3 = _16 | _68.3;
(*_15) = _19 + _53;
(*_15) = _29 | _60;
(*_8) = core::ptr::addr_of!((*_1));
(*_37) = (*_35) as u128;
(*_8) = core::ptr::addr_of!((*_1));
(*_1) = !RET;
_3.0.0 = Adt21::Variant3 { fld0: 16095414593049548763_u64,fld1: _39.0,fld2: Move(_18) };
_71.2 = [_43.1,(*_35),(*_35),(*_35)];
_73 = _22.fld0.1;
Goto(bb51)
}
bb51 = {
Call(_81 = dump_var(Move(_16), Move(_61), Move(_23), Move(_12)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_81 = dump_var(Move(_9), Move(_11), Move(_30), Move(_42)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_81 = dump_var(Move(_39), Move(_63), Move(_4), Move(_72)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_81 = dump_var(Move(_26), Move(_51), _82, _82), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: *const u32,mut _2: u32,mut _3: u32,mut _4: bool,mut _5: *const u32,mut _6: u32,mut _7: u32,mut _8: u32,mut _9: u32,mut _10: bool,mut _11: u32,mut _12: u32) -> *const *const u32 {
mir! {
type RET = *const *const u32;
let _13: u32;
let _14: bool;
let _15: u32;
let _16: u8;
let _17: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _18: ([i8; 3], [i8; 3], (u128,), i128);
let _19: isize;
let _20: u32;
let _21: [isize; 6];
let _22: (*mut char, i128, (u128,));
let _23: *mut &'static i128;
let _24: Adt53;
let _25: &'static *mut f64;
let _26: (&'static i32, (i32,));
let _27: &'static mut char;
let _28: u128;
let _29: usize;
let _30: &'static i128;
let _31: &'static mut char;
let _32: *const f64;
let _33: u32;
let _34: ((i32,), Adt20, u8);
let _35: isize;
let _36: f32;
let _37: bool;
let _38: u32;
let _39: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _40: i128;
let _41: u128;
let _42: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _43: isize;
let _44: bool;
let _45: [i128; 1];
let _46: *const &'static mut usize;
let _47: f64;
let _48: isize;
let _49: i128;
let _50: f32;
let _51: i128;
let _52: f32;
let _53: &'static mut char;
let _54: [u64; 3];
let _55: &'static mut char;
let _56: *const isize;
let _57: *const Adt17;
let _58: ();
let _59: ();
{
_7 = _3 + _3;
_7 = (-6584336320347270587_i64) as u32;
_8 = !_9;
_8 = (-31409_i16) as u32;
_6 = _7 * _9;
_8 = _2 - _11;
_3 = _9 % _2;
_11 = _9;
_12 = _7;
_1 = core::ptr::addr_of!(_7);
(*_1) = 62886995148698281029190191732450771342_i128 as u32;
match _11 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
376117743 => bb6,
_ => bb5
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_13 = (-17222_i16) as u32;
_1 = Move(_5);
_7 = _3 ^ _13;
_5 = core::ptr::addr_of!(_3);
(*_5) = !_6;
Goto(bb7)
}
bb7 = {
(*_5) = !_7;
(*_5) = _7 ^ _11;
_12 = _13 - (*_5);
(*_5) = 2_usize as u32;
(*_5) = 15012593295782955685_usize as u32;
(*_5) = (-1196565999_i32) as u32;
_7 = '\u{dbcd0}' as u32;
(*_5) = 3879206861934744633_i64 as u32;
(*_5) = 8643060826677240832_i64 as u32;
(*_5) = _12 & _12;
(*_5) = _8 & _8;
(*_5) = 15987693048144641333_u64 as u32;
_6 = _11 >> (*_5);
(*_5) = _8 % _9;
_7 = (*_5) ^ (*_5);
(*_5) = _8 >> _8;
(*_5) = (-1918595066_i32) as u32;
(*_5) = _11 % _9;
(*_5) = (-9223372036854775808_isize) as u32;
(*_5) = _7;
_8 = !_3;
(*_5) = _12;
Call((*_5) = fn11(Move(_1), _6, _7, Move(_5), _6, _11, _13, _2, _2), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
_1 = core::ptr::addr_of!(_12);
(*_1) = _3 % _2;
(*_1) = _3;
_6 = (*_1);
_8 = (*_1) ^ _3;
_12 = _6 ^ _6;
(*_1) = _6 & _3;
_4 = (*_1) != (*_1);
_2 = (*_1);
_16 = !84_u8;
_6 = 13131107554806517494_u64 as u32;
(*_1) = 9223372036854775807_isize as u32;
(*_1) = !_8;
Goto(bb9)
}
bb9 = {
_15 = _8;
_5 = core::ptr::addr_of!(_9);
_15 = (*_1) | (*_1);
(*_5) = !(*_1);
(*_1) = 16289882879004853648_u64 as u32;
(*_1) = (*_5) >> _7;
(*_5) = (*_1) / _11;
(*_5) = (*_1) + (*_1);
(*_1) = _16 as u32;
(*_5) = _15;
RET = core::ptr::addr_of!(_5);
(*_5) = _15 % _11;
(*RET) = core::ptr::addr_of!((*_5));
_7 = _4 as u32;
(*RET) = core::ptr::addr_of!((*_5));
(*_1) = !(*_5);
_18.2.0 = !323748207585269970249782619432290106496_u128;
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
(*_1) = _7 & (*_5);
match _11 {
0 => bb8,
1 => bb2,
2 => bb3,
3 => bb4,
376117743 => bb11,
_ => bb10
}
}
bb10 = {
Return()
}
bb11 = {
(*RET) = core::ptr::addr_of!((*_1));
(*_1) = _9;
_18.1 = [42_i8,(-48_i8),1_i8];
(*_1) = _7;
(*RET) = core::ptr::addr_of!((*_1));
(*RET) = core::ptr::addr_of!((*_1));
(*RET) = core::ptr::addr_of!((*_1));
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_1));
match _11 {
0 => bb10,
1 => bb2,
2 => bb3,
3 => bb7,
4 => bb5,
376117743 => bb12,
_ => bb6
}
}
bb12 = {
(*_1) = _7 % _11;
(*_1) = !_15;
_14 = (*_1) != (*_1);
(*RET) = Move(_1);
_4 = _12 < _2;
(*RET) = core::ptr::addr_of!(_9);
_18.0 = _18.1;
_22.2.0 = 143297142637271902905066086133687270611_i128 as u128;
(*RET) = core::ptr::addr_of!(_6);
_18.3 = _22.2.0 as i128;
(*_5) = _16 as u32;
_9 = _12 >> _7;
(*_5) = _15 % _11;
_11 = !(*_5);
_22.2.0 = !_18.2.0;
(*RET) = core::ptr::addr_of!((*_5));
_21 = [27_isize,9223372036854775807_isize,(-9223372036854775808_isize),9223372036854775807_isize,15_isize,(-9223372036854775808_isize)];
(*_5) = !_8;
(*RET) = core::ptr::addr_of!((*_5));
_11 = _7 | (*_5);
_15 = _3 & _9;
Goto(bb13)
}
bb13 = {
_1 = core::ptr::addr_of!((*_5));
(*_5) = _15;
_6 = _12 & _12;
_6 = _12 | _12;
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = Move(_1);
_4 = _14 ^ _14;
_9 = !_2;
_24.fld0.0.1 = 8479_u16 ^ 15984_u16;
_24.fld0.0.1 = 1789710233_i32 as u16;
_24.fld0.0.3 = -6_i8;
_18.3 = 76388916666594864438698156799511295004_i128 + (-21194806947498684349990782890870062516_i128);
(*RET) = core::ptr::addr_of!(_12);
_22.1 = _18.3 - _18.3;
Goto(bb14)
}
bb14 = {
(*_5) = !_9;
(*_5) = _15 >> _11;
_19 = (-57_isize);
_29 = '\u{4a798}' as usize;
_21 = [_19,_19,_19,_19,_19,_19];
_1 = core::ptr::addr_of!(_3);
(*_5) = _24.fld0.0.1 as u32;
(*RET) = core::ptr::addr_of!((*_1));
_26.1 = (1072332740_i32,);
(*_5) = _6 | _15;
(*_1) = _19 as u32;
_19 = (-9223372036854775808_isize) & 9223372036854775807_isize;
(*_1) = 6688475339838778471_u64 as u32;
(*_1) = _24.fld0.0.3 as u32;
_7 = _6 - _6;
(*RET) = Move(_1);
_6 = !_15;
_7 = _29 as u32;
_26.0 = &_26.1.0;
(*RET) = core::ptr::addr_of!(_3);
(*RET) = core::ptr::addr_of!((*_5));
_24.fld1 = [_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3];
_4 = _15 < _11;
(*_5) = _15 & _8;
(*RET) = core::ptr::addr_of!(_12);
(*_5) = !_3;
(*_5) = '\u{a461f}' as u32;
Goto(bb15)
}
bb15 = {
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
(*_5) = _15;
_22.2.0 = 12941206051811800798_u64 as u128;
match _26.1.0 {
0 => bb1,
1 => bb9,
2 => bb3,
3 => bb4,
4 => bb16,
1072332740 => bb18,
_ => bb17
}
}
bb16 = {
(*RET) = core::ptr::addr_of!((*_1));
(*_1) = _9;
_18.1 = [42_i8,(-48_i8),1_i8];
(*_1) = _7;
(*RET) = core::ptr::addr_of!((*_1));
(*RET) = core::ptr::addr_of!((*_1));
(*RET) = core::ptr::addr_of!((*_1));
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_1));
match _11 {
0 => bb10,
1 => bb2,
2 => bb3,
3 => bb7,
4 => bb5,
376117743 => bb12,
_ => bb6
}
}
bb17 = {
Return()
}
bb18 = {
(*_5) = _2 + _6;
(*RET) = core::ptr::addr_of!(_6);
_22.1 = -_18.3;
(*_5) = _9 + _15;
_14 = _4;
(*RET) = core::ptr::addr_of!((*_5));
_21 = [_19,_19,_19,_19,_19,_19];
_10 = !_4;
(*_5) = '\u{fcb91}' as u32;
(*RET) = core::ptr::addr_of!(_6);
_4 = (*_5) == _9;
(*RET) = core::ptr::addr_of!((*_5));
_21 = [_19,_19,_19,_19,_19,_19];
Goto(bb19)
}
bb19 = {
_22.2 = (_18.2.0,);
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
_24.fld2 = core::ptr::addr_of!(_19);
_9 = _16 as u32;
(*_5) = _3 * _11;
Goto(bb20)
}
bb20 = {
_13 = !(*_5);
_18.0 = [_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3];
(*_5) = _11 ^ _11;
_24.fld0.0.2 = [_18.3,_18.3,_22.1,_18.3];
(*RET) = core::ptr::addr_of!(_15);
_21 = [_19,_19,_19,_19,_19,_19];
(*RET) = core::ptr::addr_of!(_3);
_24.fld2 = core::ptr::addr_of!(_19);
_34.2 = _16;
_24.fld0.0.2 = [_18.3,_18.3,_22.1,_18.3];
(*RET) = core::ptr::addr_of!((*_5));
_13 = (*_5);
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!(_11);
_18.0 = [_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3];
_18.3 = _22.1;
_24.fld0.0.1 = 54296_u16 & 1498_u16;
Goto(bb21)
}
bb21 = {
_15 = _12 ^ (*_5);
(*RET) = core::ptr::addr_of!(_3);
_15 = _29 as u32;
(*_5) = !_6;
match _26.1.0 {
0 => bb1,
1 => bb19,
2 => bb3,
3 => bb4,
4 => bb16,
5 => bb6,
6 => bb22,
1072332740 => bb24,
_ => bb23
}
}
bb22 = {
Return()
}
bb23 = {
_22.2 = (_18.2.0,);
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
_24.fld2 = core::ptr::addr_of!(_19);
_9 = _16 as u32;
(*_5) = _3 * _11;
Goto(bb20)
}
bb24 = {
(*RET) = core::ptr::addr_of!(_15);
match _26.1.0 {
0 => bb25,
1 => bb26,
1072332740 => bb28,
_ => bb27
}
}
bb25 = {
_15 = _8;
_5 = core::ptr::addr_of!(_9);
_15 = (*_1) | (*_1);
(*_5) = !(*_1);
(*_1) = 16289882879004853648_u64 as u32;
(*_1) = (*_5) >> _7;
(*_5) = (*_1) / _11;
(*_5) = (*_1) + (*_1);
(*_1) = _16 as u32;
(*_5) = _15;
RET = core::ptr::addr_of!(_5);
(*_5) = _15 % _11;
(*RET) = core::ptr::addr_of!((*_5));
_7 = _4 as u32;
(*RET) = core::ptr::addr_of!((*_5));
(*_1) = !(*_5);
_18.2.0 = !323748207585269970249782619432290106496_u128;
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
(*_1) = _7 & (*_5);
match _11 {
0 => bb8,
1 => bb2,
2 => bb3,
3 => bb4,
376117743 => bb11,
_ => bb10
}
}
bb26 = {
Return()
}
bb27 = {
Return()
}
bb28 = {
_28 = _22.2.0;
_24.fld0.1 = -(-932_i16);
_35 = _19 << _9;
_3 = !_2;
_36 = _13 as f32;
_33 = !_6;
(*RET) = core::ptr::addr_of!(_12);
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
_8 = _33 ^ _6;
(*RET) = core::ptr::addr_of!((*_5));
(*_5) = _3;
_34.0.0 = _26.1.0 * _26.1.0;
(*_5) = _11;
(*RET) = core::ptr::addr_of!((*_5));
_24.fld3 = core::ptr::addr_of_mut!(_28);
_1 = core::ptr::addr_of!((*_5));
_3 = _22.1 as u32;
(*_5) = _24.fld0.0.3 as u32;
(*_5) = _2 - _33;
(*_5) = _2;
_12 = _13 * _8;
_18.2.0 = _28 | _28;
(*RET) = core::ptr::addr_of!((*_5));
(*_5) = _6 - _8;
_11 = (*_5);
Goto(bb29)
}
bb29 = {
(*_5) = _33 << _33;
(*RET) = core::ptr::addr_of!((*_5));
_18.3 = _4 as i128;
(*_5) = _2 ^ _13;
(*RET) = Move(_1);
_22.1 = -_18.3;
(*RET) = core::ptr::addr_of!(_7);
_18.2 = _22.2;
(*RET) = core::ptr::addr_of!((*_5));
_16 = _34.2 ^ _34.2;
(*_5) = _11 << _22.1;
_3 = !_12;
(*_5) = _12 - _9;
_18.3 = -_22.1;
(*_5) = !_2;
(*_5) = !_2;
_24.fld0.0.1 = 15755_u16;
match _26.1.0 {
0 => bb27,
1 => bb30,
2 => bb31,
3 => bb32,
1072332740 => bb34,
_ => bb33
}
}
bb30 = {
(*RET) = core::ptr::addr_of!(_15);
match _26.1.0 {
0 => bb25,
1 => bb26,
1072332740 => bb28,
_ => bb27
}
}
bb31 = {
_22.2 = (_18.2.0,);
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
_24.fld2 = core::ptr::addr_of!(_19);
_9 = _16 as u32;
(*_5) = _3 * _11;
Goto(bb20)
}
bb32 = {
(*_1) = _7 % _11;
(*_1) = !_15;
_14 = (*_1) != (*_1);
(*RET) = Move(_1);
_4 = _12 < _2;
(*RET) = core::ptr::addr_of!(_9);
_18.0 = _18.1;
_22.2.0 = 143297142637271902905066086133687270611_i128 as u128;
(*RET) = core::ptr::addr_of!(_6);
_18.3 = _22.2.0 as i128;
(*_5) = _16 as u32;
_9 = _12 >> _7;
(*_5) = _15 % _11;
_11 = !(*_5);
_22.2.0 = !_18.2.0;
(*RET) = core::ptr::addr_of!((*_5));
_21 = [27_isize,9223372036854775807_isize,(-9223372036854775808_isize),9223372036854775807_isize,15_isize,(-9223372036854775808_isize)];
(*_5) = !_8;
(*RET) = core::ptr::addr_of!((*_5));
_11 = _7 | (*_5);
_15 = _3 & _9;
Goto(bb13)
}
bb33 = {
_1 = core::ptr::addr_of!((*_5));
(*_5) = _15;
_6 = _12 & _12;
_6 = _12 | _12;
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = Move(_1);
_4 = _14 ^ _14;
_9 = !_2;
_24.fld0.0.1 = 8479_u16 ^ 15984_u16;
_24.fld0.0.1 = 1789710233_i32 as u16;
_24.fld0.0.3 = -6_i8;
_18.3 = 76388916666594864438698156799511295004_i128 + (-21194806947498684349990782890870062516_i128);
(*RET) = core::ptr::addr_of!(_12);
_22.1 = _18.3 - _18.3;
Goto(bb14)
}
bb34 = {
_7 = !_33;
_24.fld1 = [_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3];
_7 = _6 * _6;
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!(_2);
Goto(bb35)
}
bb35 = {
_18.2 = (_28,);
(*_5) = _13 >> _33;
(*_5) = _8 - _8;
(*RET) = core::ptr::addr_of!((*_5));
(*_5) = _6;
_37 = !_10;
_22.1 = _24.fld0.0.1 as i128;
match _24.fld0.0.1 {
0 => bb36,
1 => bb37,
2 => bb38,
3 => bb39,
4 => bb40,
15755 => bb42,
_ => bb41
}
}
bb36 = {
_7 = !_33;
_24.fld1 = [_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3,_24.fld0.0.3];
_7 = _6 * _6;
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!(_2);
Goto(bb35)
}
bb37 = {
(*_1) = _7 % _11;
(*_1) = !_15;
_14 = (*_1) != (*_1);
(*RET) = Move(_1);
_4 = _12 < _2;
(*RET) = core::ptr::addr_of!(_9);
_18.0 = _18.1;
_22.2.0 = 143297142637271902905066086133687270611_i128 as u128;
(*RET) = core::ptr::addr_of!(_6);
_18.3 = _22.2.0 as i128;
(*_5) = _16 as u32;
_9 = _12 >> _7;
(*_5) = _15 % _11;
_11 = !(*_5);
_22.2.0 = !_18.2.0;
(*RET) = core::ptr::addr_of!((*_5));
_21 = [27_isize,9223372036854775807_isize,(-9223372036854775808_isize),9223372036854775807_isize,15_isize,(-9223372036854775808_isize)];
(*_5) = !_8;
(*RET) = core::ptr::addr_of!((*_5));
_11 = _7 | (*_5);
_15 = _3 & _9;
Goto(bb13)
}
bb38 = {
_15 = _12 ^ (*_5);
(*RET) = core::ptr::addr_of!(_3);
_15 = _29 as u32;
(*_5) = !_6;
match _26.1.0 {
0 => bb1,
1 => bb19,
2 => bb3,
3 => bb4,
4 => bb16,
5 => bb6,
6 => bb22,
1072332740 => bb24,
_ => bb23
}
}
bb39 = {
Return()
}
bb40 = {
Return()
}
bb41 = {
_22.2 = (_18.2.0,);
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
_24.fld2 = core::ptr::addr_of!(_19);
_9 = _16 as u32;
(*_5) = _3 * _11;
Goto(bb20)
}
bb42 = {
_3 = _24.fld0.0.3 as u32;
(*_5) = _33 * _11;
_34.2 = _16 - _16;
(*_5) = _19 as u32;
Call(_11 = core::intrinsics::transmute(_3), ReturnTo(bb43), UnwindUnreachable())
}
bb43 = {
(*_5) = _12;
(*RET) = core::ptr::addr_of!((*_5));
(*RET) = core::ptr::addr_of!((*_5));
Goto(bb44)
}
bb44 = {
_34.1 = Adt20::Variant0 { fld0: _24.fld0.0.1 };
_16 = '\u{f78b1}' as u8;
_22.2 = (_18.2.0,);
(*_5) = _33;
_35 = _19 | _19;
(*RET) = core::ptr::addr_of!((*_5));
_22.2.0 = _29 as u128;
_18.3 = _22.1 - _22.1;
_37 = !_14;
_26.1 = _34.0;
_41 = 9563219656731995386_u64 as u128;
(*_5) = _34.2 as u32;
_34.0 = (_26.1.0,);
_6 = !_8;
_51 = _18.3 + _22.1;
match Field::<u16>(Variant(_34.1, 0), 0) {
0 => bb45,
1 => bb46,
15755 => bb48,
_ => bb47
}
}
bb45 = {
Return()
}
bb46 = {
Return()
}
bb47 = {
Return()
}
bb48 = {
(*_5) = _13 << _26.1.0;
_34.0.0 = _26.1.0 + _26.1.0;
_10 = (*_5) < (*_5);
(*_5) = _24.fld0.0.1 as u32;
_20 = _13;
(*RET) = core::ptr::addr_of!((*_5));
_38 = _36 as u32;
_34.0 = (_26.1.0,);
(*RET) = core::ptr::addr_of!((*_5));
_49 = _51 + _51;
_21 = [_35,_35,_35,_35,_35,_35];
(*RET) = core::ptr::addr_of!((*_5));
_3 = _8 & _12;
_40 = _51;
_9 = (-5149001127621648186_i64) as u32;
_35 = _19 >> _3;
_24.fld0.0.0 = core::ptr::addr_of_mut!((*_5));
_48 = _40 as isize;
_51 = _49;
(*RET) = core::ptr::addr_of!(_20);
_18.0 = _18.1;
(*RET) = core::ptr::addr_of!((*_5));
_18.2.0 = !_22.2.0;
_1 = Move((*RET));
_48 = _51 as isize;
(*RET) = core::ptr::addr_of!(_15);
_24.fld3 = core::ptr::addr_of_mut!(_18.2.0);
_54 = [1698830285061335666_u64,3669642002700412427_u64,9973602943723416476_u64];
_40 = _24.fld0.1 as i128;
match Field::<u16>(Variant(_34.1, 0), 0) {
0 => bb30,
1 => bb2,
2 => bb13,
3 => bb44,
4 => bb41,
5 => bb6,
6 => bb31,
15755 => bb49,
_ => bb12
}
}
bb49 = {
_2 = _24.fld0.0.1 as u32;
_22.2 = _18.2;
_18.0 = _18.1;
_1 = core::ptr::addr_of!((*_5));
_26.0 = &_34.0.0;
_8 = _14 as u32;
_36 = Field::<u16>(Variant(_34.1, 0), 0) as f32;
_22.1 = !_49;
(*RET) = Move(_1);
_18.2 = (_41,);
_24.fld3 = core::ptr::addr_of_mut!(_22.2.0);
_43 = _35 ^ _35;
_47 = _36 as f64;
_18.3 = _24.fld0.1 as i128;
_33 = _3 | _6;
_44 = _3 != _33;
_11 = _38;
(*RET) = core::ptr::addr_of!(_11);
_47 = _11 as f64;
Goto(bb50)
}
bb50 = {
Call(_58 = dump_var(Move(_43), Move(_19), Move(_11), Move(_28)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_58 = dump_var(Move(_44), Move(_35), Move(_41), Move(_20)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_58 = dump_var(Move(_18), Move(_2), Move(_16), Move(_48)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_58 = dump_var(Move(_49), Move(_37), Move(_21), Move(_15)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: *const u32,mut _2: u32,mut _3: u32,mut _4: *const u32,mut _5: u32,mut _6: u32,mut _7: u32,mut _8: u32,mut _9: u32) -> u32 {
mir! {
type RET = u32;
let _10: *mut f64;
let _11: [i128; 3];
let _12: char;
let _13: (f64,);
let _14: [isize; 6];
let _15: i128;
let _16: *const *const u32;
let _17: f64;
let _18: ();
let _19: ();
{
RET = !_3;
RET = 80763885595537264521761264980460164036_u128 as u32;
_3 = 3388040824206078648_i64 as u32;
_8 = 13432712091263326237_u64 as u32;
RET = _2 & _2;
RET = _5 + _8;
_6 = 35345_u16 as u32;
_6 = _9;
_3 = 5_u8 as u32;
_9 = RET;
_3 = 7478772063329154585_i64 as u32;
_4 = core::ptr::addr_of!(_2);
(*_4) = _5;
_6 = !_8;
_7 = (*_4) << (*_4);
Call((*_4) = fn12(Move(_1)), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
(*_4) = _9;
(*_4) = _8 >> _9;
_8 = (*_4) << (*_4);
(*_4) = !RET;
(*_4) = _7 * _8;
Goto(bb2)
}
bb2 = {
(*_4) = _8;
_4 = core::ptr::addr_of!(_5);
(*_4) = _8 * _2;
(*_4) = !_8;
(*_4) = _9 + _7;
(*_4) = 48940_u16 as u32;
Goto(bb3)
}
bb3 = {
(*_4) = _8 >> _8;
_7 = (*_4) | (*_4);
(*_4) = !RET;
RET = !_7;
_4 = core::ptr::addr_of!(_7);
_11 = [(-41124761221952711379450318867159077244_i128),(-18846721237448522483175547330043704107_i128),(-162804742013108884782947249425427997232_i128)];
(*_4) = _6 >> RET;
_8 = (*_4) << (*_4);
(*_4) = _8 ^ RET;
_1 = core::ptr::addr_of!((*_4));
(*_1) = !RET;
(*_4) = !_8;
_7 = _8 & RET;
(*_4) = !_8;
_14 = [(-82_isize),55_isize,(-23_isize),(-9223372036854775808_isize),(-9223372036854775808_isize),(-9223372036854775808_isize)];
_12 = '\u{6725b}';
_14 = [(-9223372036854775808_isize),(-73_isize),9223372036854775807_isize,124_isize,(-9223372036854775808_isize),88_isize];
(*_4) = _8;
_3 = (*_4);
(*_4) = !_3;
(*_4) = _8;
_3 = !(*_4);
(*_4) = _3 - _3;
(*_4) = RET;
_12 = '\u{2afc}';
_13.0 = (-9223372036854775808_isize) as f64;
(*_4) = 751419942_i32 as u32;
Goto(bb4)
}
bb4 = {
Call(_18 = dump_var(Move(_2), Move(_5), Move(_3), Move(_12)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
Call(_18 = dump_var(Move(_6), _19, _19, _19), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: *const u32) -> u32 {
mir! {
type RET = u32;
let _2: i8;
let _3: u16;
let _4: [u64; 4];
let _5: &'static *mut f64;
let _6: &'static i32;
let _7: char;
let _8: *mut char;
let _9: *mut u32;
let _10: usize;
let _11: u16;
let _12: *mut u128;
let _13: isize;
let _14: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _15: f64;
let _16: u64;
let _17: f32;
let _18: i64;
let _19: *const &'static mut usize;
let _20: [i8; 5];
let _21: isize;
let _22: i16;
let _23: &'static *mut f64;
let _24: f64;
let _25: f32;
let _26: u8;
let _27: (*mut char, i128, (u128,));
let _28: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _29: u128;
let _30: *mut u128;
let _31: f64;
let _32: &'static mut char;
let _33: usize;
let _34: u64;
let _35: f64;
let _36: char;
let _37: (isize,);
let _38: f32;
let _39: [i128; 3];
let _40: [isize; 1];
let _41: *const f64;
let _42: &'static *mut f64;
let _43: *mut ([isize; 6], (isize, u8, i64));
let _44: u128;
let _45: *mut ([isize; 6], (isize, u8, i64));
let _46: (isize, u8, i64);
let _47: bool;
let _48: [usize; 6];
let _49: u16;
let _50: *mut u16;
let _51: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _52: isize;
let _53: char;
let _54: isize;
let _55: [char; 8];
let _56: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _57: u8;
let _58: u32;
let _59: f32;
let _60: char;
let _61: bool;
let _62: &'static i128;
let _63: [i8; 5];
let _64: *mut u32;
let _65: Adt67;
let _66: *mut u128;
let _67: i8;
let _68: ();
let _69: ();
{
_1 = core::ptr::addr_of!(RET);
(*_1) = 2979776878_u32 * 2756413923_u32;
(*_1) = 3372265265_u32;
RET = 1273907763_u32 ^ 1731175749_u32;
(*_1) = 3339690976_u32 + 920305860_u32;
(*_1) = 3007566818_u32 >> 127_u8;
(*_1) = !1255876796_u32;
(*_1) = 1291832308_u32;
(*_1) = 1828307982_u32 | 38591846_u32;
(*_1) = 5385534814673415821_u64 as u32;
_2 = (-45_i8) << (*_1);
_1 = core::ptr::addr_of!((*_1));
Call((*_1) = fn13(), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
(*_1) = 4193406726_u32 + 571101285_u32;
(*_1) = 3371954552_u32;
(*_1) = 3917963927_u32 >> _2;
(*_1) = 4189105647_u32;
(*_1) = !2646136688_u32;
(*_1) = 2422501535_u32 - 1024832571_u32;
(*_1) = 3029029599_u32 >> _2;
(*_1) = 1660002465_u32 & 1997023280_u32;
(*_1) = (-1021479477574385636_i64) as u32;
(*_1) = 2616334297_u32 >> _2;
(*_1) = 1916871483_u32 & 3404570222_u32;
(*_1) = 9223372036854775807_isize as u32;
(*_1) = 649191894_u32 >> _2;
(*_1) = 3603661540_u32;
(*_1) = 16911_i16 as u32;
(*_1) = 4038987217_u32 | 2316571152_u32;
(*_1) = !891573974_u32;
(*_1) = 1636879155_u32;
Goto(bb2)
}
bb2 = {
(*_1) = 3003178368_u32;
match (*_1) {
0 => bb3,
1 => bb4,
3003178368 => bb6,
_ => bb5
}
}
bb3 = {
(*_1) = 4193406726_u32 + 571101285_u32;
(*_1) = 3371954552_u32;
(*_1) = 3917963927_u32 >> _2;
(*_1) = 4189105647_u32;
(*_1) = !2646136688_u32;
(*_1) = 2422501535_u32 - 1024832571_u32;
(*_1) = 3029029599_u32 >> _2;
(*_1) = 1660002465_u32 & 1997023280_u32;
(*_1) = (-1021479477574385636_i64) as u32;
(*_1) = 2616334297_u32 >> _2;
(*_1) = 1916871483_u32 & 3404570222_u32;
(*_1) = 9223372036854775807_isize as u32;
(*_1) = 649191894_u32 >> _2;
(*_1) = 3603661540_u32;
(*_1) = 16911_i16 as u32;
(*_1) = 4038987217_u32 | 2316571152_u32;
(*_1) = !891573974_u32;
(*_1) = 1636879155_u32;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
(*_1) = 288137205_u32 - 4202309234_u32;
(*_1) = !191764691_u32;
Goto(bb7)
}
bb7 = {
(*_1) = 14070_u16 as u32;
(*_1) = 2929726612_u32;
(*_1) = !392428483_u32;
(*_1) = 2765141452_u32 - 4047054164_u32;
(*_1) = 245455780_u32 << _2;
_2 = 84_i8 | 117_i8;
(*_1) = (-1646776300_i32) as u32;
(*_1) = 3183732879_u32 >> _2;
(*_1) = !268711475_u32;
_3 = 57659_u16 | 5003_u16;
_4 = [5313433204334926427_u64,9447190732853635171_u64,14257793898378006322_u64,16527250578177457191_u64];
_9 = core::ptr::addr_of_mut!((*_1));
Call((*_9) = core::intrinsics::bswap(2631988530_u32), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
(*_9) = !2733345866_u32;
_11 = 7423_i16 as u16;
RET = '\u{bbde3}' as u32;
(*_1) = 1717303670_u32;
_3 = _11;
(*_1) = 3523618865_u32 << _2;
(*_1) = 175_u8 as u32;
(*_1) = 991220338_u32;
(*_1) = 2766617897_u32 | 1511990023_u32;
(*_1) = 2560123121_u32;
match (*_1) {
0 => bb1,
1 => bb6,
2 => bb3,
3 => bb5,
4 => bb9,
5 => bb10,
6 => bb11,
2560123121 => bb13,
_ => bb12
}
}
bb9 = {
(*_1) = 14070_u16 as u32;
(*_1) = 2929726612_u32;
(*_1) = !392428483_u32;
(*_1) = 2765141452_u32 - 4047054164_u32;
(*_1) = 245455780_u32 << _2;
_2 = 84_i8 | 117_i8;
(*_1) = (-1646776300_i32) as u32;
(*_1) = 3183732879_u32 >> _2;
(*_1) = !268711475_u32;
_3 = 57659_u16 | 5003_u16;
_4 = [5313433204334926427_u64,9447190732853635171_u64,14257793898378006322_u64,16527250578177457191_u64];
_9 = core::ptr::addr_of_mut!((*_1));
Call((*_9) = core::intrinsics::bswap(2631988530_u32), ReturnTo(bb8), UnwindUnreachable())
}
bb10 = {
(*_1) = 4193406726_u32 + 571101285_u32;
(*_1) = 3371954552_u32;
(*_1) = 3917963927_u32 >> _2;
(*_1) = 4189105647_u32;
(*_1) = !2646136688_u32;
(*_1) = 2422501535_u32 - 1024832571_u32;
(*_1) = 3029029599_u32 >> _2;
(*_1) = 1660002465_u32 & 1997023280_u32;
(*_1) = (-1021479477574385636_i64) as u32;
(*_1) = 2616334297_u32 >> _2;
(*_1) = 1916871483_u32 & 3404570222_u32;
(*_1) = 9223372036854775807_isize as u32;
(*_1) = 649191894_u32 >> _2;
(*_1) = 3603661540_u32;
(*_1) = 16911_i16 as u32;
(*_1) = 4038987217_u32 | 2316571152_u32;
(*_1) = !891573974_u32;
(*_1) = 1636879155_u32;
Goto(bb2)
}
bb11 = {
Return()
}
bb12 = {
(*_1) = 4193406726_u32 + 571101285_u32;
(*_1) = 3371954552_u32;
(*_1) = 3917963927_u32 >> _2;
(*_1) = 4189105647_u32;
(*_1) = !2646136688_u32;
(*_1) = 2422501535_u32 - 1024832571_u32;
(*_1) = 3029029599_u32 >> _2;
(*_1) = 1660002465_u32 & 1997023280_u32;
(*_1) = (-1021479477574385636_i64) as u32;
(*_1) = 2616334297_u32 >> _2;
(*_1) = 1916871483_u32 & 3404570222_u32;
(*_1) = 9223372036854775807_isize as u32;
(*_1) = 649191894_u32 >> _2;
(*_1) = 3603661540_u32;
(*_1) = 16911_i16 as u32;
(*_1) = 4038987217_u32 | 2316571152_u32;
(*_1) = !891573974_u32;
(*_1) = 1636879155_u32;
Goto(bb2)
}
bb13 = {
(*_1) = 123504610_i32 as u32;
(*_1) = 76410419_u32 & 1389536088_u32;
Goto(bb14)
}
bb14 = {
(*_1) = 1821094599_u32 << _11;
RET = 2077788451_u32 | 2079580678_u32;
_8 = core::ptr::addr_of_mut!(_7);
(*_8) = '\u{10a460}';
Goto(bb15)
}
bb15 = {
_13 = 9223372036854775807_isize - (-9223372036854775808_isize);
(*_8) = '\u{3a779}';
(*_1) = 744126923_u32;
(*_8) = '\u{3690e}';
(*_1) = 1028985731_u32 & 2555327023_u32;
(*_1) = !2453266329_u32;
(*_8) = '\u{1b0dd}';
(*_8) = '\u{c7147}';
_10 = !13247204161674098596_usize;
(*_8) = '\u{101d61}';
(*_1) = !4202280678_u32;
(*_8) = '\u{49fc3}';
Goto(bb16)
}
bb16 = {
(*_1) = !3602163582_u32;
(*_8) = '\u{35dbc}';
RET = 14997771_u32 - 2066707842_u32;
_11 = _3;
(*_8) = '\u{108eff}';
(*_1) = 216_u8 as u32;
RET = 3358178694_u32 << _2;
_15 = _13 as f64;
_1 = core::ptr::addr_of!((*_1));
(*_1) = 1380618945_u32 | 2597128119_u32;
(*_1) = 2872539818_u32 | 2641640674_u32;
(*_8) = '\u{aa3b7}';
_7 = '\u{c1fcb}';
(*_8) = '\u{9fa51}';
(*_8) = '\u{9cd6e}';
_9 = core::ptr::addr_of_mut!((*_1));
_17 = 5491266118022780692_i64 as f32;
(*_8) = '\u{c9830}';
(*_9) = 3742041343_u32;
(*_8) = '\u{49ac9}';
(*_9) = _3 as u32;
(*_8) = '\u{ceecc}';
_7 = '\u{a8a7d}';
(*_9) = 189142972_u32 & 900879443_u32;
(*_9) = !1966093374_u32;
(*_8) = '\u{22daf}';
_17 = 753810824_i32 as f32;
Goto(bb17)
}
bb17 = {
(*_1) = 2684115224_u32 + 2967878555_u32;
_9 = core::ptr::addr_of_mut!((*_1));
(*_9) = 3847479464_u32 & 2159709496_u32;
(*_8) = '\u{77698}';
(*_1) = 2106758539_u32 - 1173027352_u32;
(*_1) = 1531658379_u32 ^ 2744962845_u32;
(*_8) = '\u{56930}';
_4 = [17912182992048349111_u64,4082337315741180691_u64,17276288032014189725_u64,12335275278377238099_u64];
(*_1) = 1009585571_u32 >> _13;
_16 = 14664480173910058039_u64;
(*_8) = '\u{6f31}';
(*_8) = '\u{1f0d4}';
(*_8) = '\u{890df}';
(*_8) = '\u{d961e}';
(*_8) = '\u{279ff}';
(*_8) = '\u{7e8ba}';
_4 = [_16,_16,_16,_16];
(*_8) = '\u{f7966}';
(*_8) = '\u{43cfb}';
_15 = _2 as f64;
(*_8) = '\u{108c17}';
(*_8) = '\u{e8e4d}';
_10 = 1_usize;
(*_1) = 4150401429_u32 ^ 3639946439_u32;
Goto(bb18)
}
bb18 = {
(*_8) = '\u{595ee}';
(*_8) = '\u{946fd}';
(*_1) = _10 as u32;
(*_8) = '\u{77532}';
_15 = (-4972700836928463545_i64) as f64;
(*_1) = 1363711172_u32 | 1722345889_u32;
(*_1) = 768059032_u32 - 681699565_u32;
(*_8) = '\u{654a}';
_11 = _3 >> (*_1);
Goto(bb19)
}
bb19 = {
_25 = _10 as f32;
_21 = -_13;
(*_1) = !2560855015_u32;
(*_8) = '\u{b1c64}';
_10 = 10429638827392415053_usize & 17975846366544632207_usize;
Goto(bb20)
}
bb20 = {
(*_8) = '\u{ec374}';
_27.1 = !124140440713738023826901063219425313249_i128;
_22 = (-3155827532476379008_i64) as i16;
(*_8) = '\u{105d90}';
_8 = core::ptr::addr_of_mut!((*_8));
(*_1) = 3372313964_u32 * 2479016318_u32;
_27.0 = Move(_8);
_26 = _17 as u8;
_20 = [_2,_2,_2,_2,_2];
_27.2 = (41127411522843842570448778568328233494_u128,);
(*_1) = _2 as u32;
_25 = _17 + _17;
(*_1) = 2461284412_u32 << _27.1;
(*_1) = 4195222866_u32 * 2760695025_u32;
_22 = 22194_i16;
_24 = _15 * _15;
_18 = !(-8166732087710551670_i64);
(*_1) = 3681578866_u32;
_27.2 = (80577852377144649344802837051801182195_u128,);
(*_1) = 3876808713_u32 >> _21;
(*_1) = false as u32;
_20 = [_2,_2,_2,_2,_2];
(*_1) = 2963786071_u32;
_15 = -_24;
_27.2 = (191199435675553927797688333519233024798_u128,);
Goto(bb21)
}
bb21 = {
(*_1) = !4134445895_u32;
Goto(bb22)
}
bb22 = {
_20 = [_2,_2,_2,_2,_2];
RET = 2830120955_u32 ^ 400927361_u32;
_16 = 11275088301035913933_u64;
_30 = core::ptr::addr_of_mut!(_29);
_4 = [_16,_16,_16,_16];
_10 = 0_usize;
(*_30) = _11 as u128;
(*_30) = false as u128;
(*_1) = 4035773215_u32 * 1888881185_u32;
(*_30) = (-388799710_i32) as u128;
_31 = -_24;
(*_30) = !_27.2.0;
Call((*_1) = core::intrinsics::bswap(2034057116_u32), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
(*_1) = _2 as u32;
(*_1) = 1348926754_u32 | 3396121687_u32;
_27.0 = core::ptr::addr_of_mut!(_7);
_8 = core::ptr::addr_of_mut!(_7);
(*_8) = '\u{8e481}';
(*_8) = '\u{9f5d7}';
(*_8) = '\u{4de48}';
_15 = _31 + _31;
(*_30) = _7 as u128;
(*_1) = 3516117371_u32;
(*_8) = '\u{d9e6b}';
_8 = Move(_27.0);
(*_30) = _27.2.0 | _27.2.0;
(*_1) = 372499105_u32 * 1395240787_u32;
(*_1) = 3019607491_u32;
Goto(bb24)
}
bb24 = {
_21 = _13 | _13;
(*_1) = 2034375453_u32 >> _26;
_13 = _21;
match _10 {
1 => bb21,
2 => bb12,
3 => bb20,
4 => bb9,
5 => bb6,
6 => bb15,
0 => bb26,
_ => bb25
}
}
bb25 = {
(*_1) = !4134445895_u32;
Goto(bb22)
}
bb26 = {
(*_1) = !3366924709_u32;
_29 = _27.2.0;
(*_1) = 1547708478_u32;
_36 = _7;
(*_30) = _16 as u128;
_34 = _16 - _16;
(*_1) = 2419560741_u32;
(*_30) = _27.2.0 * _27.2.0;
match (*_1) {
0 => bb20,
1 => bb27,
2419560741 => bb29,
_ => bb28
}
}
bb27 = {
(*_1) = 2684115224_u32 + 2967878555_u32;
_9 = core::ptr::addr_of_mut!((*_1));
(*_9) = 3847479464_u32 & 2159709496_u32;
(*_8) = '\u{77698}';
(*_1) = 2106758539_u32 - 1173027352_u32;
(*_1) = 1531658379_u32 ^ 2744962845_u32;
(*_8) = '\u{56930}';
_4 = [17912182992048349111_u64,4082337315741180691_u64,17276288032014189725_u64,12335275278377238099_u64];
(*_1) = 1009585571_u32 >> _13;
_16 = 14664480173910058039_u64;
(*_8) = '\u{6f31}';
(*_8) = '\u{1f0d4}';
(*_8) = '\u{890df}';
(*_8) = '\u{d961e}';
(*_8) = '\u{279ff}';
(*_8) = '\u{7e8ba}';
_4 = [_16,_16,_16,_16];
(*_8) = '\u{f7966}';
(*_8) = '\u{43cfb}';
_15 = _2 as f64;
(*_8) = '\u{108c17}';
(*_8) = '\u{e8e4d}';
_10 = 1_usize;
(*_1) = 4150401429_u32 ^ 3639946439_u32;
Goto(bb18)
}
bb28 = {
(*_1) = 4193406726_u32 + 571101285_u32;
(*_1) = 3371954552_u32;
(*_1) = 3917963927_u32 >> _2;
(*_1) = 4189105647_u32;
(*_1) = !2646136688_u32;
(*_1) = 2422501535_u32 - 1024832571_u32;
(*_1) = 3029029599_u32 >> _2;
(*_1) = 1660002465_u32 & 1997023280_u32;
(*_1) = (-1021479477574385636_i64) as u32;
(*_1) = 2616334297_u32 >> _2;
(*_1) = 1916871483_u32 & 3404570222_u32;
(*_1) = 9223372036854775807_isize as u32;
(*_1) = 649191894_u32 >> _2;
(*_1) = 3603661540_u32;
(*_1) = 16911_i16 as u32;
(*_1) = 4038987217_u32 | 2316571152_u32;
(*_1) = !891573974_u32;
(*_1) = 1636879155_u32;
Goto(bb2)
}
bb29 = {
(*_1) = 3956308339_u32;
(*_1) = 1331337305_u32 >> _34;
_37.0 = _21;
_30 = core::ptr::addr_of_mut!((*_30));
(*_1) = 3319989940_u32;
_35 = _15 + _24;
(*_1) = 2538923620_u32 + 835266596_u32;
(*_1) = 3325785232_u32 << _13;
(*_30) = !_27.2.0;
_25 = _17;
(*_1) = _15 as u32;
(*_1) = 750321520_i32 as u32;
_29 = _27.2.0 - _27.2.0;
_2 = true as i8;
(*_1) = 4252161376_u32 * 3301263526_u32;
(*_1) = 3761613112_u32 + 3289037271_u32;
_29 = _25 as u128;
match _27.2.0 {
0 => bb9,
1 => bb30,
2 => bb31,
191199435675553927797688333519233024798 => bb33,
_ => bb32
}
}
bb30 = {
(*_1) = !4134445895_u32;
Goto(bb22)
}
bb31 = {
Return()
}
bb32 = {
(*_1) = !3366924709_u32;
_29 = _27.2.0;
(*_1) = 1547708478_u32;
_36 = _7;
(*_30) = _16 as u128;
_34 = _16 - _16;
(*_1) = 2419560741_u32;
(*_30) = _27.2.0 * _27.2.0;
match (*_1) {
0 => bb20,
1 => bb27,
2419560741 => bb29,
_ => bb28
}
}
bb33 = {
_7 = _36;
(*_30) = !_27.2.0;
_33 = _10 * _10;
_16 = _34;
(*_1) = _36 as u32;
(*_30) = !_27.2.0;
_10 = _18 as usize;
_1 = core::ptr::addr_of!((*_1));
_22 = _17 as i16;
(*_30) = _27.2.0 & _27.2.0;
_26 = 37_u8 ^ 149_u8;
(*_30) = _37.0 as u128;
(*_1) = !3587095293_u32;
_17 = _27.1 as f32;
(*_1) = 4117454140_u32;
(*_30) = _27.2.0 | _27.2.0;
_11 = !_3;
_12 = core::ptr::addr_of_mut!((*_30));
(*_30) = !_27.2.0;
(*_30) = _21 as u128;
Goto(bb34)
}
bb34 = {
(*_30) = _27.2.0 >> (*_1);
(*_30) = _27.2.0 % _27.2.0;
_39 = [_27.1,_27.1,_27.1];
_31 = -_15;
_15 = _24;
_35 = _15;
_27.1 = (*_30) as i128;
(*_30) = _27.2.0;
_38 = _17 - _25;
_33 = _10;
_7 = _36;
_20 = [_2,_2,_2,_2,_2];
_24 = _35;
_35 = _24 - _31;
_39 = [_27.1,_27.1,_27.1];
_7 = _36;
_22 = (-23225_i16) * (-8607_i16);
(*_1) = !1032364775_u32;
(*_1) = 859567837_u32 - 1279799360_u32;
(*_1) = _10 as u32;
_15 = _35 * _31;
(*_1) = 2658024003_u32;
Goto(bb35)
}
bb35 = {
_27.2 = ((*_30),);
_22 = (-14318_i16) + 15667_i16;
(*_1) = 3105608338_u32 + 3431842725_u32;
_41 = core::ptr::addr_of!(_35);
_40 = [_13];
(*_41) = _16 as f64;
_10 = _33 << (*_1);
(*_41) = _31;
_21 = _16 as isize;
(*_30) = !_27.2.0;
match _27.2.0 {
0 => bb36,
1 => bb37,
2 => bb38,
191199435675553927797688333519233024798 => bb40,
_ => bb39
}
}
bb36 = {
_13 = 9223372036854775807_isize - (-9223372036854775808_isize);
(*_8) = '\u{3a779}';
(*_1) = 744126923_u32;
(*_8) = '\u{3690e}';
(*_1) = 1028985731_u32 & 2555327023_u32;
(*_1) = !2453266329_u32;
(*_8) = '\u{1b0dd}';
(*_8) = '\u{c7147}';
_10 = !13247204161674098596_usize;
(*_8) = '\u{101d61}';
(*_1) = !4202280678_u32;
(*_8) = '\u{49fc3}';
Goto(bb16)
}
bb37 = {
_20 = [_2,_2,_2,_2,_2];
RET = 2830120955_u32 ^ 400927361_u32;
_16 = 11275088301035913933_u64;
_30 = core::ptr::addr_of_mut!(_29);
_4 = [_16,_16,_16,_16];
_10 = 0_usize;
(*_30) = _11 as u128;
(*_30) = false as u128;
(*_1) = 4035773215_u32 * 1888881185_u32;
(*_30) = (-388799710_i32) as u128;
_31 = -_24;
(*_30) = !_27.2.0;
Call((*_1) = core::intrinsics::bswap(2034057116_u32), ReturnTo(bb23), UnwindUnreachable())
}
bb38 = {
Return()
}
bb39 = {
_25 = _10 as f32;
_21 = -_13;
(*_1) = !2560855015_u32;
(*_8) = '\u{b1c64}';
_10 = 10429638827392415053_usize & 17975846366544632207_usize;
Goto(bb20)
}
bb40 = {
(*_41) = -_15;
(*_1) = !1182334009_u32;
_11 = _3 << _34;
(*_41) = _15 * _31;
(*_30) = _27.2.0 * _27.2.0;
(*_30) = !_27.2.0;
_10 = _33 * _33;
_9 = core::ptr::addr_of_mut!((*_1));
(*_41) = _31 + _15;
(*_1) = !933351069_u32;
(*_30) = _27.2.0;
(*_1) = 1279683696_u32 & 1471386524_u32;
(*_30) = _37.0 as u128;
_29 = !_27.2.0;
_29 = RET as u128;
(*_1) = _26 as u32;
(*_41) = _31 + _31;
(*_41) = _15 * _15;
_39 = [_27.1,_27.1,_27.1];
(*_41) = _15 - _15;
(*_41) = -_15;
Goto(bb41)
}
bb41 = {
(*_41) = _31 * _15;
_16 = _34 ^ _34;
(*_30) = _27.2.0;
(*_41) = _10 as f64;
_46.2 = !_18;
_38 = _25 * _25;
_35 = _26 as f64;
(*_41) = _33 as f64;
_27.2.0 = (*_1) as u128;
(*_1) = _46.2 as u32;
(*_41) = _15;
_16 = (*_41) as u64;
_49 = _11;
RET = 67176881_u32 << (*_30);
_4 = [_16,_16,_34,_16];
_2 = 107_i8;
_3 = _11 * _11;
(*_41) = -_31;
(*_30) = _27.2.0 >> (*_1);
_44 = (*_30) ^ (*_30);
_46.0 = _37.0;
match _2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb20,
4 => bb24,
5 => bb22,
107 => bb42,
_ => bb39
}
}
bb42 = {
_46.0 = _37.0 | _37.0;
_47 = !false;
(*_1) = 2332507555_u32;
(*_30) = !_44;
(*_30) = _17 as u128;
(*_1) = !1280350099_u32;
(*_30) = _44;
_34 = !_16;
_27.0 = core::ptr::addr_of_mut!(_7);
(*_30) = _34 as u128;
_34 = _16 ^ _16;
(*_1) = _22 as u32;
(*_1) = 3760283155_u32;
_50 = core::ptr::addr_of_mut!(_3);
_37.0 = (*_30) as isize;
(*_41) = RET as f64;
_48 = [_10,_10,_33,_10,_33,_10];
(*_41) = _31 + _15;
(*_41) = _15;
_18 = _46.2;
(*_1) = 1813948111_u32;
(*_1) = !676163949_u32;
_40 = [_37.0];
Goto(bb43)
}
bb43 = {
(*_1) = 1120547328_u32;
_37 = (_21,);
(*_30) = _44 + _44;
(*_50) = !_49;
_12 = Move(_30);
_46.1 = _26;
match (*_1) {
0 => bb5,
1 => bb15,
2 => bb44,
3 => bb45,
1120547328 => bb47,
_ => bb46
}
}
bb44 = {
(*_8) = '\u{595ee}';
(*_8) = '\u{946fd}';
(*_1) = _10 as u32;
(*_8) = '\u{77532}';
_15 = (-4972700836928463545_i64) as f64;
(*_1) = 1363711172_u32 | 1722345889_u32;
(*_1) = 768059032_u32 - 681699565_u32;
(*_8) = '\u{654a}';
_11 = _3 >> (*_1);
Goto(bb19)
}
bb45 = {
_27.2 = ((*_30),);
_22 = (-14318_i16) + 15667_i16;
(*_1) = 3105608338_u32 + 3431842725_u32;
_41 = core::ptr::addr_of!(_35);
_40 = [_13];
(*_41) = _16 as f64;
_10 = _33 << (*_1);
(*_41) = _31;
_21 = _16 as isize;
(*_30) = !_27.2.0;
match _27.2.0 {
0 => bb36,
1 => bb37,
2 => bb38,
191199435675553927797688333519233024798 => bb40,
_ => bb39
}
}
bb46 = {
_25 = _10 as f32;
_21 = -_13;
(*_1) = !2560855015_u32;
(*_8) = '\u{b1c64}';
_10 = 10429638827392415053_usize & 17975846366544632207_usize;
Goto(bb20)
}
bb47 = {
(*_50) = _49;
_11 = (*_50) >> _29;
_50 = core::ptr::addr_of_mut!((*_50));
Goto(bb48)
}
bb48 = {
_11 = !(*_50);
_37 = (_13,);
(*_50) = _29 as u16;
(*_50) = _2 as u16;
_10 = _33;
_60 = _36;
_21 = _13 << _29;
(*_41) = _15 - _15;
_53 = _60;
_27.1 = -84141310929943444470455019910077633148_i128;
_38 = _25;
(*_41) = _27.1 as f64;
_26 = _7 as u8;
_62 = &_27.1;
_31 = _15 - _15;
_35 = (*_50) as f64;
(*_50) = _46.2 as u16;
Goto(bb49)
}
bb49 = {
_50 = core::ptr::addr_of_mut!((*_50));
(*_41) = _46.2 as f64;
_53 = _7;
_61 = _47 | _47;
(*_1) = 241368506_u32;
(*_41) = _31 + _31;
_44 = _29 & _29;
(*_50) = _22 as u16;
_52 = _21;
_64 = Move(_9);
_34 = _16 & _16;
(*_50) = _11;
(*_41) = _34 as f64;
(*_50) = _49 >> _44;
_52 = _46.0 | _21;
(*_41) = _31 * _31;
(*_50) = _49 - _49;
(*_1) = 134455192_u32 << _22;
_44 = _29;
_24 = -(*_41);
_38 = _25;
_9 = core::ptr::addr_of_mut!((*_1));
_63 = [_2,_2,_2,_2,_2];
_61 = _47;
Goto(bb50)
}
bb50 = {
Call(_68 = dump_var(Move(_7), Move(_47), Move(_60), Move(_22)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_68 = dump_var(Move(_39), Move(_4), Move(_3), Move(_20)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_68 = dump_var(Move(_13), Move(_16), Move(_63), Move(_40)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_68 = dump_var(Move(_46), Move(_48), Move(_10), _69), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13() -> u32 {
mir! {
type RET = u32;
let _1: u64;
let _2: f32;
let _3: &'static i128;
let _4: usize;
let _5: u64;
let _6: &'static char;
let _7: *mut u16;
let _8: bool;
let _9: *mut u16;
let _10: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _11: usize;
let _12: ();
let _13: ();
{
RET = 132198249_u32;
Goto(bb1)
}
bb1 = {
RET = (-126621336613418470111237050214476408813_i128) as u32;
RET = 3198242183_u32 >> 4235434096_u32;
RET = 4160326721_u32 & 2524721471_u32;
RET = 3882996883_u32 << 164756145065673099033254156631055641030_i128;
_1 = 10661098614570999085_u64 << RET;
_1 = !12928338140518569331_u64;
_1 = 14786564122086404725_u64 * 9191806054113743111_u64;
_1 = 2737007717682686510_u64 | 5285514565303572740_u64;
_2 = 42073826_i32 as f32;
_2 = 113_u8 as f32;
RET = !2228626164_u32;
_4 = '\u{6c545}' as usize;
_5 = !_1;
Call(_5 = core::intrinsics::bswap(_1), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
RET = 3986667608_u32;
_5 = !_1;
RET = 2677025304_u32 & 965682053_u32;
_4 = !3_usize;
_1 = _5 | _5;
_5 = _1 + _1;
RET = 2139519873_u32 ^ 278069030_u32;
_1 = _5 & _5;
_1 = _5 ^ _5;
_5 = 6856115653670721730_i64 as u64;
_5 = _1 >> _1;
_5 = _1 >> _1;
RET = 509715411_u32 * 4131084961_u32;
_5 = _1;
_2 = 71_i8 as f32;
_1 = 29273_u16 as u64;
Goto(bb3)
}
bb3 = {
_2 = _4 as f32;
_2 = 45674_u16 as f32;
_1 = _5 << _4;
RET = 3156718596_u32 * 527668552_u32;
RET = !1620930724_u32;
RET = 1683596766_u32 * 4202118815_u32;
_1 = _5 << _5;
_1 = _5 + _5;
_5 = RET as u64;
RET = 2166835918_u32 | 492904787_u32;
RET = !1797727768_u32;
_5 = _1 << _1;
_2 = _4 as f32;
_1 = !_5;
_5 = !_1;
_5 = _1 >> _1;
_4 = 14326179991357321826_usize << _5;
RET = (-114184479651446388940422995483821818549_i128) as u32;
Call(_2 = fn14(_1, RET, _4, _1, _1, _4, _5, _5, _1, _5), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_2 = _4 as f32;
_8 = true;
Goto(bb5)
}
bb5 = {
RET = 2645809349_u32 ^ 3945651751_u32;
_8 = false & true;
_5 = _1 + _1;
_5 = _1 >> RET;
_1 = !_5;
_1 = !_5;
Call(_9 = fn15(_8, _2, _8, _5, RET, _8, _5), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_7 = Move(_9);
RET = 64632039_u32 * 1583557815_u32;
_5 = _1 - _1;
_8 = _5 != _1;
_4 = 15431590750914219466_usize + 14217490259965166671_usize;
RET = 3374526694_u32 << _5;
_1 = _5 ^ _5;
_8 = false;
_8 = _5 >= _5;
_8 = true | true;
_8 = true;
_1 = _5 * _5;
_9 = Move(_7);
_1 = 19461_u16 as u64;
_5 = _4 as u64;
_4 = _5 as usize;
_1 = _5 * _5;
_8 = !true;
_11 = _4;
Goto(bb7)
}
bb7 = {
Call(_12 = dump_var(Move(_4), Move(_5), _13, _13), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: u64,mut _2: u32,mut _3: usize,mut _4: u64,mut _5: u64,mut _6: usize,mut _7: u64,mut _8: u64,mut _9: u64,mut _10: u64) -> f32 {
mir! {
type RET = f32;
let _11: f64;
let _12: &'static i32;
let _13: &'static i128;
let _14: *const f64;
let _15: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _16: (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _17: Adt53;
let _18: isize;
let _19: [i128; 4];
let _20: bool;
let _21: &'static i128;
let _22: *mut &'static i128;
let _23: f64;
let _24: isize;
let _25: f64;
let _26: *mut char;
let _27: *mut char;
let _28: Adt67;
let _29: ([i8; 3], [i8; 3], (u128,), i128);
let _30: i32;
let _31: isize;
let _32: ();
let _33: ();
{
_3 = _6 ^ _6;
RET = (-3885379404646850020_i64) as f32;
_2 = 2537858837_u32 & 3539663846_u32;
_7 = !_8;
_5 = !_4;
_10 = _9;
_9 = _8 * _7;
_9 = 250_u8 as u64;
_10 = _4;
Goto(bb1)
}
bb1 = {
_7 = !_10;
_1 = !_7;
_9 = _5 + _5;
_6 = _3;
_9 = 119_u8 as u64;
_2 = 3907319613_u32 | 773339958_u32;
_2 = 218762736_u32 ^ 3347129358_u32;
RET = 239297696615178543242573638808493694903_u128 as f32;
_2 = 39727_u16 as u32;
_1 = 6678281439505544822_i64 as u64;
_10 = _4;
_6 = _3 | _3;
_6 = '\u{fbc52}' as usize;
_11 = (-48_i8) as f64;
_7 = _8 | _4;
_1 = _8;
_11 = 53762531_i32 as f64;
_7 = 1226722645616047645_i64 as u64;
_14 = core::ptr::addr_of!(_11);
_5 = _10 - _4;
_6 = 242_u8 as usize;
(*_14) = _2 as f64;
Goto(bb2)
}
bb2 = {
(*_14) = (-1011900487057193355_i64) as f64;
(*_14) = 5458_u16 as f64;
(*_14) = _2 as f64;
(*_14) = _3 as f64;
(*_14) = (-2005588912_i32) as f64;
_16.0.2.0 = 268855301152330566678896166155309075116_u128;
_16.2 = &mut _6;
_1 = false as u64;
(*_14) = (-54_i8) as f64;
(*_14) = _10 as f64;
_14 = core::ptr::addr_of!(_16.1);
(*_14) = _11 + _11;
_16.0.3 = 50998_u16 as i128;
_17.fld3 = core::ptr::addr_of_mut!(_16.0.2.0);
_16.0.0 = [(-24_i8),100_i8,36_i8];
_16.3 = _5 as i32;
Goto(bb3)
}
bb3 = {
_9 = !_4;
(*_14) = _11 + _11;
match _16.0.2.0 {
0 => bb1,
268855301152330566678896166155309075116 => bb5,
_ => bb4
}
}
bb4 = {
_7 = !_10;
_1 = !_7;
_9 = _5 + _5;
_6 = _3;
_9 = 119_u8 as u64;
_2 = 3907319613_u32 | 773339958_u32;
_2 = 218762736_u32 ^ 3347129358_u32;
RET = 239297696615178543242573638808493694903_u128 as f32;
_2 = 39727_u16 as u32;
_1 = 6678281439505544822_i64 as u64;
_10 = _4;
_6 = _3 | _3;
_6 = '\u{fbc52}' as usize;
_11 = (-48_i8) as f64;
_7 = _8 | _4;
_1 = _8;
_11 = 53762531_i32 as f64;
_7 = 1226722645616047645_i64 as u64;
_14 = core::ptr::addr_of!(_11);
_5 = _10 - _4;
_6 = 242_u8 as usize;
(*_14) = _2 as f64;
Goto(bb2)
}
bb5 = {
_17.fld2 = core::ptr::addr_of!(_18);
(*_14) = -_11;
_2 = !4254635574_u32;
_17.fld0.1 = (-12760_i16) << _9;
_13 = &_16.0.3;
_11 = (*_14) - (*_14);
_16.0.2.0 = 265436795244681711964635001680074650073_u128;
_7 = _10;
(*_14) = _11 + _11;
_17.fld0.0.3 = !52_i8;
(*_14) = _11 + _11;
(*_14) = _11 - _11;
(*_14) = _11 + _11;
_17.fld1 = [_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3];
_17.fld0.0.2 = [(*_13),(*_13),(*_13),(*_13)];
_21 = &(*_13);
_16.0.2.0 = !138417704639735485491562998136150342330_u128;
_1 = (*_14) as u64;
(*_14) = _11 + _11;
(*_14) = _11 * _11;
_22 = core::ptr::addr_of_mut!(_21);
_17.fld0.1 = 3113_i16 * 25059_i16;
Goto(bb6)
}
bb6 = {
(*_14) = _11 * _11;
(*_14) = _11 - _11;
_17.fld0.0.3 = -(-39_i8);
_8 = _2 as u64;
_10 = !_9;
(*_14) = _11 + _11;
_10 = !_7;
(*_22) = Move(_13);
(*_22) = &_16.0.3;
_5 = !_10;
(*_14) = -_11;
_17.fld3 = core::ptr::addr_of_mut!(_16.0.2.0);
_8 = '\u{4054b}' as u64;
_16.1 = _11 + _11;
(*_14) = 4963441962775351235_i64 as f64;
_4 = !_7;
_17.fld2 = core::ptr::addr_of!(_24);
_17.fld0.0.0 = core::ptr::addr_of_mut!(_2);
_12 = &_16.3;
(*_14) = _11 * _11;
Goto(bb7)
}
bb7 = {
_16.0.1 = [_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3];
(*_14) = _11 * _11;
_24 = (-79_isize);
(*_14) = _11;
_19 = [(*_21),(*_21),(*_21),(*_21)];
_22 = core::ptr::addr_of_mut!((*_22));
_17.fld0.0.0 = core::ptr::addr_of_mut!(_2);
_9 = !_10;
_23 = (*_21) as f64;
_18 = RET as isize;
_29.2 = (_16.0.2.0,);
Goto(bb8)
}
bb8 = {
_16.0.0 = [_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3];
_11 = _17.fld0.1 as f64;
_29 = _16.0;
(*_14) = _23 + _11;
RET = (*_12) as f32;
_21 = &_29.3;
_14 = core::ptr::addr_of!(_23);
(*_22) = &_16.0.3;
(*_14) = (*_12) as f64;
_17.fld1 = [_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3,_17.fld0.0.3];
_16.0 = (_29.0, _29.1, _29.2, _29.3);
Goto(bb9)
}
bb9 = {
Call(_32 = dump_var(Move(_10), Move(_18), Move(_4), Move(_19)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
Call(_32 = dump_var(Move(_9), Move(_24), Move(_5), _33), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: bool,mut _2: f32,mut _3: bool,mut _4: u64,mut _5: u32,mut _6: bool,mut _7: u64) -> *mut u16 {
mir! {
type RET = *mut u16;
let _8: isize;
let _9: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _10: char;
let _11: [isize; 6];
let _12: f32;
let _13: f64;
let _14: *mut f64;
let _15: [u128; 7];
let _16: *const &'static mut usize;
let _17: u32;
let _18: Adt53;
let _19: bool;
let _20: ((u16, (*const Adt17, [isize; 6], [u64; 3], i128), ([i8; 3], [i8; 3], (u128,), i128), f32), (i32,), &'static mut usize);
let _21: (&'static mut char,);
let _22: &'static char;
let _23: bool;
let _24: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _25: &'static mut usize;
let _26: ((Adt21,), [i128; 4]);
let _27: *mut char;
let _28: f32;
let _29: &'static char;
let _30: i16;
let _31: &'static mut usize;
let _32: *mut f64;
let _33: *const u32;
let _34: ((*mut u32, u16, [i128; 4], i8), i16);
let _35: i64;
let _36: *mut u32;
let _37: u16;
let _38: *const f64;
let _39: u16;
let _40: isize;
let _41: u128;
let _42: isize;
let _43: *mut f64;
let _44: (&'static mut char,);
let _45: *const *const u32;
let _46: [usize; 6];
let _47: *const u32;
let _48: i128;
let _49: isize;
let _50: (*mut u32, u16, [i128; 4], i8);
let _51: f32;
let _52: [u64; 4];
let _53: *const Adt17;
let _54: f32;
let _55: bool;
let _56: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _57: (u128,);
let _58: isize;
let _59: (*mut ([isize; 6], (isize, u8, i64)), u128, (Adt21,), *const isize);
let _60: &'static *mut f64;
let _61: bool;
let _62: *mut u32;
let _63: u128;
let _64: u16;
let _65: (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _66: Adt21;
let _67: [u64; 4];
let _68: f64;
let _69: ([i8; 3], [i8; 3], (u128,), i128);
let _70: *mut ([isize; 6], (isize, u8, i64));
let _71: [i8; 3];
let _72: Adt61;
let _73: Adt61;
let _74: bool;
let _75: f32;
let _76: isize;
let _77: f32;
let _78: &'static i32;
let _79: *mut ([isize; 6], (isize, u8, i64));
let _80: isize;
let _81: f32;
let _82: [u64; 3];
let _83: ();
let _84: ();
{
_6 = _1 ^ _1;
_7 = _4;
_4 = _7 | _7;
_5 = 9176833784113300712_usize as u32;
_5 = 172844540_u32 >> _7;
_5 = 969467531_u32;
_4 = _7 ^ _7;
_2 = 23902_u16 as f32;
_8 = _5 as isize;
_1 = !_6;
_10 = '\u{106268}';
_6 = !_1;
_6 = !_3;
_6 = _1 == _1;
_11 = [_8,_8,_8,_8,_8,_8];
_6 = _4 <= _4;
match _5 {
0 => bb1,
1 => bb2,
2 => bb3,
969467531 => bb5,
_ => bb4
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
_1 = _7 != _4;
_7 = _4 - _4;
_6 = !_1;
_1 = _6;
_2 = (-66_i8) as f32;
_6 = _1;
_11 = [_8,_8,_8,_8,_8,_8];
Call(_3 = fn16(_11, _4, _8, _2, _5, _7, _4, _10, _6, _1, _8), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_10 = '\u{8b3b7}';
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_2 = _5 as f32;
_1 = !_3;
_12 = _2;
_3 = _1 ^ _6;
_11 = [_8,_8,_8,_8,_8,_8];
_3 = !_1;
_3 = _1;
_3 = _7 == _4;
_2 = 248919236215377095534902126341706244490_u128 as f32;
_1 = !_3;
_3 = _6;
_13 = 255257210398581947244137923891935272784_u128 as f64;
_4 = _7 * _7;
_10 = '\u{d7243}';
_7 = 211_u8 as u64;
_12 = _2;
_11 = [_8,_8,_8,_8,_8,_8];
Goto(bb7)
}
bb7 = {
_7 = _4;
_10 = '\u{163f8}';
_12 = _2 + _2;
_1 = _7 != _4;
_10 = '\u{f06ea}';
_13 = _4 as f64;
_4 = _7 ^ _7;
_5 = 1978615866_u32 + 4133175995_u32;
_5 = !2521100760_u32;
Goto(bb8)
}
bb8 = {
_7 = _4;
_1 = _13 >= _13;
_14 = core::ptr::addr_of_mut!(_13);
_4 = _7;
_7 = _4 - _4;
(*_14) = 11322464172370239233_usize as f64;
_13 = (-26769132749199108636588033393385928619_i128) as f64;
(*_14) = 4540_u16 as f64;
_3 = _6 ^ _6;
_1 = !_3;
_3 = _1 <= _1;
(*_14) = 46_i8 as f64;
Goto(bb9)
}
bb9 = {
(*_14) = _5 as f64;
_6 = _1;
(*_14) = _5 as f64;
_14 = core::ptr::addr_of_mut!((*_14));
_10 = '\u{6a0db}';
(*_14) = 258015688272177199843987875692098364989_u128 as f64;
_15 = [294608157783914837122014775146167329004_u128,234754473337197518694389065999088369978_u128,60591342558841985563228421228868653422_u128,125145065103537012830819593867734928596_u128,258582621741387581508085928441228405688_u128,33279582998181800495958631864158741689_u128,101887092099740700236378671716620420839_u128];
(*_14) = _4 as f64;
(*_14) = 49_i8 as f64;
_17 = !_5;
_6 = _1;
(*_14) = 12_u8 as f64;
(*_14) = _7 as f64;
(*_14) = _5 as f64;
_2 = _12;
_4 = _7;
_10 = '\u{35db}';
(*_14) = _4 as f64;
_14 = core::ptr::addr_of_mut!((*_14));
(*_14) = 308744934549323087171828351249467570616_u128 as f64;
Goto(bb10)
}
bb10 = {
_4 = _10 as u64;
(*_14) = 37011_u16 as f64;
(*_14) = 208644874230085143298016042435405165391_u128 as f64;
(*_14) = _8 as f64;
_3 = !_6;
_11 = [_8,_8,_8,_8,_8,_8];
(*_14) = _12 as f64;
(*_14) = (-1828809275_i32) as f64;
_20.0.2.1 = [113_i8,1_i8,(-77_i8)];
_13 = _5 as f64;
_3 = _1 < _1;
_18.fld0.0.0 = core::ptr::addr_of_mut!(_5);
_14 = core::ptr::addr_of_mut!((*_14));
(*_14) = _8 as f64;
_18.fld2 = core::ptr::addr_of!(_8);
_20.0.2.2.0 = _2 as u128;
_11 = [_8,_8,_8,_8,_8,_8];
_18.fld0.0.3 = (-115_i8) & 95_i8;
_10 = '\u{bf630}';
_21.0 = &mut _10;
RET = core::ptr::addr_of_mut!(_20.0.0);
Goto(bb11)
}
bb11 = {
_20.0.1.2 = [_7,_7,_7];
(*RET) = _1 as u16;
_20.1.0 = (-1724519366_i32);
(*_14) = _18.fld0.0.3 as f64;
_18.fld0.1 = 22155_i16 + 18051_i16;
_3 = _1 ^ _6;
_20.0.3 = _2 * _12;
(*RET) = 42354_u16 & 58774_u16;
(*_14) = _7 as f64;
(*_14) = _20.0.2.2.0 as f64;
_5 = _17 | _17;
(*RET) = 49555_u16 - 3801_u16;
_12 = _20.0.3;
(*RET) = 36195_u16 ^ 46940_u16;
_1 = _3;
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_18.fld0.0.0 = core::ptr::addr_of_mut!(_5);
(*RET) = _7 as u16;
_3 = _1 ^ _1;
Goto(bb12)
}
bb12 = {
RET = core::ptr::addr_of_mut!((*RET));
_20.0.2.3 = 84208000950456565332544219588112402823_i128;
_23 = _3;
_23 = _1 ^ _1;
_20.1 = (2081123637_i32,);
(*RET) = !17247_u16;
_11 = [_8,_8,_8,_8,_8,_8];
(*RET) = 38628_u16;
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_15 = [_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0];
(*_14) = _18.fld0.0.3 as f64;
_1 = _2 != _20.0.3;
(*_14) = (-2116043024375142864_i64) as f64;
(*RET) = 29693_u16;
_19 = _3;
RET = core::ptr::addr_of_mut!(_18.fld0.0.1);
(*RET) = _20.0.0;
_20.0.1.3 = _20.0.2.3 & _20.0.2.3;
_7 = _4 - _4;
(*RET) = _18.fld0.1 as u16;
(*_14) = _4 as f64;
_18.fld2 = core::ptr::addr_of!(_8);
(*RET) = _20.0.0;
(*_14) = _18.fld0.0.3 as f64;
(*_14) = _20.0.1.3 as f64;
(*_14) = 5906986450583666070_i64 as f64;
(*_14) = _20.0.2.2.0 as f64;
(*_14) = _20.0.2.2.0 as f64;
(*_14) = _18.fld0.0.3 as f64;
Goto(bb13)
}
bb13 = {
_20.0.0 = (*RET) << _5;
_20.1.0 = !1905846412_i32;
_20.1.0 = _20.0.1.3 as i32;
(*_14) = _5 as f64;
(*RET) = !_20.0.0;
_20.0.0 = _18.fld0.0.1 ^ (*RET);
Call(_18.fld3 = fn17(Move(RET), _20.0.2.3, _20.0.2.3, _20.0.3, Move(_18.fld0.0.0), Move(_21), Move(_18.fld2)), ReturnTo(bb14), UnwindUnreachable())
}
bb14 = {
(*_14) = _20.1.0 as f64;
_30 = _18.fld0.1 ^ _18.fld0.1;
match _20.0.2.3 {
0 => bb1,
1 => bb11,
2 => bb4,
3 => bb15,
4 => bb16,
5 => bb17,
84208000950456565332544219588112402823 => bb19,
_ => bb18
}
}
bb15 = {
_7 = _4;
_1 = _13 >= _13;
_14 = core::ptr::addr_of_mut!(_13);
_4 = _7;
_7 = _4 - _4;
(*_14) = 11322464172370239233_usize as f64;
_13 = (-26769132749199108636588033393385928619_i128) as f64;
(*_14) = 4540_u16 as f64;
_3 = _6 ^ _6;
_1 = !_3;
_3 = _1 <= _1;
(*_14) = 46_i8 as f64;
Goto(bb9)
}
bb16 = {
RET = core::ptr::addr_of_mut!((*RET));
_20.0.2.3 = 84208000950456565332544219588112402823_i128;
_23 = _3;
_23 = _1 ^ _1;
_20.1 = (2081123637_i32,);
(*RET) = !17247_u16;
_11 = [_8,_8,_8,_8,_8,_8];
(*RET) = 38628_u16;
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_15 = [_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0];
(*_14) = _18.fld0.0.3 as f64;
_1 = _2 != _20.0.3;
(*_14) = (-2116043024375142864_i64) as f64;
(*RET) = 29693_u16;
_19 = _3;
RET = core::ptr::addr_of_mut!(_18.fld0.0.1);
(*RET) = _20.0.0;
_20.0.1.3 = _20.0.2.3 & _20.0.2.3;
_7 = _4 - _4;
(*RET) = _18.fld0.1 as u16;
(*_14) = _4 as f64;
_18.fld2 = core::ptr::addr_of!(_8);
(*RET) = _20.0.0;
(*_14) = _18.fld0.0.3 as f64;
(*_14) = _20.0.1.3 as f64;
(*_14) = 5906986450583666070_i64 as f64;
(*_14) = _20.0.2.2.0 as f64;
(*_14) = _20.0.2.2.0 as f64;
(*_14) = _18.fld0.0.3 as f64;
Goto(bb13)
}
bb17 = {
Return()
}
bb18 = {
_10 = '\u{8b3b7}';
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_2 = _5 as f32;
_1 = !_3;
_12 = _2;
_3 = _1 ^ _6;
_11 = [_8,_8,_8,_8,_8,_8];
_3 = !_1;
_3 = _1;
_3 = _7 == _4;
_2 = 248919236215377095534902126341706244490_u128 as f32;
_1 = !_3;
_3 = _6;
_13 = 255257210398581947244137923891935272784_u128 as f64;
_4 = _7 * _7;
_10 = '\u{d7243}';
_7 = 211_u8 as u64;
_12 = _2;
_11 = [_8,_8,_8,_8,_8,_8];
Goto(bb7)
}
bb19 = {
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
(*_14) = _20.0.1.3 as f64;
(*_14) = _20.0.2.2.0 as f64;
_18.fld0.0.0 = core::ptr::addr_of_mut!(_17);
_3 = _6;
_26.0.0 = Adt21::Variant2 { fld0: Move(_14),fld1: _20.0.2.2.0,fld2: _8,fld3: 15905153565167344997_usize };
_20.1.0 = (-1876258854_i32) | (-1296979027_i32);
_5 = _17 - _17;
_28 = -_20.0.3;
place!(Field::<*mut f64>(Variant(_26.0.0, 2), 0)) = core::ptr::addr_of_mut!(_13);
_14 = core::ptr::addr_of_mut!(_13);
Goto(bb20)
}
bb20 = {
(*_14) = 9930149660363816426_usize as f64;
_8 = _19 as isize;
_20.0.1.2 = [_7,_4,_4];
_15 = [Field::<u128>(Variant(_26.0.0, 2), 1),Field::<u128>(Variant(_26.0.0, 2), 1),Field::<u128>(Variant(_26.0.0, 2), 1),_20.0.2.2.0,_20.0.2.2.0,Field::<u128>(Variant(_26.0.0, 2), 1),Field::<u128>(Variant(_26.0.0, 2), 1)];
_24 = core::ptr::addr_of!(_20.0.1);
_30 = _18.fld0.1;
(*_24).3 = _8 as i128;
_26.0.0 = Adt21::Variant2 { fld0: Move(_14),fld1: _20.0.2.2.0,fld2: _8,fld3: 123109478728144247_usize };
_18.fld2 = core::ptr::addr_of!(_8);
_26.0.0 = Adt21::Variant0 { fld0: _30,fld1: _11,fld2: _4 };
_19 = _23;
_1 = !_3;
_18.fld0.1 = _23 as i16;
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).1 = _11;
match _20.0.2.3 {
0 => bb16,
1 => bb2,
2 => bb3,
3 => bb11,
4 => bb21,
5 => bb22,
84208000950456565332544219588112402823 => bb24,
_ => bb23
}
}
bb21 = {
_7 = _4;
_1 = _13 >= _13;
_14 = core::ptr::addr_of_mut!(_13);
_4 = _7;
_7 = _4 - _4;
(*_14) = 11322464172370239233_usize as f64;
_13 = (-26769132749199108636588033393385928619_i128) as f64;
(*_14) = 4540_u16 as f64;
_3 = _6 ^ _6;
_1 = !_3;
_3 = _1 <= _1;
(*_14) = 46_i8 as f64;
Goto(bb9)
}
bb22 = {
_20.0.1.2 = [_7,_7,_7];
(*RET) = _1 as u16;
_20.1.0 = (-1724519366_i32);
(*_14) = _18.fld0.0.3 as f64;
_18.fld0.1 = 22155_i16 + 18051_i16;
_3 = _1 ^ _6;
_20.0.3 = _2 * _12;
(*RET) = 42354_u16 & 58774_u16;
(*_14) = _7 as f64;
(*_14) = _20.0.2.2.0 as f64;
_5 = _17 | _17;
(*RET) = 49555_u16 - 3801_u16;
_12 = _20.0.3;
(*RET) = 36195_u16 ^ 46940_u16;
_1 = _3;
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_18.fld0.0.0 = core::ptr::addr_of_mut!(_5);
(*RET) = _7 as u16;
_3 = _1 ^ _1;
Goto(bb12)
}
bb23 = {
_1 = _7 != _4;
_7 = _4 - _4;
_6 = !_1;
_1 = _6;
_2 = (-66_i8) as f32;
_6 = _1;
_11 = [_8,_8,_8,_8,_8,_8];
Call(_3 = fn16(_11, _4, _8, _2, _5, _7, _4, _10, _6, _1, _8), ReturnTo(bb6), UnwindUnreachable())
}
bb24 = {
(*_24).1 = [_8,_8,_8,_8,_8,_8];
_26.1 = [(*_24).3,(*_24).3,_20.0.1.3,(*_24).3];
_2 = -_20.0.3;
(*_24).3 = !_20.0.2.3;
(*_24).3 = _19 as i128;
(*_24).2 = [_7,Field::<u64>(Variant(_26.0.0, 0), 2),_7];
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).2 = [_4,_7,Field::<u64>(Variant(_26.0.0, 0), 2)];
_20.0.2.3 = (*_24).3 & (*_24).3;
(*_24).1 = [_8,_8,_8,_8,_8,_8];
_20.0.2.2 = (242241541352086139887350101136600560122_u128,);
_20.0.2.2 = (321086661675934776159545068245711863491_u128,);
_18.fld2 = core::ptr::addr_of!(_8);
(*_24).2 = [_4,_7,_4];
_20.0.1.2 = [_4,_4,_4];
match _20.0.2.2.0 {
0 => bb12,
1 => bb16,
2 => bb23,
3 => bb21,
4 => bb11,
321086661675934776159545068245711863491 => bb26,
_ => bb25
}
}
bb25 = {
_1 = _7 != _4;
_7 = _4 - _4;
_6 = !_1;
_1 = _6;
_2 = (-66_i8) as f32;
_6 = _1;
_11 = [_8,_8,_8,_8,_8,_8];
Call(_3 = fn16(_11, _4, _8, _2, _5, _7, _4, _10, _6, _1, _8), ReturnTo(bb6), UnwindUnreachable())
}
bb26 = {
(*_24).2 = [Field::<u64>(Variant(_26.0.0, 0), 2),Field::<u64>(Variant(_26.0.0, 0), 2),_4];
(*_24).3 = -_20.0.2.3;
(*_24).3 = _20.0.2.3 | _20.0.2.3;
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).2 = [_7,_4,_4];
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).2 = [_4,_7,Field::<u64>(Variant(_26.0.0, 0), 2)];
_23 = !_1;
match _20.0.2.2.0 {
0 => bb4,
1 => bb27,
2 => bb28,
321086661675934776159545068245711863491 => bb30,
_ => bb29
}
}
bb27 = {
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
(*_14) = _20.0.1.3 as f64;
(*_14) = _20.0.2.2.0 as f64;
_18.fld0.0.0 = core::ptr::addr_of_mut!(_17);
_3 = _6;
_26.0.0 = Adt21::Variant2 { fld0: Move(_14),fld1: _20.0.2.2.0,fld2: _8,fld3: 15905153565167344997_usize };
_20.1.0 = (-1876258854_i32) | (-1296979027_i32);
_5 = _17 - _17;
_28 = -_20.0.3;
place!(Field::<*mut f64>(Variant(_26.0.0, 2), 0)) = core::ptr::addr_of_mut!(_13);
_14 = core::ptr::addr_of_mut!(_13);
Goto(bb20)
}
bb28 = {
_20.0.1.2 = [_7,_7,_7];
(*RET) = _1 as u16;
_20.1.0 = (-1724519366_i32);
(*_14) = _18.fld0.0.3 as f64;
_18.fld0.1 = 22155_i16 + 18051_i16;
_3 = _1 ^ _6;
_20.0.3 = _2 * _12;
(*RET) = 42354_u16 & 58774_u16;
(*_14) = _7 as f64;
(*_14) = _20.0.2.2.0 as f64;
_5 = _17 | _17;
(*RET) = 49555_u16 - 3801_u16;
_12 = _20.0.3;
(*RET) = 36195_u16 ^ 46940_u16;
_1 = _3;
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_18.fld0.0.0 = core::ptr::addr_of_mut!(_5);
(*RET) = _7 as u16;
_3 = _1 ^ _1;
Goto(bb12)
}
bb29 = {
_1 = _7 != _4;
_7 = _4 - _4;
_6 = !_1;
_1 = _6;
_2 = (-66_i8) as f32;
_6 = _1;
_11 = [_8,_8,_8,_8,_8,_8];
Call(_3 = fn16(_11, _4, _8, _2, _5, _7, _4, _10, _6, _1, _8), ReturnTo(bb6), UnwindUnreachable())
}
bb30 = {
(*_24).3 = _20.0.2.3;
(*_24).3 = _20.0.2.3 ^ _20.0.2.3;
_20.0.1.2 = [Field::<u64>(Variant(_26.0.0, 0), 2),_7,_4];
place!(Field::<u64>(Variant(_26.0.0, 0), 2)) = _7 * _4;
(*_24).3 = _5 as i128;
(*_24).3 = _20.0.2.3 + _20.0.2.3;
_20.0.2.0 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_32 = core::ptr::addr_of_mut!(_13);
_6 = (*_24).3 == _20.0.1.3;
_39 = _18.fld0.0.1 | _18.fld0.0.1;
_18.fld3 = core::ptr::addr_of_mut!(_20.0.2.2.0);
(*_24).3 = _20.0.2.3 ^ _20.0.2.3;
_26.1 = [(*_24).3,(*_24).3,(*_24).3,(*_24).3];
(*_24).1 = Field::<[isize; 6]>(Variant(_26.0.0, 0), 1);
RET = core::ptr::addr_of_mut!(_18.fld0.0.1);
_20.0.1.3 = _20.0.2.2.0 as i128;
(*RET) = !_20.0.0;
Goto(bb31)
}
bb31 = {
(*_24).2 = [Field::<u64>(Variant(_26.0.0, 0), 2),Field::<u64>(Variant(_26.0.0, 0), 2),Field::<u64>(Variant(_26.0.0, 0), 2)];
_8 = 75_isize;
(*RET) = !_39;
(*RET) = _5 as u16;
(*RET) = !_20.0.0;
(*_24).1 = [_8,_8,_8,_8,_8,_8];
_15 = [_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0,_20.0.2.2.0];
Goto(bb32)
}
bb32 = {
(*RET) = _20.0.0 >> _20.0.2.3;
_38 = core::ptr::addr_of!((*_32));
(*RET) = _20.0.0 << _20.0.2.3;
_14 = core::ptr::addr_of_mut!((*_38));
(*RET) = !_39;
(*_14) = _8 as f64;
_28 = _12 + _20.0.3;
_20.0.3 = _2;
_48 = _20.0.2.3;
(*RET) = _39 * _20.0.0;
(*_38) = _7 as f64;
(*_32) = _8 as f64;
_17 = _5 ^ _5;
_40 = _8 - _8;
_39 = (*RET) << _20.0.0;
(*_24).1 = _11;
_20.0.2.1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_30 = _18.fld0.0.3 as i16;
_20.0.1.1 = [_40,_40,_8,_40,_40,_40];
match _20.0.2.2.0 {
0 => bb10,
1 => bb33,
2 => bb34,
3 => bb35,
4 => bb36,
321086661675934776159545068245711863491 => bb38,
_ => bb37
}
}
bb33 = {
_20.0.1.2 = [_7,_7,_7];
(*RET) = _1 as u16;
_20.1.0 = (-1724519366_i32);
(*_14) = _18.fld0.0.3 as f64;
_18.fld0.1 = 22155_i16 + 18051_i16;
_3 = _1 ^ _6;
_20.0.3 = _2 * _12;
(*RET) = 42354_u16 & 58774_u16;
(*_14) = _7 as f64;
(*_14) = _20.0.2.2.0 as f64;
_5 = _17 | _17;
(*RET) = 49555_u16 - 3801_u16;
_12 = _20.0.3;
(*RET) = 36195_u16 ^ 46940_u16;
_1 = _3;
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_18.fld0.0.0 = core::ptr::addr_of_mut!(_5);
(*RET) = _7 as u16;
_3 = _1 ^ _1;
Goto(bb12)
}
bb34 = {
_4 = _10 as u64;
(*_14) = 37011_u16 as f64;
(*_14) = 208644874230085143298016042435405165391_u128 as f64;
(*_14) = _8 as f64;
_3 = !_6;
_11 = [_8,_8,_8,_8,_8,_8];
(*_14) = _12 as f64;
(*_14) = (-1828809275_i32) as f64;
_20.0.2.1 = [113_i8,1_i8,(-77_i8)];
_13 = _5 as f64;
_3 = _1 < _1;
_18.fld0.0.0 = core::ptr::addr_of_mut!(_5);
_14 = core::ptr::addr_of_mut!((*_14));
(*_14) = _8 as f64;
_18.fld2 = core::ptr::addr_of!(_8);
_20.0.2.2.0 = _2 as u128;
_11 = [_8,_8,_8,_8,_8,_8];
_18.fld0.0.3 = (-115_i8) & 95_i8;
_10 = '\u{bf630}';
_21.0 = &mut _10;
RET = core::ptr::addr_of_mut!(_20.0.0);
Goto(bb11)
}
bb35 = {
_10 = '\u{8b3b7}';
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_2 = _5 as f32;
_1 = !_3;
_12 = _2;
_3 = _1 ^ _6;
_11 = [_8,_8,_8,_8,_8,_8];
_3 = !_1;
_3 = _1;
_3 = _7 == _4;
_2 = 248919236215377095534902126341706244490_u128 as f32;
_1 = !_3;
_3 = _6;
_13 = 255257210398581947244137923891935272784_u128 as f64;
_4 = _7 * _7;
_10 = '\u{d7243}';
_7 = 211_u8 as u64;
_12 = _2;
_11 = [_8,_8,_8,_8,_8,_8];
Goto(bb7)
}
bb36 = {
(*_24).2 = [Field::<u64>(Variant(_26.0.0, 0), 2),Field::<u64>(Variant(_26.0.0, 0), 2),_4];
(*_24).3 = -_20.0.2.3;
(*_24).3 = _20.0.2.3 | _20.0.2.3;
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).2 = [_7,_4,_4];
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).1 = [_8,_8,_8,_8,_8,_8];
(*_24).2 = [_4,_7,Field::<u64>(Variant(_26.0.0, 0), 2)];
_23 = !_1;
match _20.0.2.2.0 {
0 => bb4,
1 => bb27,
2 => bb28,
321086661675934776159545068245711863491 => bb30,
_ => bb29
}
}
bb37 = {
(*_14) = _5 as f64;
_6 = _1;
(*_14) = _5 as f64;
_14 = core::ptr::addr_of_mut!((*_14));
_10 = '\u{6a0db}';
(*_14) = 258015688272177199843987875692098364989_u128 as f64;
_15 = [294608157783914837122014775146167329004_u128,234754473337197518694389065999088369978_u128,60591342558841985563228421228868653422_u128,125145065103537012830819593867734928596_u128,258582621741387581508085928441228405688_u128,33279582998181800495958631864158741689_u128,101887092099740700236378671716620420839_u128];
(*_14) = _4 as f64;
(*_14) = 49_i8 as f64;
_17 = !_5;
_6 = _1;
(*_14) = 12_u8 as f64;
(*_14) = _7 as f64;
(*_14) = _5 as f64;
_2 = _12;
_4 = _7;
_10 = '\u{35db}';
(*_14) = _4 as f64;
_14 = core::ptr::addr_of_mut!((*_14));
(*_14) = 308744934549323087171828351249467570616_u128 as f64;
Goto(bb10)
}
bb38 = {
(*_32) = _18.fld0.1 as f64;
(*_24).1 = [_8,_8,_40,_40,_8,_8];
(*_24).2 = [Field::<u64>(Variant(_26.0.0, 0), 2),_7,Field::<u64>(Variant(_26.0.0, 0), 2)];
(*_32) = 2367407761511032106_i64 as f64;
_18.fld2 = core::ptr::addr_of!(_8);
(*RET) = _39 & _39;
(*_24).2 = [_4,_4,_4];
(*RET) = _39;
_35 = (-1541501161346169098_i64) ^ 2725453757308328388_i64;
(*_24).1 = [_40,_40,_8,_8,_40,_8];
_50.1 = (*RET) ^ (*RET);
(*_24).2 = [_7,_7,_7];
(*_32) = _50.1 as f64;
(*RET) = !_20.0.0;
(*RET) = _50.1 - _50.1;
(*_24).1 = [_40,_40,_8,_40,_40,_40];
(*_24).3 = _48 ^ _48;
(*_24).1 = _11;
Goto(bb39)
}
bb39 = {
_20.0.2.2 = (62822558369523962969855983571251934303_u128,);
_50.2 = [(*_24).3,(*_24).3,(*_24).3,(*_24).3];
(*_32) = _4 as f64;
_18.fld0.0.2 = [_20.0.1.3,_48,_48,(*_24).3];
_50.1 = (*RET);
(*_32) = _35 as f64;
_20.0.1.2 = [_7,Field::<u64>(Variant(_26.0.0, 0), 2),_7];
(*_24).1 = [_8,_8,_40,_8,_8,_40];
(*RET) = _50.1 >> _20.0.1.3;
(*_24).1 = [_40,_40,_40,_8,_8,_40];
(*_24).2 = [_7,_4,Field::<u64>(Variant(_26.0.0, 0), 2)];
(*RET) = _39 - _50.1;
(*_24).2 = [Field::<u64>(Variant(_26.0.0, 0), 2),_4,Field::<u64>(Variant(_26.0.0, 0), 2)];
(*_24).2 = [_7,Field::<u64>(Variant(_26.0.0, 0), 2),_7];
match _20.0.2.2.0 {
0 => bb1,
1 => bb8,
62822558369523962969855983571251934303 => bb40,
_ => bb15
}
}
bb40 = {
_36 = core::ptr::addr_of_mut!(_5);
_51 = _18.fld0.0.3 as f32;
(*_24).2 = [_7,_7,Field::<u64>(Variant(_26.0.0, 0), 2)];
(*_36) = _17 + _17;
(*_24).3 = _20.0.2.3 * _20.0.2.3;
(*_24).1 = [_40,_40,_40,_40,_40,_40];
(*RET) = !_50.1;
(*_36) = _17 | _17;
(*_36) = (*_24).3 as u32;
_50.3 = _18.fld0.0.3 ^ _18.fld0.0.3;
(*_24).1 = Field::<[isize; 6]>(Variant(_26.0.0, 0), 1);
_24 = core::ptr::addr_of!((*_24));
_47 = core::ptr::addr_of!((*_36));
_34.0 = (Move(_36), (*RET), _26.1, _18.fld0.0.3);
(*_24).3 = _35 as i128;
(*_32) = _40 as f64;
(*_24).2 = [Field::<u64>(Variant(_26.0.0, 0), 2),_7,Field::<u64>(Variant(_26.0.0, 0), 2)];
(*_24).1 = [_40,_40,_40,_8,_8,_8];
_7 = (*RET) as u64;
_20.0.2.0 = [_18.fld0.0.3,_18.fld0.0.3,_34.0.3];
_23 = (*RET) == (*RET);
Goto(bb41)
}
bb41 = {
(*_24).2 = [_7,_7,_7];
(*_24).1 = [_8,_40,_40,_40,_40,_40];
_18.fld1 = [_50.3,_34.0.3,_34.0.3,_34.0.3,_34.0.3];
_37 = !(*RET);
(*_47) = _17;
(*_24).2 = [_7,_7,_7];
_50.0 = core::ptr::addr_of_mut!((*_47));
(*_24).2 = [_7,_7,_7];
(*_47) = _17 >> _50.1;
_38 = core::ptr::addr_of!((*_32));
(*_24).3 = _48 & _48;
(*_24).2 = [_7,_7,_7];
_34 = Move(_18.fld0);
_11 = (*_24).1;
_11 = (*_24).1;
_65.0.2 = (_20.0.2.2.0,);
_33 = core::ptr::addr_of!((*_47));
(*_24).2 = [_7,_7,_7];
_20.0.2.2.0 = _65.0.2.0 << (*_24).3;
_59.2 = (Move(_26.0.0),);
(*_24).2 = [_7,_7,_7];
match _8 {
0 => bb42,
75 => bb44,
_ => bb43
}
}
bb42 = {
_10 = '\u{8b3b7}';
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_11 = [_8,_8,_8,_8,_8,_8];
_2 = _5 as f32;
_1 = !_3;
_12 = _2;
_3 = _1 ^ _6;
_11 = [_8,_8,_8,_8,_8,_8];
_3 = !_1;
_3 = _1;
_3 = _7 == _4;
_2 = 248919236215377095534902126341706244490_u128 as f32;
_1 = !_3;
_3 = _6;
_13 = 255257210398581947244137923891935272784_u128 as f64;
_4 = _7 * _7;
_10 = '\u{d7243}';
_7 = 211_u8 as u64;
_12 = _2;
_11 = [_8,_8,_8,_8,_8,_8];
Goto(bb7)
}
bb43 = {
_20.0.1.2 = [_7,_7,_7];
(*RET) = _1 as u16;
_20.1.0 = (-1724519366_i32);
(*_14) = _18.fld0.0.3 as f64;
_18.fld0.1 = 22155_i16 + 18051_i16;
_3 = _1 ^ _6;
_20.0.3 = _2 * _12;
(*RET) = 42354_u16 & 58774_u16;
(*_14) = _7 as f64;
(*_14) = _20.0.2.2.0 as f64;
_5 = _17 | _17;
(*RET) = 49555_u16 - 3801_u16;
_12 = _20.0.3;
(*RET) = 36195_u16 ^ 46940_u16;
_1 = _3;
_18.fld1 = [_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3,_18.fld0.0.3];
_18.fld0.0.0 = core::ptr::addr_of_mut!(_5);
(*RET) = _7 as u16;
_3 = _1 ^ _1;
Goto(bb12)
}
bb44 = {
_38 = core::ptr::addr_of!((*_32));
(*RET) = !_34.0.1;
_13 = 150_u8 as f64;
(*RET) = _50.1;
(*_38) = _50.3 as f64;
(*_24).1 = [_40,_40,_40,_40,_40,_40];
_57.0 = _20.0.2.2.0 + _20.0.2.2.0;
_61 = !_6;
_42 = _40 & _40;
_18.fld0 = (Move(_34.0), _34.1);
(*_47) = !_17;
_20.1.0 = 2014441546_i32 - 534861105_i32;
_58 = !_42;
_63 = _57.0 | _20.0.2.2.0;
(*_24).2 = [_7,_7,_7];
(*_24).2 = [_7,_7,_7];
_26 = (Move(_59.2), _50.2);
_4 = _18.fld0.0.1 as u64;
_18.fld1 = [_18.fld0.0.3,_50.3,_50.3,_18.fld0.0.3,_18.fld0.0.3];
(*_47) = _17 * _17;
(*_24).1 = _11;
_63 = _57.0 - _20.0.2.2.0;
(*_32) = 87_u8 as f64;
_61 = !_3;
_64 = 10738216323802701053_usize as u16;
_34 = Move(_18.fld0);
match _65.0.2.0 {
0 => bb1,
1 => bb23,
2 => bb37,
3 => bb32,
4 => bb17,
5 => bb30,
62822558369523962969855983571251934303 => bb45,
_ => bb7
}
}
bb45 = {
_20.1 = ((-1580276157_i32),);
(*_47) = !_17;
(*_24).2 = [_4,_7,_7];
(*RET) = _51 as u16;
_69.1 = [_50.3,_50.3,_50.3];
_59.2 = Move(_26.0);
_65.0.3 = (*_24).3;
Goto(bb46)
}
bb46 = {
_72.fld2 = core::ptr::addr_of!(_20.0.1);
place!(Field::<i16>(Variant(_59.2.0, 0), 0)) = _34.1;
Goto(bb47)
}
bb47 = {
_68 = -(*_32);
_18.fld0.0.0 = core::ptr::addr_of_mut!((*_47));
_34.0.1 = !_37;
_7 = Field::<i16>(Variant(_59.2.0, 0), 0) as u64;
_26 = (Move(_59.2), _50.2);
(*_24).2 = [_7,_4,_7];
place!(Field::<[isize; 6]>(Variant(_26.0.0, 0), 1)) = [_42,_42,_8,_8,_8,_42];
(*_24).2 = [_4,_7,_7];
(*_47) = _17;
(*_24).2 = [_7,_7,_4];
(*_47) = _20.1.0 as u32;
_50 = (Move(_34.0.0), _37, _34.0.2, _34.0.3);
match _8 {
75 => bb49,
_ => bb48
}
}
bb48 = {
Return()
}
bb49 = {
(*_47) = !_17;
_54 = _28 - _28;
_20.0.1.3 = _20.0.2.3 ^ _48;
_3 = _19;
(*_32) = _68;
(*_24).2 = [_7,_7,_7];
Goto(bb50)
}
bb50 = {
Call(_83 = dump_var(Move(_17), Move(_19), Move(_48), Move(_1)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_83 = dump_var(Move(_42), Move(_15), Move(_11), Move(_6)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_83 = dump_var(Move(_40), Move(_23), Move(_10), Move(_7)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: [isize; 6],mut _2: u64,mut _3: isize,mut _4: f32,mut _5: u32,mut _6: u64,mut _7: u64,mut _8: char,mut _9: bool,mut _10: bool,mut _11: isize) -> bool {
mir! {
type RET = bool;
let _12: *mut u32;
let _13: *const u32;
let _14: Adt17;
let _15: i8;
let _16: *const isize;
let _17: ();
let _18: ();
{
_5 = !366012304_u32;
_11 = 47245_u16 as isize;
_6 = _7;
_1 = [_11,_3,_11,_3,_11,_3];
_10 = !_9;
_2 = !_7;
_2 = _6 * _7;
_13 = core::ptr::addr_of!(_5);
(*_13) = 2288887768_u32 | 2096696580_u32;
(*_13) = 2899215943_u32 >> _7;
_11 = _3;
_5 = 457079144_u32 - 2766320196_u32;
RET = _9 | _9;
_15 = !100_i8;
(*_13) = 7_usize as u32;
_14 = Adt17::Variant1 { fld0: RET,fld1: (-88825857498884839601949497512925175002_i128),fld2: _11,fld3: _15,fld4: 13719583705836852046_usize,fld5: (*_13) };
_16 = core::ptr::addr_of!(_11);
place!(Field::<i128>(Variant(_14, 1), 1)) = 49177_u16 as i128;
(*_16) = -_3;
(*_13) = !Field::<u32>(Variant(_14, 1), 5);
(*_13) = Field::<u32>(Variant(_14, 1), 5);
(*_13) = (*_16) as u32;
_12 = core::ptr::addr_of_mut!((*_13));
_4 = Field::<i8>(Variant(_14, 1), 3) as f32;
(*_13) = Field::<u32>(Variant(_14, 1), 5) << _2;
(*_13) = Field::<u32>(Variant(_14, 1), 5) - Field::<u32>(Variant(_14, 1), 5);
place!(Field::<isize>(Variant(_14, 1), 2)) = (*_16);
Goto(bb1)
}
bb1 = {
Call(_17 = dump_var(Move(_15), Move(_3), Move(_6), Move(_9)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Call(_17 = dump_var(Move(_7), _18, _18, _18), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(mut _1: *mut u16,mut _2: i128,mut _3: i128,mut _4: f32,mut _5: *mut u32,mut _6: (&'static mut char,),mut _7: *const isize) -> *mut u128 {
mir! {
type RET = *mut u128;
let _8: isize;
let _9: *mut u32;
let _10: *const *const u32;
let _11: *mut &'static i128;
let _12: u32;
let _13: Adt17;
let _14: *mut u128;
let _15: ();
let _16: ();
{
_2 = !_3;
_4 = 28508537815208640550497982870088189263_u128 as f32;
_2 = -_3;
_7 = core::ptr::addr_of!(_8);
(*_7) = (-9223372036854775808_isize) ^ 9223372036854775807_isize;
(*_7) = (-9223372036854775808_isize) | (-9223372036854775808_isize);
(*_7) = 33_u8 as isize;
_8 = 34_isize << _3;
match _3 {
0 => bb1,
84208000950456565332544219588112402823 => bb3,
_ => bb2
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
(*_7) = 9223372036854775807_isize | 9223372036854775807_isize;
_3 = _2 << (*_7);
(*_7) = (-9223372036854775808_isize) << _3;
(*_7) = (-9223372036854775808_isize);
(*_7) = !9223372036854775807_isize;
_9 = Move(_5);
(*_7) = 117_isize & 9223372036854775807_isize;
_5 = Move(_9);
(*_7) = -9223372036854775807_isize;
(*_7) = 46_i8 as isize;
(*_7) = (-60_isize) + 103_isize;
(*_7) = 21_isize;
(*_7) = 67_isize & (-9223372036854775808_isize);
(*_7) = 366_u16 as isize;
(*_7) = 89_isize;
(*_7) = (-9223372036854775808_isize) | 9223372036854775807_isize;
Goto(bb4)
}
bb4 = {
_3 = _2;
(*_7) = !9223372036854775807_isize;
_9 = Move(_5);
(*_7) = !9223372036854775807_isize;
_2 = _3;
_4 = (-2134727741_i32) as f32;
(*_7) = (-112_isize) * (-21_isize);
_5 = Move(_9);
Call(RET = fn18(Move(_7), Move(_5), Move(_1), (*_7), (*_7), _4, (*_7), (*_7), _4, (*_7)), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_2 = _3 >> _8;
_7 = core::ptr::addr_of!(_8);
(*_7) = -(-9223372036854775808_isize);
_4 = (-1809499735406873572_i64) as f32;
_5 = core::ptr::addr_of_mut!(_12);
(*_5) = 885221547_u32;
(*_7) = 0_isize << _2;
(*_7) = 79_isize ^ (-9223372036854775808_isize);
(*_5) = 237_u8 as u32;
(*_5) = 29553534392666381972230239647962912585_u128 as u32;
(*_7) = 9223372036854775807_isize;
(*_5) = 3753233743_u32 >> (*_7);
Goto(bb6)
}
bb6 = {
Call(_15 = dump_var(Move(_2), Move(_8), _16, _16), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: *const isize,mut _2: *mut u32,mut _3: *mut u16,mut _4: isize,mut _5: isize,mut _6: f32,mut _7: isize,mut _8: isize,mut _9: f32,mut _10: isize) -> *mut u128 {
mir! {
type RET = *mut u128;
let _11: isize;
let _12: u16;
let _13: *mut u128;
let _14: u64;
let _15: i8;
let _16: (f64,);
let _17: usize;
let _18: u32;
let _19: *const isize;
let _20: u8;
let _21: isize;
let _22: f64;
let _23: u128;
let _24: ((Adt21,), [i128; 4]);
let _25: [u64; 4];
let _26: &'static i32;
let _27: char;
let _28: isize;
let _29: *const f64;
let _30: *mut f64;
let _31: &'static mut usize;
let _32: &'static mut char;
let _33: &'static mut usize;
let _34: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _35: f64;
let _36: *mut u16;
let _37: [i128; 1];
let _38: (u128,);
let _39: &'static i128;
let _40: i128;
let _41: char;
let _42: u8;
let _43: isize;
let _44: *mut char;
let _45: isize;
let _46: *mut ([isize; 6], (isize, u8, i64));
let _47: f32;
let _48: [isize; 1];
let _49: (*mut char, i128, (u128,));
let _50: ([i8; 3], [i8; 3], (u128,), i128);
let _51: (isize,);
let _52: isize;
let _53: (isize,);
let _54: f64;
let _55: bool;
let _56: *const Adt17;
let _57: u8;
let _58: [isize; 5];
let _59: *mut u16;
let _60: isize;
let _61: *const u32;
let _62: (&'static mut usize, (*const Adt17, [isize; 6], [u64; 3], i128), u32);
let _63: *const Adt17;
let _64: u16;
let _65: f64;
let _66: Adt67;
let _67: *mut &'static i128;
let _68: isize;
let _69: i16;
let _70: isize;
let _71: *mut u128;
let _72: *mut &'static i128;
let _73: char;
let _74: i8;
let _75: f64;
let _76: &'static *mut f64;
let _77: [isize; 5];
let _78: *mut ([isize; 6], (isize, u8, i64));
let _79: char;
let _80: ([isize; 6], (isize, u8, i64));
let _81: &'static char;
let _82: *const isize;
let _83: isize;
let _84: [u128; 7];
let _85: *mut char;
let _86: *const u32;
let _87: Adt21;
let _88: *const u32;
let _89: isize;
let _90: Adt67;
let _91: ();
let _92: ();
{
_4 = _10 & _5;
_5 = _10;
_5 = !_10;
_10 = _4 >> _4;
_8 = _10;
_7 = _8;
_10 = _7 * _8;
_8 = _10 << _10;
_4 = _7;
_8 = _4 & _4;
_1 = core::ptr::addr_of!(_4);
_1 = core::ptr::addr_of!((*_1));
(*_1) = _7;
(*_1) = (-16926_i16) as isize;
(*_1) = 5752228622639148398_usize as isize;
(*_1) = _7;
(*_1) = _10;
(*_1) = _10;
_1 = core::ptr::addr_of!(_7);
(*_1) = -_8;
Goto(bb1)
}
bb1 = {
(*_1) = _8 | _10;
(*_1) = _4 - _8;
(*_1) = _4 << _10;
(*_1) = !_10;
(*_1) = _8 + _10;
_3 = core::ptr::addr_of_mut!(_12);
(*_1) = _10 << _8;
_6 = _9 + _9;
_5 = 6660_u16 as isize;
(*_3) = 35498_u16 & 43701_u16;
(*_1) = 2966826537181450374_u64 as isize;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 3605747812332556455_u64 as u16;
(*_3) = _10 as u16;
(*_1) = _4 & _10;
(*_3) = !17017_u16;
(*_3) = 1865_u16 * 9578_u16;
_11 = 5053409446743254974_u64 as isize;
(*_1) = -_10;
_10 = _9 as isize;
(*_3) = !54506_u16;
_7 = _8 | _11;
_3 = core::ptr::addr_of_mut!((*_3));
_1 = core::ptr::addr_of!(_10);
Goto(bb2)
}
bb2 = {
(*_3) = 10396_u16;
(*_3) = 41533_u16 ^ 20431_u16;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 8619_u16 ^ 55781_u16;
(*_3) = 3750_u16 ^ 54702_u16;
_2 = core::ptr::addr_of_mut!(_18);
(*_3) = 1806_u16 + 54532_u16;
(*_3) = 61255_u16;
(*_1) = _8 ^ _7;
_14 = 145374887996704812328070128504231594633_u128 as u64;
(*_3) = _14 as u16;
_8 = (*_1) - (*_1);
_4 = (*_1) & (*_1);
(*_2) = 89182902630992094514579289406624544641_i128 as u32;
(*_2) = 4164114040_u32 << (*_1);
(*_1) = _4 & _4;
(*_3) = 52409_u16 & 43179_u16;
(*_2) = _6 as u32;
_10 = _4;
(*_1) = 277512598090237537435426126727111070421_u128 as isize;
(*_1) = _8 - _4;
(*_1) = _4;
_4 = !(*_1);
_5 = (-29175_i16) as isize;
_7 = (*_1) | (*_1);
(*_1) = false as isize;
(*_3) = 29014_u16 & 29635_u16;
Goto(bb3)
}
bb3 = {
(*_1) = _8 | _4;
(*_1) = _7 * _8;
(*_2) = !3445748214_u32;
(*_2) = 596186323_u32 & 386740515_u32;
(*_3) = 63086_u16;
_6 = 3_usize as f32;
(*_3) = !22963_u16;
_17 = 9601012279314771617_usize * 5_usize;
(*_1) = _8 | _7;
(*_2) = 3667997733_u32 + 3818443949_u32;
(*_1) = _14 as isize;
(*_2) = 2336621433_u32 & 1322146716_u32;
(*_3) = 56096_u16;
(*_3) = 40171_u16 ^ 12745_u16;
(*_1) = _7;
(*_2) = 1714663190_u32;
_13 = core::ptr::addr_of_mut!(_23);
(*_13) = 240961154593548673563631114425995127623_u128 + 118966561262646887885903848928814653442_u128;
(*_1) = _8;
match (*_2) {
0 => bb1,
1714663190 => bb4,
_ => bb2
}
}
bb4 = {
RET = core::ptr::addr_of_mut!((*_13));
(*_2) = (-7052218571088266713_i64) as u32;
(*_1) = _7 - _7;
(*_2) = 3869795462_u32 - 455757234_u32;
(*_2) = 127630568_u32;
(*_3) = 54561_u16 - 27442_u16;
(*_3) = !14945_u16;
(*_1) = -_4;
(*_2) = !1576686126_u32;
(*_3) = 58591_u16 ^ 42312_u16;
(*_3) = 1672_u16 >> (*_1);
(*_13) = (*_2) as u128;
(*_2) = 2162863067_u32;
_13 = core::ptr::addr_of_mut!((*_13));
(*_13) = 287524849339716582575479348534784410045_u128 << (*_3);
(*_3) = 50869_u16;
_17 = !5968387124617921855_usize;
(*_2) = 552919117_u32 | 2199255918_u32;
(*_13) = 21772727303794156748998270540932499585_u128;
RET = Move(_13);
_2 = core::ptr::addr_of_mut!((*_2));
_13 = Move(RET);
(*_2) = !4201207866_u32;
(*_3) = 63183_u16;
(*_1) = _7;
(*_1) = _4 << _4;
Goto(bb5)
}
bb5 = {
_16.0 = _9 as f64;
(*_2) = 580161372_u32 * 1676388391_u32;
_13 = core::ptr::addr_of_mut!(_23);
(*_13) = (*_2) as u128;
(*_1) = _7 | _7;
_19 = core::ptr::addr_of!((*_1));
(*_3) = 32392_u16;
(*_13) = 51558434765325426356383164653430925327_u128;
(*_1) = 25419_i16 as isize;
_20 = 136_u8 << _7;
(*_1) = _7 + _7;
(*_1) = !_4;
(*_1) = _7 ^ _7;
(*_2) = _6 as u32;
(*_13) = 288854930216733132622677721366228239175_u128 - 164645200247680713703590677500573698777_u128;
match _12 {
0 => bb1,
1 => bb2,
2 => bb6,
3 => bb7,
4 => bb8,
32392 => bb10,
_ => bb9
}
}
bb6 = {
RET = core::ptr::addr_of_mut!((*_13));
(*_2) = (-7052218571088266713_i64) as u32;
(*_1) = _7 - _7;
(*_2) = 3869795462_u32 - 455757234_u32;
(*_2) = 127630568_u32;
(*_3) = 54561_u16 - 27442_u16;
(*_3) = !14945_u16;
(*_1) = -_4;
(*_2) = !1576686126_u32;
(*_3) = 58591_u16 ^ 42312_u16;
(*_3) = 1672_u16 >> (*_1);
(*_13) = (*_2) as u128;
(*_2) = 2162863067_u32;
_13 = core::ptr::addr_of_mut!((*_13));
(*_13) = 287524849339716582575479348534784410045_u128 << (*_3);
(*_3) = 50869_u16;
_17 = !5968387124617921855_usize;
(*_2) = 552919117_u32 | 2199255918_u32;
(*_13) = 21772727303794156748998270540932499585_u128;
RET = Move(_13);
_2 = core::ptr::addr_of_mut!((*_2));
_13 = Move(RET);
(*_2) = !4201207866_u32;
(*_3) = 63183_u16;
(*_1) = _7;
(*_1) = _4 << _4;
Goto(bb5)
}
bb7 = {
(*_1) = _8 | _4;
(*_1) = _7 * _8;
(*_2) = !3445748214_u32;
(*_2) = 596186323_u32 & 386740515_u32;
(*_3) = 63086_u16;
_6 = 3_usize as f32;
(*_3) = !22963_u16;
_17 = 9601012279314771617_usize * 5_usize;
(*_1) = _8 | _7;
(*_2) = 3667997733_u32 + 3818443949_u32;
(*_1) = _14 as isize;
(*_2) = 2336621433_u32 & 1322146716_u32;
(*_3) = 56096_u16;
(*_3) = 40171_u16 ^ 12745_u16;
(*_1) = _7;
(*_2) = 1714663190_u32;
_13 = core::ptr::addr_of_mut!(_23);
(*_13) = 240961154593548673563631114425995127623_u128 + 118966561262646887885903848928814653442_u128;
(*_1) = _8;
match (*_2) {
0 => bb1,
1714663190 => bb4,
_ => bb2
}
}
bb8 = {
(*_3) = 10396_u16;
(*_3) = 41533_u16 ^ 20431_u16;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 8619_u16 ^ 55781_u16;
(*_3) = 3750_u16 ^ 54702_u16;
_2 = core::ptr::addr_of_mut!(_18);
(*_3) = 1806_u16 + 54532_u16;
(*_3) = 61255_u16;
(*_1) = _8 ^ _7;
_14 = 145374887996704812328070128504231594633_u128 as u64;
(*_3) = _14 as u16;
_8 = (*_1) - (*_1);
_4 = (*_1) & (*_1);
(*_2) = 89182902630992094514579289406624544641_i128 as u32;
(*_2) = 4164114040_u32 << (*_1);
(*_1) = _4 & _4;
(*_3) = 52409_u16 & 43179_u16;
(*_2) = _6 as u32;
_10 = _4;
(*_1) = 277512598090237537435426126727111070421_u128 as isize;
(*_1) = _8 - _4;
(*_1) = _4;
_4 = !(*_1);
_5 = (-29175_i16) as isize;
_7 = (*_1) | (*_1);
(*_1) = false as isize;
(*_3) = 29014_u16 & 29635_u16;
Goto(bb3)
}
bb9 = {
(*_1) = _8 | _10;
(*_1) = _4 - _8;
(*_1) = _4 << _10;
(*_1) = !_10;
(*_1) = _8 + _10;
_3 = core::ptr::addr_of_mut!(_12);
(*_1) = _10 << _8;
_6 = _9 + _9;
_5 = 6660_u16 as isize;
(*_3) = 35498_u16 & 43701_u16;
(*_1) = 2966826537181450374_u64 as isize;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 3605747812332556455_u64 as u16;
(*_3) = _10 as u16;
(*_1) = _4 & _10;
(*_3) = !17017_u16;
(*_3) = 1865_u16 * 9578_u16;
_11 = 5053409446743254974_u64 as isize;
(*_1) = -_10;
_10 = _9 as isize;
(*_3) = !54506_u16;
_7 = _8 | _11;
_3 = core::ptr::addr_of_mut!((*_3));
_1 = core::ptr::addr_of!(_10);
Goto(bb2)
}
bb10 = {
_30 = core::ptr::addr_of_mut!(_22);
(*_13) = !289694303621616472941612116627364868273_u128;
(*_2) = !1553474015_u32;
(*_30) = -_16.0;
_30 = core::ptr::addr_of_mut!((*_30));
_15 = 74_i8 & (-25_i8);
(*_3) = 28241_u16;
_25 = [_14,_14,_14,_14];
(*_2) = _15 as u32;
(*_30) = _16.0 - _16.0;
(*_1) = _7;
(*_30) = _16.0 + _16.0;
match (*_3) {
0 => bb1,
1 => bb7,
2 => bb11,
28241 => bb13,
_ => bb12
}
}
bb11 = {
(*_1) = _8 | _10;
(*_1) = _4 - _8;
(*_1) = _4 << _10;
(*_1) = !_10;
(*_1) = _8 + _10;
_3 = core::ptr::addr_of_mut!(_12);
(*_1) = _10 << _8;
_6 = _9 + _9;
_5 = 6660_u16 as isize;
(*_3) = 35498_u16 & 43701_u16;
(*_1) = 2966826537181450374_u64 as isize;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 3605747812332556455_u64 as u16;
(*_3) = _10 as u16;
(*_1) = _4 & _10;
(*_3) = !17017_u16;
(*_3) = 1865_u16 * 9578_u16;
_11 = 5053409446743254974_u64 as isize;
(*_1) = -_10;
_10 = _9 as isize;
(*_3) = !54506_u16;
_7 = _8 | _11;
_3 = core::ptr::addr_of_mut!((*_3));
_1 = core::ptr::addr_of!(_10);
Goto(bb2)
}
bb12 = {
(*_3) = 10396_u16;
(*_3) = 41533_u16 ^ 20431_u16;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 8619_u16 ^ 55781_u16;
(*_3) = 3750_u16 ^ 54702_u16;
_2 = core::ptr::addr_of_mut!(_18);
(*_3) = 1806_u16 + 54532_u16;
(*_3) = 61255_u16;
(*_1) = _8 ^ _7;
_14 = 145374887996704812328070128504231594633_u128 as u64;
(*_3) = _14 as u16;
_8 = (*_1) - (*_1);
_4 = (*_1) & (*_1);
(*_2) = 89182902630992094514579289406624544641_i128 as u32;
(*_2) = 4164114040_u32 << (*_1);
(*_1) = _4 & _4;
(*_3) = 52409_u16 & 43179_u16;
(*_2) = _6 as u32;
_10 = _4;
(*_1) = 277512598090237537435426126727111070421_u128 as isize;
(*_1) = _8 - _4;
(*_1) = _4;
_4 = !(*_1);
_5 = (-29175_i16) as isize;
_7 = (*_1) | (*_1);
(*_1) = false as isize;
(*_3) = 29014_u16 & 29635_u16;
Goto(bb3)
}
bb13 = {
_16.0 = (*_30) - (*_30);
_31 = &mut _17;
(*_31) = 17038491951073029333_usize + 3380803407705415499_usize;
Goto(bb14)
}
bb14 = {
_5 = (*_1) ^ _7;
(*_1) = _5 * _7;
match (*_3) {
0 => bb15,
1 => bb16,
2 => bb17,
3 => bb18,
28241 => bb20,
_ => bb19
}
}
bb15 = {
(*_1) = _8 | _4;
(*_1) = _7 * _8;
(*_2) = !3445748214_u32;
(*_2) = 596186323_u32 & 386740515_u32;
(*_3) = 63086_u16;
_6 = 3_usize as f32;
(*_3) = !22963_u16;
_17 = 9601012279314771617_usize * 5_usize;
(*_1) = _8 | _7;
(*_2) = 3667997733_u32 + 3818443949_u32;
(*_1) = _14 as isize;
(*_2) = 2336621433_u32 & 1322146716_u32;
(*_3) = 56096_u16;
(*_3) = 40171_u16 ^ 12745_u16;
(*_1) = _7;
(*_2) = 1714663190_u32;
_13 = core::ptr::addr_of_mut!(_23);
(*_13) = 240961154593548673563631114425995127623_u128 + 118966561262646887885903848928814653442_u128;
(*_1) = _8;
match (*_2) {
0 => bb1,
1714663190 => bb4,
_ => bb2
}
}
bb16 = {
(*_3) = 10396_u16;
(*_3) = 41533_u16 ^ 20431_u16;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 8619_u16 ^ 55781_u16;
(*_3) = 3750_u16 ^ 54702_u16;
_2 = core::ptr::addr_of_mut!(_18);
(*_3) = 1806_u16 + 54532_u16;
(*_3) = 61255_u16;
(*_1) = _8 ^ _7;
_14 = 145374887996704812328070128504231594633_u128 as u64;
(*_3) = _14 as u16;
_8 = (*_1) - (*_1);
_4 = (*_1) & (*_1);
(*_2) = 89182902630992094514579289406624544641_i128 as u32;
(*_2) = 4164114040_u32 << (*_1);
(*_1) = _4 & _4;
(*_3) = 52409_u16 & 43179_u16;
(*_2) = _6 as u32;
_10 = _4;
(*_1) = 277512598090237537435426126727111070421_u128 as isize;
(*_1) = _8 - _4;
(*_1) = _4;
_4 = !(*_1);
_5 = (-29175_i16) as isize;
_7 = (*_1) | (*_1);
(*_1) = false as isize;
(*_3) = 29014_u16 & 29635_u16;
Goto(bb3)
}
bb17 = {
RET = core::ptr::addr_of_mut!((*_13));
(*_2) = (-7052218571088266713_i64) as u32;
(*_1) = _7 - _7;
(*_2) = 3869795462_u32 - 455757234_u32;
(*_2) = 127630568_u32;
(*_3) = 54561_u16 - 27442_u16;
(*_3) = !14945_u16;
(*_1) = -_4;
(*_2) = !1576686126_u32;
(*_3) = 58591_u16 ^ 42312_u16;
(*_3) = 1672_u16 >> (*_1);
(*_13) = (*_2) as u128;
(*_2) = 2162863067_u32;
_13 = core::ptr::addr_of_mut!((*_13));
(*_13) = 287524849339716582575479348534784410045_u128 << (*_3);
(*_3) = 50869_u16;
_17 = !5968387124617921855_usize;
(*_2) = 552919117_u32 | 2199255918_u32;
(*_13) = 21772727303794156748998270540932499585_u128;
RET = Move(_13);
_2 = core::ptr::addr_of_mut!((*_2));
_13 = Move(RET);
(*_2) = !4201207866_u32;
(*_3) = 63183_u16;
(*_1) = _7;
(*_1) = _4 << _4;
Goto(bb5)
}
bb18 = {
_30 = core::ptr::addr_of_mut!(_22);
(*_13) = !289694303621616472941612116627364868273_u128;
(*_2) = !1553474015_u32;
(*_30) = -_16.0;
_30 = core::ptr::addr_of_mut!((*_30));
_15 = 74_i8 & (-25_i8);
(*_3) = 28241_u16;
_25 = [_14,_14,_14,_14];
(*_2) = _15 as u32;
(*_30) = _16.0 - _16.0;
(*_1) = _7;
(*_30) = _16.0 + _16.0;
match (*_3) {
0 => bb1,
1 => bb7,
2 => bb11,
28241 => bb13,
_ => bb12
}
}
bb19 = {
(*_1) = _8 | _10;
(*_1) = _4 - _8;
(*_1) = _4 << _10;
(*_1) = !_10;
(*_1) = _8 + _10;
_3 = core::ptr::addr_of_mut!(_12);
(*_1) = _10 << _8;
_6 = _9 + _9;
_5 = 6660_u16 as isize;
(*_3) = 35498_u16 & 43701_u16;
(*_1) = 2966826537181450374_u64 as isize;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 3605747812332556455_u64 as u16;
(*_3) = _10 as u16;
(*_1) = _4 & _10;
(*_3) = !17017_u16;
(*_3) = 1865_u16 * 9578_u16;
_11 = 5053409446743254974_u64 as isize;
(*_1) = -_10;
_10 = _9 as isize;
(*_3) = !54506_u16;
_7 = _8 | _11;
_3 = core::ptr::addr_of_mut!((*_3));
_1 = core::ptr::addr_of!(_10);
Goto(bb2)
}
bb20 = {
_27 = '\u{aaa07}';
_13 = core::ptr::addr_of_mut!(_23);
_29 = core::ptr::addr_of!((*_30));
_32 = &mut _27;
(*_30) = (*_3) as f64;
(*_13) = 207117785294830304516782253799014528227_u128 >> _7;
(*_2) = (-938332435_i32) as u32;
(*_31) = 15497578980870117549_usize << (*_13);
_7 = !(*_1);
(*_32) = '\u{a82b9}';
_33 = &mut (*_31);
(*_33) = 13901482075325367326_usize << _5;
(*_32) = '\u{e93d}';
(*_33) = 0_usize;
(*_1) = (*_32) as isize;
_24.0.0 = Adt21::Variant3 { fld0: _14,fld1: (*_32),fld2: Move(_30) };
(*_33) = 1_usize << _8;
(*_2) = 1628624244_u32;
(*_1) = _4 - _7;
(*_3) = 8544_u16;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_1) = -_5;
Goto(bb21)
}
bb21 = {
(*_13) = (-3043775044293882387_i64) as u128;
(*_3) = 24776_u16;
(*_2) = 894205824_u32;
_9 = -_6;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_29 = core::ptr::addr_of!(_22);
(*_3) = (*_13) as u16;
(*_13) = 205187185443803220959560198848534717994_u128 ^ 81965500502298450135791017807946209435_u128;
(*_2) = 3058051087_u32 & 3437860028_u32;
_6 = -_9;
(*_2) = 3655145433_u32 << (*_1);
(*_29) = -_16.0;
(*_3) = 36354_u16 & 3578_u16;
(*_3) = (*_29) as u16;
(*_29) = _16.0 * _16.0;
(*_1) = _7 & _7;
_28 = (*_1) | (*_1);
_15 = 36_i8 + (-85_i8);
_7 = (*_3) as isize;
(*_3) = !46210_u16;
(*_2) = 2504834189_u32 & 4232927931_u32;
_5 = (*_1) & (*_1);
(*_13) = _12 as u128;
(*_29) = _15 as f64;
_40 = (*_2) as i128;
_3 = core::ptr::addr_of_mut!((*_3));
Goto(bb22)
}
bb22 = {
(*_13) = 211800265270629802839874451091980362207_u128;
_22 = (*_3) as f64;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_3) = 20739_u16 & 41699_u16;
(*_1) = _5 + _4;
(*_2) = 3644129375_u32;
(*_2) = !3640342136_u32;
(*_3) = 15112_u16;
_38.0 = (*_13) ^ (*_13);
(*_33) = 2_usize;
_39 = &_40;
_15 = (-38_i8) - 94_i8;
(*_13) = _38.0 * _38.0;
_45 = -(*_1);
_5 = Field::<u64>(Variant(_24.0.0, 3), 0) as isize;
_41 = (*_32);
_32 = &mut _41;
_30 = Move(Field::<*mut f64>(Variant(_24.0.0, 3), 2));
(*_2) = 4064155270_u32 << (*_13);
(*_1) = _45 * _28;
(*_13) = _38.0 | _38.0;
Goto(bb23)
}
bb23 = {
_42 = _20 ^ _20;
_44 = core::ptr::addr_of_mut!((*_32));
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_3) = !19882_u16;
(*_29) = _16.0;
Goto(bb24)
}
bb24 = {
(*_33) = true as usize;
(*_3) = _22 as u16;
(*_3) = 324_u16 - 36311_u16;
(*_3) = 43477_u16 | 30551_u16;
(*_2) = false as u32;
(*_3) = 55540_u16 << _28;
(*_3) = 32989_u16 << _10;
_24.1 = [(*_39),(*_39),(*_39),(*_39)];
place!(Field::<*mut f64>(Variant(_24.0.0, 3), 2)) = Move(_30);
(*_1) = (-1630276765932293212_i64) as isize;
(*_29) = _16.0;
(*_2) = !1853221607_u32;
_45 = -_4;
(*_33) = 13270410760816912185_usize & 3_usize;
(*_33) = 11795299084809601094_usize << (*_3);
RET = Move(_13);
_49.1 = Field::<u64>(Variant(_24.0.0, 3), 0) as i128;
(*_2) = 1174622588_u32 | 3900063197_u32;
(*_2) = !811338320_u32;
(*_3) = 7296_u16 ^ 5477_u16;
_31 = Move(_33);
_22 = _16.0;
(*_29) = (*_1) as f64;
_37 = [(*_39)];
(*_2) = 7601_i16 as u32;
_43 = true as isize;
Call(_35 = fn19(Move(RET)), ReturnTo(bb25), UnwindUnreachable())
}
bb25 = {
(*_1) = !_45;
(*_2) = 3489774626_u32;
(*_1) = -_8;
_51 = ((*_1),);
_13 = core::ptr::addr_of_mut!(_38.0);
(*_1) = _45 ^ _45;
(*_3) = _14 as u16;
(*_2) = 15121881397667411474_usize as u32;
(*_1) = true as isize;
(*_13) = _23 | _23;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_20 = _42 + _42;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_53 = (_45,);
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_2) = (-6567638888945898226_i64) as u32;
(*_13) = _23 - _23;
(*_13) = _23 & _23;
(*_3) = !44009_u16;
(*_13) = _8 as u128;
(*_2) = 3147635709_u32 >> (*_13);
_49.2 = ((*_13),);
(*_2) = 2092944858_u32;
(*_1) = _28 ^ _8;
match (*_2) {
0 => bb19,
2092944858 => bb27,
_ => bb26
}
}
bb26 = {
_27 = '\u{aaa07}';
_13 = core::ptr::addr_of_mut!(_23);
_29 = core::ptr::addr_of!((*_30));
_32 = &mut _27;
(*_30) = (*_3) as f64;
(*_13) = 207117785294830304516782253799014528227_u128 >> _7;
(*_2) = (-938332435_i32) as u32;
(*_31) = 15497578980870117549_usize << (*_13);
_7 = !(*_1);
(*_32) = '\u{a82b9}';
_33 = &mut (*_31);
(*_33) = 13901482075325367326_usize << _5;
(*_32) = '\u{e93d}';
(*_33) = 0_usize;
(*_1) = (*_32) as isize;
_24.0.0 = Adt21::Variant3 { fld0: _14,fld1: (*_32),fld2: Move(_30) };
(*_33) = 1_usize << _8;
(*_2) = 1628624244_u32;
(*_1) = _4 - _7;
(*_3) = 8544_u16;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_1) = -_5;
Goto(bb21)
}
bb27 = {
(*_3) = 3248_u16 & 62723_u16;
(*_2) = (*_1) as u32;
(*_29) = _35 + _35;
_18 = !1909118121_u32;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_10 = _8 * _4;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_16.0 = (*_29);
_36 = core::ptr::addr_of_mut!((*_3));
_20 = _42 << (*_1);
(*_29) = _16.0;
(*_29) = -_16.0;
(*_2) = !2389202098_u32;
place!(Field::<u64>(Variant(_24.0.0, 3), 0)) = _15 as u64;
(*_13) = _15 as u128;
(*_3) = !50693_u16;
_5 = -_45;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_5 = (*_1) - (*_1);
(*_1) = _53.0 * _4;
_62.2 = (*_2);
Goto(bb28)
}
bb28 = {
_50.3 = (*_39) & (*_39);
_50.0 = [_15,_15,_15];
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_49 = (Move(_44), (*_39), _38);
(*_13) = _23 >> (*_1);
(*_1) = _28 * _5;
(*_29) = -_35;
(*_1) = -_51.0;
(*_1) = false as isize;
(*_1) = (*_39) as isize;
(*_13) = !_23;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_45 = _9 as isize;
_37 = [(*_39)];
_62.1.1 = [_8,_28,_28,_5,_28,_4];
_60 = (*_1) & _51.0;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_3) = 41648_u16 ^ 44306_u16;
(*_29) = _16.0 + _35;
_58 = [_53.0,_53.0,_60,_28,_28];
_49.1 = (*_39) ^ (*_39);
(*_3) = 8000_u16 << _8;
_20 = _42;
_52 = (*_39) as isize;
(*_29) = _16.0 + _16.0;
Call((*_2) = core::intrinsics::transmute((*_32)), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
Goto(bb30)
}
bb30 = {
(*_29) = _16.0 * _35;
(*_2) = _62.2;
(*_2) = _62.2 & _62.2;
(*_29) = _35 - _16.0;
(*_1) = _60;
(*_3) = 30732_u16 - 3916_u16;
_61 = core::ptr::addr_of!((*_2));
(*_3) = 55758_u16;
_15 = true as i8;
_50.2.0 = (*_13);
_50.1 = [_15,_15,_15];
_3 = Move(_36);
(*_29) = _16.0 + _35;
_49.2.0 = (*_13) | (*_13);
(*_29) = _16.0 - _16.0;
_44 = core::ptr::addr_of_mut!((*_32));
Goto(bb31)
}
bb31 = {
(*_61) = !_62.2;
_1 = core::ptr::addr_of!((*_1));
(*_2) = !_62.2;
(*_13) = _49.2.0 + _50.2.0;
_18 = !_62.2;
(*_29) = (*_13) as f64;
(*_44) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_1) = _60;
_16.0 = -(*_29);
(*_44) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_1) = _4;
(*_29) = _16.0;
(*_29) = _35 + _35;
_2 = core::ptr::addr_of_mut!((*_2));
_23 = _49.2.0 - _49.2.0;
(*_1) = !_53.0;
(*_29) = _35 + _35;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_76 = &place!(Field::<*mut f64>(Variant(_24.0.0, 3), 2));
_8 = (*_1) * (*_1);
(*_1) = _5;
_35 = -(*_29);
Goto(bb32)
}
bb32 = {
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_79 = Field::<char>(Variant(_24.0.0, 3), 1);
match _12 {
0 => bb33,
1 => bb34,
2 => bb35,
3 => bb36,
4 => bb37,
55758 => bb39,
_ => bb38
}
}
bb33 = {
(*_61) = !_62.2;
_1 = core::ptr::addr_of!((*_1));
(*_2) = !_62.2;
(*_13) = _49.2.0 + _50.2.0;
_18 = !_62.2;
(*_29) = (*_13) as f64;
(*_44) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_1) = _60;
_16.0 = -(*_29);
(*_44) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_1) = _4;
(*_29) = _16.0;
(*_29) = _35 + _35;
_2 = core::ptr::addr_of_mut!((*_2));
_23 = _49.2.0 - _49.2.0;
(*_1) = !_53.0;
(*_29) = _35 + _35;
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_76 = &place!(Field::<*mut f64>(Variant(_24.0.0, 3), 2));
_8 = (*_1) * (*_1);
(*_1) = _5;
_35 = -(*_29);
Goto(bb32)
}
bb34 = {
(*_33) = true as usize;
(*_3) = _22 as u16;
(*_3) = 324_u16 - 36311_u16;
(*_3) = 43477_u16 | 30551_u16;
(*_2) = false as u32;
(*_3) = 55540_u16 << _28;
(*_3) = 32989_u16 << _10;
_24.1 = [(*_39),(*_39),(*_39),(*_39)];
place!(Field::<*mut f64>(Variant(_24.0.0, 3), 2)) = Move(_30);
(*_1) = (-1630276765932293212_i64) as isize;
(*_29) = _16.0;
(*_2) = !1853221607_u32;
_45 = -_4;
(*_33) = 13270410760816912185_usize & 3_usize;
(*_33) = 11795299084809601094_usize << (*_3);
RET = Move(_13);
_49.1 = Field::<u64>(Variant(_24.0.0, 3), 0) as i128;
(*_2) = 1174622588_u32 | 3900063197_u32;
(*_2) = !811338320_u32;
(*_3) = 7296_u16 ^ 5477_u16;
_31 = Move(_33);
_22 = _16.0;
(*_29) = (*_1) as f64;
_37 = [(*_39)];
(*_2) = 7601_i16 as u32;
_43 = true as isize;
Call(_35 = fn19(Move(RET)), ReturnTo(bb25), UnwindUnreachable())
}
bb35 = {
_30 = core::ptr::addr_of_mut!(_22);
(*_13) = !289694303621616472941612116627364868273_u128;
(*_2) = !1553474015_u32;
(*_30) = -_16.0;
_30 = core::ptr::addr_of_mut!((*_30));
_15 = 74_i8 & (-25_i8);
(*_3) = 28241_u16;
_25 = [_14,_14,_14,_14];
(*_2) = _15 as u32;
(*_30) = _16.0 - _16.0;
(*_1) = _7;
(*_30) = _16.0 + _16.0;
match (*_3) {
0 => bb1,
1 => bb7,
2 => bb11,
28241 => bb13,
_ => bb12
}
}
bb36 = {
_42 = _20 ^ _20;
_44 = core::ptr::addr_of_mut!((*_32));
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_3) = !19882_u16;
(*_29) = _16.0;
Goto(bb24)
}
bb37 = {
(*_3) = 10396_u16;
(*_3) = 41533_u16 ^ 20431_u16;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 8619_u16 ^ 55781_u16;
(*_3) = 3750_u16 ^ 54702_u16;
_2 = core::ptr::addr_of_mut!(_18);
(*_3) = 1806_u16 + 54532_u16;
(*_3) = 61255_u16;
(*_1) = _8 ^ _7;
_14 = 145374887996704812328070128504231594633_u128 as u64;
(*_3) = _14 as u16;
_8 = (*_1) - (*_1);
_4 = (*_1) & (*_1);
(*_2) = 89182902630992094514579289406624544641_i128 as u32;
(*_2) = 4164114040_u32 << (*_1);
(*_1) = _4 & _4;
(*_3) = 52409_u16 & 43179_u16;
(*_2) = _6 as u32;
_10 = _4;
(*_1) = 277512598090237537435426126727111070421_u128 as isize;
(*_1) = _8 - _4;
(*_1) = _4;
_4 = !(*_1);
_5 = (-29175_i16) as isize;
_7 = (*_1) | (*_1);
(*_1) = false as isize;
(*_3) = 29014_u16 & 29635_u16;
Goto(bb3)
}
bb38 = {
(*_3) = 10396_u16;
(*_3) = 41533_u16 ^ 20431_u16;
_1 = core::ptr::addr_of!((*_1));
(*_3) = 8619_u16 ^ 55781_u16;
(*_3) = 3750_u16 ^ 54702_u16;
_2 = core::ptr::addr_of_mut!(_18);
(*_3) = 1806_u16 + 54532_u16;
(*_3) = 61255_u16;
(*_1) = _8 ^ _7;
_14 = 145374887996704812328070128504231594633_u128 as u64;
(*_3) = _14 as u16;
_8 = (*_1) - (*_1);
_4 = (*_1) & (*_1);
(*_2) = 89182902630992094514579289406624544641_i128 as u32;
(*_2) = 4164114040_u32 << (*_1);
(*_1) = _4 & _4;
(*_3) = 52409_u16 & 43179_u16;
(*_2) = _6 as u32;
_10 = _4;
(*_1) = 277512598090237537435426126727111070421_u128 as isize;
(*_1) = _8 - _4;
(*_1) = _4;
_4 = !(*_1);
_5 = (-29175_i16) as isize;
_7 = (*_1) | (*_1);
(*_1) = false as isize;
(*_3) = 29014_u16 & 29635_u16;
Goto(bb3)
}
bb39 = {
place!(Field::<char>(Variant(_24.0.0, 3), 1)) = (*_32);
_11 = 15738442297444607363_usize as isize;
_3 = core::ptr::addr_of_mut!(_12);
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_48 = [(*_1)];
_38.0 = !_23;
(*_2) = !_62.2;
Goto(bb40)
}
bb40 = {
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
(*_1) = _60;
_68 = _28 - (*_1);
(*_32) = Field::<char>(Variant(_24.0.0, 3), 1);
_73 = (*_32);
_51 = _53;
_58 = [(*_1),(*_1),(*_1),(*_1),(*_1)];
(*_13) = _23 | _23;
(*_32) = _73;
_51 = (_8,);
_25 = [_14,Field::<u64>(Variant(_24.0.0, 3), 0),Field::<u64>(Variant(_24.0.0, 3), 0),Field::<u64>(Variant(_24.0.0, 3), 0)];
(*_13) = _49.2.0 | _23;
_78 = core::ptr::addr_of_mut!(_80);
(*_78).1.1 = _42 ^ _42;
(*_3) = 54267_u16 ^ 54941_u16;
(*_78).1.1 = _20;
_16.0 = -(*_29);
RET = core::ptr::addr_of_mut!(_38.0);
(*_78).1.1 = _42 >> _28;
_62.1.1 = [(*_1),(*_1),(*_1),_68,_4,(*_1)];
(*_78).1.2 = (-5267421430159523919_i64) << (*_78).1.1;
Goto(bb41)
}
bb41 = {
Call(_91 = dump_var(Move(_41), Move(_27), Move(_18), Move(_5)), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
Call(_91 = dump_var(Move(_42), Move(_7), Move(_25), Move(_51)), ReturnTo(bb43), UnwindUnreachable())
}
bb43 = {
Call(_91 = dump_var(Move(_43), Move(_48), Move(_15), Move(_53)), ReturnTo(bb44), UnwindUnreachable())
}
bb44 = {
Call(_91 = dump_var(Move(_58), Move(_79), Move(_10), Move(_38)), ReturnTo(bb45), UnwindUnreachable())
}
bb45 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn19(mut _1: *mut u128) -> f64 {
mir! {
type RET = f64;
let _2: u128;
let _3: (u16, (*const Adt17, [isize; 6], [u64; 3], i128), ([i8; 3], [i8; 3], (u128,), i128), f32);
let _4: i32;
let _5: &'static mut char;
let _6: i64;
let _7: u8;
let _8: char;
let _9: i16;
let _10: (u128,);
let _11: f64;
let _12: isize;
let _13: isize;
let _14: &'static i32;
let _15: f32;
let _16: f64;
let _17: Adt20;
let _18: char;
let _19: u16;
let _20: [u64; 3];
let _21: u64;
let _22: Adt67;
let _23: *const f64;
let _24: (*mut ([isize; 6], (isize, u8, i64)), u128, (Adt21,), *const isize);
let _25: u128;
let _26: Adt20;
let _27: isize;
let _28: bool;
let _29: (f64,);
let _30: *mut u16;
let _31: bool;
let _32: [isize; 6];
let _33: u128;
let _34: *const *const u32;
let _35: u8;
let _36: f32;
let _37: f32;
let _38: &'static mut usize;
let _39: (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _40: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _41: bool;
let _42: f32;
let _43: usize;
let _44: u8;
let _45: *const &'static mut usize;
let _46: char;
let _47: isize;
let _48: isize;
let _49: f64;
let _50: char;
let _51: [u128; 7];
let _52: &'static mut (*const Adt17, [isize; 6], [u64; 3], i128);
let _53: isize;
let _54: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _55: *const (*const Adt17, [isize; 6], [u64; 3], i128);
let _56: &'static (([i8; 3], [i8; 3], (u128,), i128), f64, &'static mut usize, i32);
let _57: &'static i32;
let _58: ();
let _59: ();
{
RET = 9223372036854775807_isize as f64;
RET = (-44_isize) as f64;
RET = 32280_u16 as f64;
RET = (-9223372036854775808_isize) as f64;
RET = 5438921542049151343_i64 as f64;
RET = 771192961_u32 as f64;
RET = 184611124245754432_i64 as f64;
RET = (-25005_i16) as f64;
RET = 88868421512707585_i64 as f64;
_2 = 149836608991535415821581389480491953211_u128 * 324313336788552751307015343332370228712_u128;
_3.1.1 = [9223372036854775807_isize,9223372036854775807_isize,(-89_isize),9223372036854775807_isize,(-9223372036854775808_isize),9223372036854775807_isize];
_3.2.1 = [15_i8,73_i8,(-35_i8)];
_3.1.1 = [9223372036854775807_isize,(-9223372036854775808_isize),28_isize,(-3_isize),9223372036854775807_isize,(-9223372036854775808_isize)];
_3.0 = 12696_u16;
_3.1.3 = _3.0 as i128;
_3.3 = (-28444_i16) as f32;
_3.0 = 42790_u16 * 23793_u16;
_3.2.2 = (_2,);
Goto(bb1)
}
bb1 = {
_3.2.3 = !_3.1.3;
_3.2.2 = (_2,);
_3.3 = 14_isize as f32;
_3.0 = 2363720584_u32 as u16;
_2 = _3.2.2.0 - _3.2.2.0;
_3.2.3 = -_3.1.3;
_3.2.0 = [41_i8,(-84_i8),99_i8];
_3.2.2 = (_2,);
_3.2.2.0 = _2 | _2;
_1 = core::ptr::addr_of_mut!(_2);
_3.2.1 = [(-65_i8),(-107_i8),53_i8];
Goto(bb2)
}
bb2 = {
_3.2.3 = _3.1.3 | _3.1.3;
_3.0 = 53703_u16 - 51171_u16;
(*_1) = _3.2.2.0 << _3.2.2.0;
_4 = !2014124093_i32;
_4 = !(-139435118_i32);
_3.1.2 = [7316364075972374625_u64,11926515632951704205_u64,1298344278160758008_u64];
_3.2.0 = [(-82_i8),(-111_i8),103_i8];
_3.0 = !58379_u16;
_2 = _3.2.2.0 | _3.2.2.0;
(*_1) = _3.2.2.0;
_3.1.3 = _3.2.3 >> (*_1);
(*_1) = _3.2.2.0 - _3.2.2.0;
(*_1) = 15755_i16 as u128;
(*_1) = RET as u128;
Goto(bb3)
}
bb3 = {
_4 = (-607740581_i32) * 310376235_i32;
_3.2.2.0 = (*_1);
_3.2.0 = [(-68_i8),(-64_i8),(-55_i8)];
(*_1) = !_3.2.2.0;
Goto(bb4)
}
bb4 = {
(*_1) = _3.2.2.0;
_3.3 = 17003540216713512195_u64 as f32;
(*_1) = (-54_isize) as u128;
(*_1) = _3.2.2.0 * _3.2.2.0;
(*_1) = 9223372036854775807_isize as u128;
(*_1) = !_3.2.2.0;
(*_1) = !_3.2.2.0;
(*_1) = _3.2.2.0 >> _3.2.2.0;
_3.1.2 = [9076875138537717044_u64,10304757114463560248_u64,18189957911210406271_u64];
_6 = (-647374139082947034_i64) >> _3.1.3;
(*_1) = _3.2.2.0 - _3.2.2.0;
(*_1) = _3.2.2.0 >> _6;
(*_1) = 551532267_u32 as u128;
_3.2.2.0 = (*_1) - (*_1);
(*_1) = !_3.2.2.0;
(*_1) = _3.2.2.0 << _6;
_3.1.2 = [17305107403995494753_u64,2778703246876590191_u64,1053495137837068924_u64];
Goto(bb5)
}
bb5 = {
_8 = '\u{64e3b}';
(*_1) = false as u128;
(*_1) = _3.2.2.0;
(*_1) = _3.2.2.0 - _3.2.2.0;
_3.2.3 = _3.1.3 * _3.1.3;
_3.3 = _4 as f32;
(*_1) = _3.2.2.0;
Goto(bb6)
}
bb6 = {
_6 = (-5285493794154741061_i64) & (-1354760331735912768_i64);
_3.2.3 = !_3.1.3;
(*_1) = _3.2.2.0 + _3.2.2.0;
_3.2.2 = ((*_1),);
(*_1) = _3.2.2.0;
_10 = ((*_1),);
(*_1) = _10.0 * _10.0;
_3.2.2 = ((*_1),);
_9 = 10585_i16;
(*_1) = _10.0 ^ _3.2.2.0;
Goto(bb7)
}
bb7 = {
(*_1) = _10.0 & _3.2.2.0;
_3.1.2 = [2712020708139197966_u64,11140313562530638769_u64,16011970536922617107_u64];
(*_1) = 2669421602_u32 as u128;
_9 = true as i16;
(*_1) = _3.2.2.0 * _3.2.2.0;
_10.0 = _3.3 as u128;
(*_1) = _10.0;
(*_1) = !_3.2.2.0;
Goto(bb8)
}
bb8 = {
(*_1) = _3.2.2.0;
_2 = _3.0 as u128;
(*_1) = _3.0 as u128;
_3.1.2 = [13090020546661459236_u64,9131005317365506861_u64,9821260638830990069_u64];
_6 = _9 as i64;
_3.1.2 = [16775583543738231889_u64,1166962090868447633_u64,10452233645749738342_u64];
(*_1) = _10.0 << _4;
_13 = _3.2.3 as isize;
_3.2.2.0 = !(*_1);
(*_1) = _10.0;
_3.2.1 = [(-89_i8),(-78_i8),(-27_i8)];
(*_1) = _3.2.2.0 >> _3.2.3;
_10.0 = _2 & (*_1);
(*_1) = _10.0 >> _3.2.3;
(*_1) = _10.0;
_10 = ((*_1),);
_3.1.1 = [_13,_13,_13,_13,_13,_13];
_3.1.1 = [_13,_13,_13,_13,_13,_13];
(*_1) = _13 as u128;
_7 = _4 as u8;
_16 = _3.1.3 as f64;
_1 = core::ptr::addr_of_mut!((*_1));
(*_1) = _10.0;
Goto(bb9)
}
bb9 = {
(*_1) = _3.2.2.0;
_1 = core::ptr::addr_of_mut!((*_1));
(*_1) = _10.0;
_3.2.3 = -_3.1.3;
(*_1) = _10.0 | _10.0;
_7 = 251_u8;
(*_1) = !_10.0;
_7 = 247_u8 << (*_1);
(*_1) = _3.2.2.0 * _10.0;
(*_1) = _10.0 << _3.0;
_9 = (-18551_i16) >> (*_1);
(*_1) = !_10.0;
_17 = Adt20::Variant2 { fld0: false,fld1: _9,fld2: 12520702345040849064_u64 };
Call((*_1) = core::intrinsics::transmute(_3.1.3), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
(*_1) = _10.0 >> _9;
_6 = 4062326863326866471_i64 + (-8344000385909186835_i64);
_4 = _3.3 as i32;
_10.0 = 2792112582_u32 as u128;
place!(Field::<u64>(Variant(_17, 2), 2)) = 7920064795521580663_u64;
_3.2.3 = _3.1.3 >> (*_1);
_5 = &mut _8;
(*_1) = _3.2.2.0 & _3.2.2.0;
_11 = -_16;
match Field::<u64>(Variant(_17, 2), 2) {
7920064795521580663 => bb12,
_ => bb11
}
}
bb11 = {
_4 = (-607740581_i32) * 310376235_i32;
_3.2.2.0 = (*_1);
_3.2.0 = [(-68_i8),(-64_i8),(-55_i8)];
(*_1) = !_3.2.2.0;
Goto(bb4)
}
bb12 = {
(*_5) = '\u{cc644}';
_10.0 = (*_1) << (*_1);
(*_5) = '\u{529c6}';
_3.1.3 = true as i128;
_10.0 = (*_1) << _7;
_3.2.3 = _3.1.3 - _3.1.3;
(*_5) = '\u{66553}';
place!(Field::<bool>(Variant(_17, 2), 0)) = !false;
place!(Field::<u64>(Variant(_17, 2), 2)) = !10576415735253361080_u64;
(*_1) = _10.0;
(*_1) = _10.0 << Field::<u64>(Variant(_17, 2), 2);
_3.3 = _6 as f32;
(*_1) = !_10.0;
_1 = core::ptr::addr_of_mut!((*_1));
(*_5) = '\u{104370}';
RET = _13 as f64;
(*_5) = '\u{25a1e}';
_20 = [Field::<u64>(Variant(_17, 2), 2),Field::<u64>(Variant(_17, 2), 2),Field::<u64>(Variant(_17, 2), 2)];
_17 = Adt20::Variant0 { fld0: _3.0 };
(*_1) = _10.0;
(*_1) = _3.2.2.0 ^ _10.0;
_6 = 2180835890507383844_i64 << (*_1);
Goto(bb13)
}
bb13 = {
_3.2.1 = [(-95_i8),(-29_i8),43_i8];
(*_1) = (-25_i8) as u128;
_10 = ((*_1),);
(*_1) = !_3.2.2.0;
_14 = &_4;
Goto(bb14)
}
bb14 = {
(*_1) = 5572235997202770613_u64 as u128;
(*_1) = !_3.2.2.0;
place!(Field::<u16>(Variant(_17, 0), 0)) = _9 as u16;
(*_1) = _3.2.2.0 ^ _3.2.2.0;
(*_5) = '\u{37d19}';
_18 = (*_5);
(*_1) = _3.2.2.0 << (*_14);
(*_5) = _18;
_3.1.3 = _3.2.3 ^ _3.2.3;
_18 = (*_5);
(*_1) = _3.2.2.0 << Field::<u16>(Variant(_17, 0), 0);
_5 = &mut _18;
(*_5) = '\u{447af}';
_3.2.2 = _10;
_3.2.1 = [80_i8,75_i8,80_i8];
_12 = -_13;
(*_1) = _10.0 << _9;
(*_5) = '\u{54831}';
_20 = _3.1.2;
(*_5) = '\u{8064d}';
(*_5) = '\u{ecda}';
(*_1) = _3.2.2.0 ^ _10.0;
_3.1.3 = (*_1) as i128;
_4 = -1589509212_i32;
(*_1) = _4 as u128;
(*_5) = '\u{58123}';
Goto(bb15)
}
bb15 = {
(*_5) = '\u{f633d}';
(*_5) = '\u{de52f}';
(*_5) = '\u{8ff30}';
(*_5) = '\u{a314f}';
(*_5) = '\u{27ef9}';
(*_1) = _3.2.2.0;
_3.2.0 = _3.2.1;
Goto(bb16)
}
bb16 = {
_24.1 = (*_1) >> _6;
_10 = (_24.1,);
(*_1) = !_24.1;
_24.3 = core::ptr::addr_of!(_12);
_24.1 = (*_1) - (*_1);
(*_5) = '\u{b7977}';
_20 = [1702482582272042924_u64,10169576335058327102_u64,6780248653922560864_u64];
(*_5) = '\u{71df2}';
(*_1) = _24.1 << _10.0;
Goto(bb17)
}
bb17 = {
(*_5) = '\u{de728}';
_3.1.2 = _20;
(*_1) = _24.1 >> _7;
_15 = _3.3;
_24.3 = core::ptr::addr_of!(_13);
(*_5) = '\u{e1d61}';
(*_1) = !_24.1;
_1 = core::ptr::addr_of_mut!((*_1));
_19 = !Field::<u16>(Variant(_17, 0), 0);
Goto(bb18)
}
bb18 = {
Call((*_1) = core::intrinsics::bswap(_24.1), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
_11 = _16 - _16;
_24.1 = 38_i8 as u128;
(*_1) = _10.0 ^ _10.0;
(*_5) = '\u{d0198}';
(*_1) = _10.0 ^ _10.0;
_3.2.2 = _10;
(*_1) = _10.0;
(*_5) = '\u{78778}';
(*_5) = '\u{106495}';
_13 = _15 as isize;
_23 = core::ptr::addr_of!(_29.0);
_26 = Move(_17);
_3.2.2.0 = _3.2.3 as u128;
_10.0 = (*_1) + (*_1);
_23 = core::ptr::addr_of!(_29.0);
(*_23) = -_11;
_3.2.2.0 = (*_1) & _10.0;
_6 = (*_1) as i64;
Goto(bb20)
}
bb20 = {
(*_5) = '\u{3744a}';
(*_5) = '\u{db537}';
(*_1) = 6413005337242792493_u64 as u128;
(*_1) = !_10.0;
(*_23) = _16 - _16;
(*_1) = _3.2.2.0 + _3.2.2.0;
_27 = _13 | _12;
(*_1) = !_10.0;
(*_23) = _11;
(*_5) = '\u{7e67b}';
(*_1) = _3.2.2.0 & _10.0;
_11 = -(*_23);
_31 = !false;
_33 = 11035679739186985650_u64 as u128;
_23 = core::ptr::addr_of!((*_23));
(*_1) = _3.2.2.0;
_3.2.1 = [11_i8,125_i8,49_i8];
(*_1) = _3.2.2.0;
(*_1) = _10.0;
(*_23) = _11;
Call((*_23) = core::intrinsics::fmaf64(RET, RET, RET), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
(*_1) = _10.0;
(*_23) = _16 + _11;
_1 = core::ptr::addr_of_mut!((*_1));
Goto(bb22)
}
bb22 = {
(*_1) = _3.2.2.0 | _10.0;
_9 = 3106937131_u32 as i16;
(*_23) = _16 + _11;
(*_23) = _11 * _11;
_37 = _3.3 + _15;
_30 = core::ptr::addr_of_mut!(_19);
_9 = (-17684_i16) & 19498_i16;
_36 = _15 - _3.3;
(*_23) = _11 - RET;
_32 = [_12,_12,_12,_27,_27,_12];
_6 = 1317241643996627867_i64 - 5829658480889870263_i64;
(*_1) = _3.2.2.0 ^ _10.0;
(*_30) = Field::<u16>(Variant(_26, 0), 0);
(*_1) = !_3.2.2.0;
_33 = _10.0 >> (*_1);
_6 = 5478215228617384157_i64 & 9011640918719406365_i64;
_3.2.2.0 = (*_1);
(*_5) = '\u{3caf2}';
(*_1) = !_33;
(*_30) = !Field::<u16>(Variant(_26, 0), 0);
_21 = !8745494774840101860_u64;
(*_30) = Field::<u16>(Variant(_26, 0), 0);
(*_23) = _11;
_3.2.0 = [(-56_i8),(-40_i8),33_i8];
_9 = (-5045_i16);
Goto(bb23)
}
bb23 = {
_39.0.2.0 = !(*_1);
(*_30) = Field::<u16>(Variant(_26, 0), 0);
_3.2.0 = [(-8_i8),61_i8,(-23_i8)];
(*_1) = _10.0 - _33;
(*_5) = '\u{a4b78}';
_25 = _33 * (*_1);
match _9 {
340282366920938463463374607431768206411 => bb24,
_ => bb8
}
}
bb24 = {
(*_5) = '\u{7076c}';
_41 = _31;
match _9 {
0 => bb4,
1 => bb6,
2 => bb18,
340282366920938463463374607431768206411 => bb26,
_ => bb25
}
}
bb25 = {
(*_1) = _10.0 & _3.2.2.0;
_3.1.2 = [2712020708139197966_u64,11140313562530638769_u64,16011970536922617107_u64];
(*_1) = 2669421602_u32 as u128;
_9 = true as i16;
(*_1) = _3.2.2.0 * _3.2.2.0;
_10.0 = _3.3 as u128;
(*_1) = _10.0;
(*_1) = !_3.2.2.0;
Goto(bb8)
}
bb26 = {
_39.0 = (_3.2.1, _3.2.0, _10, _3.2.3);
_39.0 = (_3.2.0, _3.2.1, _3.2.2, _3.2.3);
(*_30) = Field::<u16>(Variant(_26, 0), 0);
_39.1 = (*_23) - (*_23);
_32 = [_27,_27,_12,_27,_12,_13];
(*_1) = _10.0 | _39.0.2.0;
Call((*_23) = core::intrinsics::fmaf64(_11, _39.1, _39.1), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
(*_23) = _11 + _11;
(*_5) = '\u{b0864}';
_23 = core::ptr::addr_of!((*_23));
(*_5) = '\u{cfdc5}';
_10 = _3.2.2;
_1 = core::ptr::addr_of_mut!((*_1));
(*_30) = !Field::<u16>(Variant(_26, 0), 0);
(*_30) = Field::<u16>(Variant(_26, 0), 0);
_29.0 = -RET;
_3.2.0 = [32_i8,(-74_i8),46_i8];
(*_1) = _39.0.2.0 - _3.2.2.0;
_20 = _3.1.2;
(*_1) = _3.2.2.0 >> _10.0;
(*_23) = _16 * _39.1;
_31 = _41;
(*_30) = _9 as u16;
(*_23) = _11 + _11;
(*_23) = -_16;
(*_5) = '\u{d5910}';
_27 = _12 >> Field::<u16>(Variant(_26, 0), 0);
_42 = -_15;
(*_1) = _39.1 as u128;
_28 = (*_1) < _10.0;
Goto(bb28)
}
bb28 = {
_28 = !_41;
(*_1) = _41 as u128;
_25 = _10.0;
(*_30) = _3.1.3 as u16;
_50 = (*_5);
_48 = _27;
_17 = Adt20::Variant0 { fld0: Field::<u16>(Variant(_26, 0), 0) };
_24.3 = core::ptr::addr_of!(_27);
_39.3 = _4 - _4;
_2 = _9 as u128;
(*_30) = _3.2.3 as u16;
_27 = -_48;
Call(_35 = core::intrinsics::transmute(_41), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
_49 = (*_23) * _11;
(*_1) = _15 as u128;
(*_23) = RET;
_47 = _27;
_9 = (-26532_i16);
_39.0.1 = [35_i8,(-89_i8),106_i8];
(*_23) = _49 + _39.1;
(*_5) = _50;
(*_30) = Field::<u16>(Variant(_26, 0), 0) & Field::<u16>(Variant(_26, 0), 0);
(*_23) = -_11;
(*_5) = _50;
Goto(bb30)
}
bb30 = {
(*_30) = Field::<u16>(Variant(_17, 0), 0) ^ Field::<u16>(Variant(_17, 0), 0);
_44 = _7 & _7;
(*_1) = _39.0.2.0 - _39.0.2.0;
(*_23) = _16 - _49;
(*_30) = Field::<u16>(Variant(_17, 0), 0) | Field::<u16>(Variant(_26, 0), 0);
(*_1) = _25 * _25;
(*_23) = -_39.1;
_39.3 = _4;
_29.0 = _11 + _16;
_51 = [(*_1),(*_1),(*_1),_2,(*_1),(*_1),_10.0];
(*_23) = RET;
(*_23) = _49 * _49;
(*_1) = _39.0.2.0 + _3.2.2.0;
(*_30) = Field::<u16>(Variant(_17, 0), 0) ^ Field::<u16>(Variant(_26, 0), 0);
_32 = _3.1.1;
(*_23) = _39.1 - _11;
(*_1) = _3.2.2.0;
(*_5) = _50;
Goto(bb31)
}
bb31 = {
_3.2.0 = [(-100_i8),(-100_i8),(-49_i8)];
_2 = _3.2.2.0;
(*_5) = _50;
(*_1) = !_33;
(*_1) = _33 | _33;
_33 = (*_1) + (*_1);
(*_30) = (*_5) as u16;
Goto(bb32)
}
bb32 = {
(*_23) = _16;
(*_23) = _11 + _39.1;
(*_1) = _25 ^ _39.0.2.0;
(*_1) = Field::<u16>(Variant(_26, 0), 0) as u128;
_36 = -_15;
(*_1) = _3.2.2.0 - _10.0;
_30 = core::ptr::addr_of_mut!((*_30));
(*_23) = _21 as f64;
_3.3 = _21 as f32;
_3.2.2.0 = _33;
_39.0.2 = ((*_1),);
(*_23) = -_49;
(*_1) = _39.0.2.0 | _33;
(*_23) = _47 as f64;
_39.0.2 = ((*_1),);
RET = (*_23) * (*_23);
(*_5) = _50;
Goto(bb33)
}
bb33 = {
Call(_58 = dump_var(Move(_7), Move(_4), Move(_10), Move(_27)), ReturnTo(bb34), UnwindUnreachable())
}
bb34 = {
Call(_58 = dump_var(Move(_13), Move(_20), Move(_44), Move(_50)), ReturnTo(bb35), UnwindUnreachable())
}
bb35 = {
Call(_58 = dump_var(Move(_32), Move(_9), Move(_51), Move(_41)), ReturnTo(bb36), UnwindUnreachable())
}
bb36 = {
Call(_58 = dump_var(Move(_28), _59, _59, _59), ReturnTo(bb37), UnwindUnreachable())
}
bb37 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box((-967546282160553280_i64)), std::hint::black_box(9223372036854775807_isize), std::hint::black_box((-40_i8)), std::hint::black_box(9525851514653714114_u64), std::hint::black_box((-70622456917367091425038166492341411597_i128)));
                
                unsafe {
                    println!("hash: {}", H.finish());
                }
            
            }
#[derive(Debug)]
pub enum Adt17 {
Variant0{
fld0: u32,
fld1: u8,
fld2: isize,
fld3: u64,
fld4: u128,
fld5: u16,

},
Variant1{
fld0: bool,
fld1: i128,
fld2: isize,
fld3: i8,
fld4: usize,
fld5: u32,

}}
#[derive(Debug)]
pub enum Adt20 {
Variant0{
fld0: u16,

},
Variant1{
fld0: u128,
fld1: char,
fld2: isize,
fld3: f64,
fld4: *mut f64,
fld5: i32,
fld6: Adt17,

},
Variant2{
fld0: bool,
fld1: i16,
fld2: u64,

},
Variant3{
fld0: u8,
fld1: char,
fld2: Adt17,
fld3: i128,
fld4: i16,

}}
#[derive(Debug)]
pub enum Adt21 {
Variant0{
fld0: i16,
fld1: [isize; 6],
fld2: u64,

},
Variant1{
fld0: [isize; 6],
fld1: f32,
fld2: Adt17,
fld3: u16,
fld4: i16,
fld5: u128,
fld6: i64,
fld7: *mut f64,

},
Variant2{
fld0: *mut f64,
fld1: u128,
fld2: isize,
fld3: usize,

},
Variant3{
fld0: u64,
fld1: char,
fld2: *mut f64,

}}
#[derive(Debug)]
pub struct Adt53 {
fld0: ((*mut u32, u16, [i128; 4], i8), i16),
fld1: [i8; 5],
fld2: *const isize,
fld3: *mut u128,
}
#[derive(Debug)]
pub struct Adt61 {
fld0: [u64; 3],
fld1: (char,),
fld2: *const (*const Adt17, [isize; 6], [u64; 3], i128),
}
#[derive(Debug)]
pub enum Adt67 {
Variant0{
fld0: *mut u128,
fld1: f32,
fld2: Adt20,
fld3: (u16, (*const Adt17, [isize; 6], [u64; 3], i128), ([i8; 3], [i8; 3], (u128,), i128), f32),

},
Variant1{
fld0: Adt21,
fld1: (i32,),
fld2: [u128; 7],
fld3: i8,
fld4: (Adt21,),
fld5: f64,
fld6: *mut u32,

},
Variant2{
fld0: [i8; 3],
fld1: Adt20,
fld2: ([i8; 3], [i8; 3], (u128,), i128),
fld3: *mut u32,
fld4: (isize, u8, i64),
fld5: f32,
fld6: (*mut ([isize; 6], (isize, u8, i64)), u128, (Adt21,), *const isize),
fld7: *mut u16,

},
Variant3{
fld0: Adt53,
fld1: ([isize; 6], (isize, u8, i64)),
fld2: isize,
fld3: *mut f64,
fld4: *mut char,
fld5: ([i8; 3], [i8; 3], (u128,), i128),

}}
#[derive(Debug)]
pub enum Adt79 {
Variant0{
fld0: u128,

},
Variant1{
fld0: Adt67,
fld1: u64,
fld2: Adt20,
fld3: *const u32,
fld4: (i32,),
fld5: u32,
fld6: Adt21,

}}
#[derive(Debug)]
pub enum Adt82 {
Variant0{
fld0: *mut char,
fld1: ([isize; 6], (isize, u8, i64)),
fld2: (u16, (*const Adt17, [isize; 6], [u64; 3], i128), ([i8; 3], [i8; 3], (u128,), i128), f32),
fld3: i64,
fld4: *mut u32,
fld5: (u128,),

},
Variant1{
fld0: u8,
fld1: char,
fld2: [isize; 5],
fld3: i8,
fld4: [i128; 3],
fld5: Adt53,
fld6: (char,),
fld7: [u128; 7],

},
Variant2{
fld0: Adt17,
fld1: char,
fld2: usize,

},
Variant3{
fld0: [u64; 6],

}}

