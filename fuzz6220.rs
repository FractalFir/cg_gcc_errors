#![recursion_limit = "1024"]
#![feature(custom_mir, core_intrinsics, lazy_get)]
#![allow(unused_parens, unused_assignments, overflowing_literals)]
extern crate core;
use core::intrinsics::mir::*;
use std::fmt::Debug;

#[inline(never)]
fn dump_var(
    f: usize,
    var0: usize,
    val0: impl Debug,
    var1: usize,
    val1: impl Debug,
    var2: usize,
    val2: impl Debug,
    var3: usize,
    val3: impl Debug,
) {
    println!(
        "fn{f}:_{var0} = {val0:?}\n_{var1} = {val1:?}\n_{var2} = {val2:?}\n_{var3} = {val3:?}"
    );
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(
    mut _1: bool,
    mut _2: char,
    mut _3: u32,
    mut _4: i8,
    mut _5: i16,
    mut _6: i32,
    mut _7: u64,
    mut _8: i128,
    mut _9: usize,
    mut _10: u8,
) -> *const isize {
    mir! {
    type RET = *const isize;
    let _11: isize;
    let _12: *mut *const (u16, char, u16, char);
    let _13: isize;
    let _14: i128;
    let _15: *mut &'static mut i128;
    let _16: i128;
    let _17: isize;
    let _18: *mut *mut u128;
    let _19: i8;
    let _20: &'static u16;
    let _21: ();
    let _22: ();
    {
    _6 = (-490548648_i32) << 27_u8;
    _3 = 9223372036854775807_isize as u32;
    _9 = 4_usize | 0_usize;
    _3 = 276284447_u32;
    _5 = (-20316_i16) & 21671_i16;
    _9 = 3211410340839670799_usize;
    _10 = 117_u8 >> _3;
    _3 = 108473845_u32 * 3429943929_u32;
    _4 = 106_i8 << _10;
    Call(_3 = fn1(_9, _10, _6), ReturnTo(bb1), UnwindUnreachable())
    }
    bb1 = {
    _4 = 13_i8 | 69_i8;
    _11 = !9223372036854775807_isize;
    _4 = (-83_i8) * (-60_i8);
    _10 = 28_u8 ^ 126_u8;
    match _9 {
    0 => bb2,
    1 => bb3,
    2 => bb4,
    3 => bb5,
    4 => bb6,
    5 => bb7,
    6 => bb8,
    3211410340839670799 => bb10,
    _ => bb9
    }
    }
    bb2 = {
    Return()
    }
    bb3 = {
    Return()
    }
    bb4 = {
    Return()
    }
    bb5 = {
    Return()
    }
    bb6 = {
    Return()
    }
    bb7 = {
    Return()
    }
    bb8 = {
    Return()
    }
    bb9 = {
    Return()
    }
    bb10 = {
    _8 = -(-74594111102561672337624229532925128096_i128);
    _6 = _10 as i32;
    _3 = 327404582_u32 - 3447443329_u32;
    _7 = 2566651110013045348_u64 + 18042342023407690942_u64;
    match _9 {
    0 => bb5,
    1 => bb2,
    3211410340839670799 => bb12,
    _ => bb11
    }
    }
    bb11 = {
    Return()
    }
    bb12 = {
    _9 = !1860958094811741148_usize;
    _1 = _3 == _3;
    _5 = '\u{f2e32}' as i16;
    _3 = 1705677637_u32;
    _11 = !(-69_isize);
    _2 = '\u{301b4}';
    _2 = '\u{44a45}';
    _6 = (-2083129733_i32) ^ (-35950126_i32);
    _2 = '\u{9f647}';
    _6 = (-579835010_i32) & (-913890743_i32);
    _10 = 247_u8 >> _7;
    RET = core::ptr::addr_of!(_13);
    RET = core::ptr::addr_of!((*RET));
    (*RET) = _11;
    (*RET) = _11 - _11;
    (*RET) = _11;
    _4 = _5 as i8;
    (*RET) = _2 as isize;
    Call((*RET) = fn2(Move(RET), _5, _6, _3, _3, _11, _4, _11, _3, _1), ReturnTo(bb13), UnwindUnreachable())
    }
    bb13 = {
    _9 = 7114802606059189462_usize;
    _5 = _8 as i16;
    _14 = _8 << _13;
    _2 = '\u{59ab6}';
    _10 = 226_u8 >> _9;
    _6 = 897749596_i32 << _14;
    Goto(bb14)
    }
    bb14 = {
    _13 = (-2536769339401828889_i64) as isize;
    _4 = 6410058577522609581_i64 as i8;
    _14 = _3 as i128;
    _9 = 2_usize - 4345415827160416690_usize;
    _2 = '\u{76aa2}';
    RET = core::ptr::addr_of!(_13);
    _13 = _11;
    _3 = 2820832109_u32 ^ 3855585435_u32;
    _4 = !(-26_i8);
    _3 = 148517108_u32 + 1896541022_u32;
    _9 = 6_usize;
    (*RET) = _11 * _11;
    _13 = _11 | _11;
    (*RET) = _11 | _11;
    _11 = (*RET);
    (*RET) = _1 as isize;
    _13 = _1 as isize;
    Call(_14 = core::intrinsics::transmute(_8), ReturnTo(bb15), UnwindUnreachable())
    }
    bb15 = {
    (*RET) = _11 >> _6;
    _11 = (*RET) | (*RET);
    (*RET) = !_11;
    (*RET) = _2 as isize;
    (*RET) = -_11;
    (*RET) = _11;
    (*RET) = !_11;
    (*RET) = !_11;
    _6 = _7 as i32;
    (*RET) = _11;
    _13 = _5 as isize;
    _16 = -_14;
    (*RET) = _11 + _11;
    RET = core::ptr::addr_of!(_11);
    (*RET) = _13;
    (*RET) = _13 ^ _13;
    (*RET) = _13 | _13;
    _6 = (*RET) as i32;
    _4 = _7 as i8;
    _9 = !2_usize;
    (*RET) = _1 as isize;
    (*RET) = _13 >> _13;
    _1 = !true;
    _3 = 1124440513_u32;
    _19 = !_4;
    (*RET) = -_13;
    _17 = 8896214980887425441_i64 as isize;
    Goto(bb16)
    }
    bb16 = {
    Call(_21 = dump_var(0_usize, 7_usize, Move(_7), 19_usize, Move(_19), 16_usize, Move(_16), 13_usize, Move(_13)), ReturnTo(bb17), UnwindUnreachable())
    }
    bb17 = {
    Call(_21 = dump_var(0_usize, 11_usize, Move(_11), 5_usize, Move(_5), 6_usize, Move(_6), 14_usize, Move(_14)), ReturnTo(bb18), UnwindUnreachable())
    }
    bb18 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn1(mut _1: usize, mut _2: u8, mut _3: i32) -> u32 {
    mir! {
    type RET = u32;
    let _4: &'static &'static i32;
    let _5: char;
    let _6: (char, i64, u64);
    let _7: isize;
    let _8: i64;
    let _9: f64;
    let _10: &'static *const u32;
    let _11: i128;
    let _12: [i128; 3];
    let _13: *const usize;
    let _14: *const &'static *mut &'static *mut f32;
    let _15: char;
    let _16: i8;
    let _17: isize;
    let _18: isize;
    let _19: isize;
    let _20: *const [u32; 7];
    let _21: *mut *const (u16, char, u16, char);
    let _22: (*mut &'static *mut f32, Adt19, usize);
    let _23: *mut f32;
    let _24: i32;
    let _25: ();
    let _26: ();
    {
    _1 = 10923621060836370633_usize - 7_usize;
    RET = 2470395427_u32;
    _1 = 2_usize;
    RET = 1061464682_u32;
    _1 = 10110641985695007050_usize & 12387858373422632693_usize;
    _3 = (-238975214_i32);
    _1 = !10704812173381955184_usize;
    _3 = _2 as i32;
    RET = !1688394608_u32;
    _2 = !12_u8;
    _1 = 17864847905402721782_usize;
    _5 = '\u{b372d}';
    RET = 59472_u16 as u32;
    RET = 2885046697_u32 & 361323776_u32;
    RET = 2599913190_u32 - 4102448881_u32;
    _5 = '\u{554fb}';
    _6 = (_5, (-7259225364892192805_i64), 16928225710780353299_u64);
    _5 = _6.0;
    _5 = _6.0;
    _7 = (-9223372036854775808_isize) | 9223372036854775807_isize;
    RET = 1436856598_u32;
    _8 = _6.2 as i64;
    _1 = 6_usize | 6_usize;
    _3 = !1217864800_i32;
    _6.2 = 4446556873352513170_u64 | 12196036179529192670_u64;
    match RET {
    1436856598 => bb2,
    _ => bb1
    }
    }
    bb1 = {
    Return()
    }
    bb2 = {
    _7 = _3 as isize;
    _3 = !(-743006746_i32);
    _9 = _7 as f64;
    _6 = (_5, _8, 3800893789261763850_u64);
    _5 = _6.0;
    _1 = !0_usize;
    _6.0 = _5;
    _7 = (-9223372036854775808_isize) - (-9223372036854775808_isize);
    _9 = (-101554931956271220413604886313671703357_i128) as f64;
    _3 = (-1096296857_i32);
    RET = 3121413472_u32 << _6.2;
    _2 = 40_u8 * 128_u8;
    _1 = 7997395823062230315_usize;
    _6 = (_5, _8, 2156106303908624764_u64);
    _8 = _6.1;
    _6 = (_5, _8, 11557505528953355191_u64);
    _3 = !(-1957322460_i32);
    _11 = 56420379835363344264942848716291695527_i128 >> _2;
    RET = 2418287626_u32 ^ 691610479_u32;
    _6.2 = 3350002059337292686_u64 - 18187277867447963995_u64;
    RET = 218931031874376858970617599593324445011_u128 as u32;
    _6 = (_5, _8, 16026867390980505515_u64);
    _6 = (_5, _8, 16482684623485857419_u64);
    _6 = (_5, _8, 7620587094831521921_u64);
    _12 = [_11,_11,_11];
    RET = 207119998_u32 - 1970465333_u32;
    _2 = !157_u8;
    Goto(bb3)
    }
    bb3 = {
    _6.1 = _8 << _7;
    _6.1 = _8 - _8;
    _6.2 = 4728293845938169984_u64;
    _6.1 = -_8;
    _3 = (-45064466_i32) << _11;
    _7 = (-9223372036854775808_isize) + (-94_isize);
    _13 = core::ptr::addr_of!(_1);
    (*_13) = (-8908_i16) as usize;
    (*_13) = 4_usize | 2_usize;
    _5 = _6.0;
    (*_13) = _6.2 as usize;
    (*_13) = 520818035361301192_usize;
    _8 = RET as i64;
    _9 = _11 as f64;
    _5 = _6.0;
    _11 = -111486309981891241854366817015718563730_i128;
    _6.2 = 18268522563136351047_u64;
    Call(_3 = core::intrinsics::transmute(_6.0), ReturnTo(bb4), UnwindUnreachable())
    }
    bb4 = {
    (*_13) = 0_usize;
    _11 = _12[_1] ^ _12[_1];
    (*_13) = !7_usize;
    (*_13) = 33843_u16 as usize;
    _6.0 = _5;
    (*_13) = 1_usize ^ 5_usize;
    (*_13) = 6_usize & 12064610476128499371_usize;
    (*_13) = 3612845010838103432_usize;
    (*_13) = 3_usize;
    _6.2 = 6015520656689617594_u64 ^ 9578640206225606554_u64;
    (*_13) = 4485177144260932209_usize + 15796985663520062514_usize;
    (*_13) = _9 as usize;
    (*_13) = 7_usize;
    (*_13) = !18174979463075466299_usize;
    _7 = (-46_isize) - (-9223372036854775808_isize);
    (*_13) = _5 as usize;
    (*_13) = 1949309668186196621_usize - 683507353911111252_usize;
    _7 = (*_13) as isize;
    (*_13) = 0_usize - 6_usize;
    _15 = _5;
    (*_13) = 7_usize ^ 4_usize;
    _8 = _6.1;
    Goto(bb5)
    }
    bb5 = {
    (*_13) = _3 as usize;
    (*_13) = (-21177_i16) as usize;
    _16 = 66_i8 | (-3_i8);
    (*_13) = 2_usize;
    (*_13) = _6.0 as usize;
    (*_13) = RET as usize;
    _6.2 = !7840761727199031439_u64;
    Goto(bb6)
    }
    bb6 = {
    _6.2 = 5850583067398516892_u64 + 147201484560160354_u64;
    (*_13) = 6_usize * 9004595466435624565_usize;
    _11 = -158630285373352166778915638158916988224_i128;
    (*_13) = !14004190613148182900_usize;
    (*_13) = 18237734597913013231_usize - 4299765422103124995_usize;
    (*_13) = _11 as usize;
    (*_13) = !4_usize;
    (*_13) = _15 as usize;
    (*_13) = 0_usize ^ 0_usize;
    _6 = (_15, _8, 15327673155462763199_u64);
    _7 = -9223372036854775807_isize;
    (*_13) = !4_usize;
    (*_13) = 3_usize;
    _6.2 = 48655_u16 as u64;
    (*_13) = 45786533605681192_usize;
    _19 = _7 + _7;
    _18 = _19 * _19;
    (*_13) = 10895206503955656036_usize;
    _6.2 = 2863664591329399741_u64 | 18089281652400719164_u64;
    (*_13) = _18 as usize;
    _22.2 = (*_13) - (*_13);
    _7 = -_18;
    Goto(bb7)
    }
    bb7 = {
    (*_13) = _22.2 ^ _22.2;
    _12 = [_11,_11,_11];
    (*_13) = _22.2 + _22.2;
    (*_13) = !_22.2;
    _13 = core::ptr::addr_of!((*_13));
    (*_13) = _22.2 & _22.2;
    _6.2 = 17442543694354436944_u64 - 827520451716642830_u64;
    (*_13) = _6.1 as usize;
    RET = 3889540976_u32 << (*_13);
    (*_13) = _22.2 - _22.2;
    _8 = _6.1 << (*_13);
    (*_13) = _22.2;
    (*_13) = _22.2 - _22.2;
    _12 = [_11,_11,_11];
    _6 = (_5, _8, 1255929956430962267_u64);
    _24 = false as i32;
    _6.0 = _5;
    RET = 1019379600_u32 >> (*_13);
    _17 = true as isize;
    (*_13) = _22.2 | _22.2;
    (*_13) = _22.2;
    _8 = _6.1;
    _17 = _7 >> (*_13);
    (*_13) = _22.2 | _22.2;
    _22.2 = _1;
    _22.2 = (*_13) * (*_13);
    (*_13) = _22.2 * _22.2;
    Goto(bb8)
    }
    bb8 = {
    Call(_25 = dump_var(1_usize, 8_usize, Move(_8), 2_usize, Move(_2), 17_usize, Move(_17), 1_usize, Move(_1)), ReturnTo(bb9), UnwindUnreachable())
    }
    bb9 = {
    Call(_25 = dump_var(1_usize, 18_usize, Move(_18), 12_usize, Move(_12), 5_usize, Move(_5), 26_usize, _26), ReturnTo(bb10), UnwindUnreachable())
    }
    bb10 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn2(
    mut _1: *const isize,
    mut _2: i16,
    mut _3: i32,
    mut _4: u32,
    mut _5: u32,
    mut _6: isize,
    mut _7: i8,
    mut _8: isize,
    mut _9: u32,
    mut _10: bool,
) -> isize {
    mir! {
    type RET = isize;
    let _11: u16;
    let _12: (f32, Adt19, u64);
    let _13: char;
    let _14: i128;
    let _15: u64;
    let _16: f64;
    let _17: (Adt38, *mut i8, f32, u16);
    let _18: &'static mut [u32; 7];
    let _19: usize;
    let _20: isize;
    let _21: &'static *mut &'static *mut f32;
    let _22: f32;
    let _23: isize;
    let _24: u32;
    let _25: bool;
    let _26: i16;
    let _27: isize;
    let _28: &'static &'static i32;
    let _29: isize;
    let _30: isize;
    let _31: (i16, &'static mut *const usize, *mut *mut u128);
    let _32: *const &'static *mut &'static *mut f32;
    let _33: ();
    let _34: ();
    {
    RET = _8 - _8;
    _4 = !_9;
    _2 = 27451_i16 ^ (-22932_i16);
    _1 = core::ptr::addr_of!(_8);
    Goto(bb1)
    }
    bb1 = {
    _9 = _4;
    (*_1) = _6;
    _11 = '\u{bc6e7}' as u16;
    RET = !(*_1);
    (*_1) = -RET;
    _10 = (*_1) > (*_1);
    _2 = (-32684_i16) << _8;
    (*_1) = _6 | RET;
    Call((*_1) = core::intrinsics::bswap(_6), ReturnTo(bb2), UnwindUnreachable())
    }
    bb2 = {
    (*_1) = !_6;
    (*_1) = !RET;
    (*_1) = _6;
    (*_1) = !RET;
    _4 = _5;
    (*_1) = _6;
    (*_1) = '\u{25263}' as isize;
    _13 = '\u{b0476}';
    (*_1) = RET | _6;
    (*_1) = RET;
    _12.0 = _11 as f32;
    match _5 {
    0 => bb3,
    1 => bb4,
    2 => bb5,
    3 => bb6,
    4 => bb7,
    5 => bb8,
    6 => bb9,
    1705677637 => bb11,
    _ => bb10
    }
    }
    bb3 = {
    _9 = _4;
    (*_1) = _6;
    _11 = '\u{bc6e7}' as u16;
    RET = !(*_1);
    (*_1) = -RET;
    _10 = (*_1) > (*_1);
    _2 = (-32684_i16) << _8;
    (*_1) = _6 | RET;
    Call((*_1) = core::intrinsics::bswap(_6), ReturnTo(bb2), UnwindUnreachable())
    }
    bb4 = {
    Return()
    }
    bb5 = {
    Return()
    }
    bb6 = {
    Return()
    }
    bb7 = {
    Return()
    }
    bb8 = {
    Return()
    }
    bb9 = {
    Return()
    }
    bb10 = {
    Return()
    }
    bb11 = {
    _7 = (-5965270870520108484_i64) as i8;
    _12.2 = (-164714684559875379919518575010379717139_i128) as u64;
    match _4 {
    0 => bb10,
    1 => bb2,
    2 => bb3,
    3 => bb4,
    4 => bb8,
    5 => bb6,
    1705677637 => bb12,
    _ => bb9
    }
    }
    bb12 = {
    (*_1) = RET & RET;
    _12.0 = 2259476867524834697_i64 as f32;
    (*_1) = _6 ^ _6;
    (*_1) = _6 + RET;
    _12.0 = _7 as f32;
    (*_1) = RET & RET;
    (*_1) = _6 - _6;
    (*_1) = _6 - RET;
    (*_1) = _6;
    (*_1) = RET + _6;
    _17.2 = _12.0;
    (*_1) = -RET;
    _17.0.fld0 = _10;
    _17.3 = !_11;
    (*_1) = RET;
    _12.1 = Adt19::Variant0 { fld0: _12.0 };
    (*_1) = -RET;
    _12.1 = Adt19::Variant1 { fld0: 5900416280192199214_i64,fld1: _17.3 };
    _12.0 = _17.2 - _17.2;
    _1 = core::ptr::addr_of!(_6);
    _1 = core::ptr::addr_of!((*_1));
    _4 = !_9;
    _8 = (*_1);
    _17.1 = core::ptr::addr_of_mut!(_7);
    _15 = _12.2 << (*_1);
    _16 = (-3256106608463376368_i64) as f64;
    (*_1) = RET ^ _8;
    (*_1) = RET >> _3;
    match _5 {
    0 => bb3,
    1705677637 => bb14,
    _ => bb13
    }
    }
    bb13 = {
    Return()
    }
    bb14 = {
    (*_1) = _8 * _8;
    (*_1) = !_8;
    _4 = _5;
    (*_1) = _7 as isize;
    _17.2 = _12.0 + _12.0;
    _12.0 = _17.2 * _17.2;
    _3 = (-2040533717_i32) | 1920924768_i32;
    _11 = _17.3;
    _1 = core::ptr::addr_of!(_6);
    _17.0.fld1 = _11 as u8;
    (*_1) = _8;
    (*_1) = 112574652318580291556652859739937967926_i128 as isize;
    Goto(bb15)
    }
    bb15 = {
    place!(Field::<i64>(Variant(_12.1, 1), 0)) = 5622074495717962247_i64 >> (*_1);
    (*_1) = !_8;
    (*_1) = _8;
    _12.2 = (*_1) as u64;
    (*_1) = _8 << _17.0.fld1;
    _12.0 = -_17.2;
    (*_1) = _8 + RET;
    _5 = _4 & _9;
    Call((*_1) = fn3(_17.0, Move(_17), Move(_1)), ReturnTo(bb16), UnwindUnreachable())
    }
    bb16 = {
    _9 = _5;
    _1 = core::ptr::addr_of!(_20);
    (*_1) = _6;
    _12.1 = Adt19::Variant0 { fld0: _12.0 };
    _17.0.fld0 = !_10;
    (*_1) = _13 as isize;
    _19 = !8709539860994046717_usize;
    (*_1) = _6;
    _12.1 = Adt19::Variant1 { fld0: 2102338319415284219_i64,fld1: _11 };
    _17.2 = _12.0 - _12.0;
    (*_1) = _6;
    (*_1) = _6;
    _14 = 158801104880259612327299785983295593779_i128 & 166022442718972847310586321733306049718_i128;
    _17.1 = core::ptr::addr_of_mut!(_7);
    _25 = _10;
    (*_1) = _6 & _6;
    _3 = (-1922871724_i32) * 995968542_i32;
    _17.2 = _11 as f32;
    (*_1) = _16 as isize;
    _27 = (*_1) << (*_1);
    match _4 {
    0 => bb13,
    1 => bb10,
    2 => bb3,
    3 => bb17,
    4 => bb18,
    5 => bb19,
    1705677637 => bb21,
    _ => bb20
    }
    }
    bb17 = {
    place!(Field::<i64>(Variant(_12.1, 1), 0)) = 5622074495717962247_i64 >> (*_1);
    (*_1) = !_8;
    (*_1) = _8;
    _12.2 = (*_1) as u64;
    (*_1) = _8 << _17.0.fld1;
    _12.0 = -_17.2;
    (*_1) = _8 + RET;
    _5 = _4 & _9;
    Call((*_1) = fn3(_17.0, Move(_17), Move(_1)), ReturnTo(bb16), UnwindUnreachable())
    }
    bb18 = {
    Return()
    }
    bb19 = {
    _9 = _4;
    (*_1) = _6;
    _11 = '\u{bc6e7}' as u16;
    RET = !(*_1);
    (*_1) = -RET;
    _10 = (*_1) > (*_1);
    _2 = (-32684_i16) << _8;
    (*_1) = _6 | RET;
    Call((*_1) = core::intrinsics::bswap(_6), ReturnTo(bb2), UnwindUnreachable())
    }
    bb20 = {
    _7 = (-5965270870520108484_i64) as i8;
    _12.2 = (-164714684559875379919518575010379717139_i128) as u64;
    match _4 {
    0 => bb10,
    1 => bb2,
    2 => bb3,
    3 => bb4,
    4 => bb8,
    5 => bb6,
    1705677637 => bb12,
    _ => bb9
    }
    }
    bb21 = {
    _17.1 = core::ptr::addr_of_mut!(_7);
    (*_1) = _19 as isize;
    _4 = !_5;
    (*_1) = _7 as isize;
    _11 = Field::<u16>(Variant(_12.1, 1), 1) | Field::<u16>(Variant(_12.1, 1), 1);
    (*_1) = -_6;
    (*_1) = _11 as isize;
    _5 = _9;
    (*_1) = _6 * _6;
    _17.2 = _12.0;
    _12.0 = _17.2 - _17.2;
    (*_1) = -_6;
    _5 = _9 | _4;
    _19 = !154324724564984337_usize;
    _24 = (-7387354944997064603_i64) as u32;
    (*_1) = _27 << _6;
    _24 = _9 + _9;
    _13 = '\u{80019}';
    _9 = _5;
    _8 = _19 as isize;
    (*_1) = !_6;
    _15 = _12.2 + _12.2;
    Goto(bb22)
    }
    bb22 = {
    _29 = (*_1) | (*_1);
    (*_1) = (-5700737117018847508_i64) as isize;
    _17.2 = -_12.0;
    (*_1) = _29;
    Goto(bb23)
    }
    bb23 = {
    _30 = (*_1) - (*_1);
    _19 = 2_usize;
    _27 = (*_1) ^ (*_1);
    (*_1) = _29;
    _17.0.fld1 = !120_u8;
    _3 = 1974352442_i32 & 329090610_i32;
    (*_1) = !_30;
    _4 = !_9;
    _1 = core::ptr::addr_of!(RET);
    (*_1) = _30 + _20;
    (*_1) = 196282538932702649401602673873245405864_u128 as isize;
    _9 = !_5;
    (*_1) = _27 + _27;
    (*_1) = _30 * _29;
    (*_1) = _30;
    _12.1 = Adt19::Variant1 { fld0: 6895932766907231654_i64,fld1: _11 };
    _7 = 118_i8;
    place!(Field::<i64>(Variant(_12.1, 1), 0)) = _2 as i64;
    _25 = _10;
    _31.0 = _2;
    _20 = -(*_1);
    _2 = !_31.0;
    _4 = !_24;
    _13 = '\u{7a25f}';
    _4 = !_24;
    Goto(bb24)
    }
    bb24 = {
    Call(_33 = dump_var(2_usize, 4_usize, Move(_4), 5_usize, Move(_5), 25_usize, Move(_25), 2_usize, Move(_2)), ReturnTo(bb25), UnwindUnreachable())
    }
    bb25 = {
    Call(_33 = dump_var(2_usize, 10_usize, Move(_10), 11_usize, Move(_11), 7_usize, Move(_7), 30_usize, Move(_30)), ReturnTo(bb26), UnwindUnreachable())
    }
    bb26 = {
    Call(_33 = dump_var(2_usize, 13_usize, Move(_13), 14_usize, Move(_14), 34_usize, _34, 34_usize, _34), ReturnTo(bb27), UnwindUnreachable())
    }
    bb27 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn3(mut _1: Adt38, mut _2: (Adt38, *mut i8, f32, u16), mut _3: *const isize) -> isize {
    mir! {
    type RET = isize;
    let _4: &'static mut i128;
    let _5: i64;
    let _6: *const [u32; 7];
    let _7: *mut *mut u128;
    let _8: u8;
    let _9: char;
    let _10: f32;
    let _11: i64;
    let _12: (i16, &'static mut *const usize, *mut *mut u128);
    let _13: *const &'static *mut &'static *mut f32;
    let _14: *const (u16, char, u16, char);
    let _15: u32;
    let _16: (i64, i8, &'static mut u32);
    let _17: &'static mut *const usize;
    let _18: i8;
    let _19: &'static mut &'static mut &'static mut i128;
    let _20: *mut u128;
    let _21: &'static i32;
    let _22: (f32, Adt19, u64);
    let _23: &'static mut &'static mut i128;
    let _24: u8;
    let _25: f64;
    let _26: usize;
    let _27: i32;
    let _28: &'static mut u32;
    let _29: *const [u32; 7];
    let _30: *const (u16, char, u16, char);
    let _31: &'static u16;
    let _32: u64;
    let _33: isize;
    let _34: &'static *mut f32;
    let _35: &'static *mut &'static *mut f32;
    let _36: *const isize;
    let _37: Adt77;
    let _38: &'static mut *const usize;
    let _39: f32;
    let _40: &'static *const u32;
    let _41: i32;
    let _42: i8;
    let _43: *mut (*mut i8, f32);
    let _44: ();
    let _45: ();
    {
    _3 = core::ptr::addr_of!(RET);
    (*_3) = -9223372036854775807_isize;
    (*_3) = (-9223372036854775808_isize) + 111_isize;
    (*_3) = (-9223372036854775808_isize) - (-9223372036854775808_isize);
    RET = 9223372036854775807_isize ^ 9223372036854775807_isize;
    _2.2 = 29_i8 as f32;
    (*_3) = 26_isize * (-9223372036854775808_isize);
    _2.0 = _1;
    _3 = core::ptr::addr_of!((*_3));
    (*_3) = (-9223372036854775808_isize);
    (*_3) = (-9223372036854775808_isize) + 9223372036854775807_isize;
    RET = 0_usize as isize;
    (*_3) = !19_isize;
    _1 = _2.0;
    Call(_3 = fn4(_2.2, Move(_2), (*_3), (*_3), (*_3), (*_3), (*_3), (*_3), (*_3), (*_3), (*_3)), ReturnTo(bb1), UnwindUnreachable())
    }
    bb1 = {
    _2.0.fld0 = _1.fld1 <= _1.fld1;
    _2.0.fld1 = _1.fld1 & _1.fld1;
    _3 = core::ptr::addr_of!(RET);
    (*_3) = 4144192226440297703_usize as isize;
    (*_3) = !9223372036854775807_isize;
    (*_3) = (-9223372036854775808_isize) - 9223372036854775807_isize;
    (*_3) = (-90_isize) << _2.0.fld1;
    _1 = _2.0;
    _2.2 = 6_usize as f32;
    (*_3) = !9223372036854775807_isize;
    (*_3) = 3295993644_u32 as isize;
    (*_3) = 39_isize & 102_isize;
    Goto(bb2)
    }
    bb2 = {
    _5 = (-132614621780067676997298547168048385845_i128) as i64;
    _2.2 = 10788421843279431862_u64 as f32;
    (*_3) = (-9223372036854775808_isize);
    (*_3) = (-63_isize) << _2.0.fld1;
    _1.fld0 = _2.0.fld0 > _2.0.fld0;
    (*_3) = (-9223372036854775808_isize) >> _5;
    RET = (-9223372036854775808_isize) << _1.fld1;
    (*_3) = (-9223372036854775808_isize) + (-9223372036854775808_isize);
    (*_3) = (-74_isize);
    (*_3) = 96_isize & 9223372036854775807_isize;
    (*_3) = (-122_isize) * 9223372036854775807_isize;
    (*_3) = (-13_isize);
    match (*_3) {
    0 => bb3,
    1 => bb4,
    340282366920938463463374607431768211443 => bb6,
    _ => bb5
    }
    }
    bb3 = {
    _2.0.fld0 = _1.fld1 <= _1.fld1;
    _2.0.fld1 = _1.fld1 & _1.fld1;
    _3 = core::ptr::addr_of!(RET);
    (*_3) = 4144192226440297703_usize as isize;
    (*_3) = !9223372036854775807_isize;
    (*_3) = (-9223372036854775808_isize) - 9223372036854775807_isize;
    (*_3) = (-90_isize) << _2.0.fld1;
    _1 = _2.0;
    _2.2 = 6_usize as f32;
    (*_3) = !9223372036854775807_isize;
    (*_3) = 3295993644_u32 as isize;
    (*_3) = 39_isize & 102_isize;
    Goto(bb2)
    }
    bb4 = {
    Return()
    }
    bb5 = {
    Return()
    }
    bb6 = {
    (*_3) = 9223372036854775807_isize;
    (*_3) = -(-9223372036854775808_isize);
    _2.0.fld0 = (*_3) <= RET;
    (*_3) = 9223372036854775807_isize - 9223372036854775807_isize;
    _1.fld1 = (-1691482354_i32) as u8;
    _2.2 = _5 as f32;
    (*_3) = !9223372036854775807_isize;
    _3 = core::ptr::addr_of!((*_3));
    _10 = -_2.2;
    (*_3) = (-81_isize);
    (*_3) = '\u{964bf}' as isize;
    _2.3 = !58295_u16;
    _11 = _5;
    (*_3) = -9223372036854775807_isize;
    (*_3) = (-9223372036854775808_isize) - (-9223372036854775808_isize);
    (*_3) = !9223372036854775807_isize;
    Goto(bb7)
    }
    bb7 = {
    _2.2 = -_10;
    (*_3) = 1_usize as isize;
    _10 = _2.2 + _2.2;
    (*_3) = -33_isize;
    _1.fld0 = !_2.0.fld0;
    _8 = _2.0.fld1 | _2.0.fld1;
    (*_3) = -9223372036854775807_isize;
    (*_3) = 9223372036854775807_isize & (-9223372036854775808_isize);
    (*_3) = !(-7_isize);
    _15 = 110151075300492307991721281786217034188_i128 as u32;
    (*_3) = 9223372036854775807_isize * (-9223372036854775808_isize);
    _10 = _2.2 * _2.2;
    _2.0.fld0 = !_1.fld0;
    _11 = !_5;
    (*_3) = (-27_isize);
    _16.0 = _11 >> _1.fld1;
    _1.fld0 = (*_3) >= (*_3);
    (*_3) = 9223372036854775807_isize | 9223372036854775807_isize;
    Goto(bb8)
    }
    bb8 = {
    (*_3) = _2.3 as isize;
    _16.2 = &mut _15;
    (*_3) = -(-111_isize);
    _10 = (-13480_i16) as f32;
    (*_3) = 18099697809476749944_u64 as isize;
    RET = (-58_isize) - 9223372036854775807_isize;
    _12.0 = 81_i8 as i16;
    _2.3 = '\u{b28e7}' as u16;
    _1.fld1 = _8 | _2.0.fld1;
    (*_3) = -9223372036854775807_isize;
    (*_3) = _2.3 as isize;
    _16.0 = -_11;
    _2.1 = core::ptr::addr_of_mut!(_16.1);
    (*_3) = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
    _5 = _11 & _11;
    _7 = core::ptr::addr_of_mut!(_20);
    _12.2 = core::ptr::addr_of_mut!((*_7));
    (*_3) = (-77_isize) << _8;
    (*_3) = 63_isize;
    (*_3) = (-9223372036854775808_isize);
    _9 = '\u{100386}';
    (*_3) = 4193060160_u32 as isize;
    RET = 9223372036854775807_isize >> _2.0.fld1;
    Goto(bb9)
    }
    bb9 = {
    (*_3) = 9223372036854775807_isize - 112_isize;
    _18 = (-44_i8) | 60_i8;
    _22.1 = Adt19::Variant0 { fld0: _2.2 };
    (*_3) = !9223372036854775807_isize;
    (*_3) = (-122_isize) << _2.0.fld1;
    (*_3) = 9223372036854775807_isize ^ 9223372036854775807_isize;
    (*_3) = _9 as isize;
    _12.2 = core::ptr::addr_of_mut!((*_7));
    (*_3) = (-9223372036854775808_isize) & (-9223372036854775808_isize);
    _2.0.fld1 = _8 << (*_3);
    place!(Field::<f32>(Variant(_22.1, 0), 0)) = _2.2;
    _24 = !_8;
    _2.3 = !39834_u16;
    _22.2 = 14261340190625307726_u64;
    _1.fld1 = _8 & _8;
    _2.1 = core::ptr::addr_of_mut!(_18);
    _16.1 = 307949236_u32 as i8;
    _2.0.fld1 = _8;
    _16.0 = _5 & _5;
    _2.2 = -_10;
    (*_3) = -9223372036854775807_isize;
    Goto(bb10)
    }
    bb10 = {
    _16.0 = _5;
    match _22.2 {
    14261340190625307726 => bb11,
    _ => bb9
    }
    }
    bb11 = {
    _22.0 = _10 - Field::<f32>(Variant(_22.1, 0), 0);
    (*_3) = 119_isize;
    (*_3) = (-9223372036854775808_isize);
    (*_3) = 9223372036854775807_isize ^ (-9223372036854775808_isize);
    _28 = Move(_16.2);
    (*_3) = (-9223372036854775808_isize) + 9223372036854775807_isize;
    (*_3) = (-9223372036854775808_isize);
    _2.0.fld0 = !_1.fld0;
    _12.2 = core::ptr::addr_of_mut!((*_7));
    (*_3) = _18 as isize;
    _27 = (-81860450_i32) ^ (-1802449442_i32);
    _12.2 = core::ptr::addr_of_mut!((*_7));
    _16.0 = -_5;
    (*_3) = 9223372036854775807_isize;
    _11 = _16.0 * _5;
    (*_3) = -(-9223372036854775808_isize);
    _9 = '\u{8d8f6}';
    Call(_10 = core::intrinsics::transmute(_27), ReturnTo(bb12), UnwindUnreachable())
    }
    bb12 = {
    _2.0 = Adt38 { fld0: _1.fld0,fld1: _8 };
    _16.0 = _11 | _11;
    _9 = '\u{7bc0}';
    _16.1 = _18 * _18;
    (*_3) = 9223372036854775807_isize & (-9223372036854775808_isize);
    _33 = (*_3) | (*_3);
    (*_3) = _33;
    RET = _33;
    (*_3) = _33 >> _16.1;
    _8 = _2.0.fld1;
    _2.0.fld1 = Field::<f32>(Variant(_22.1, 0), 0) as u8;
    (*_3) = _33;
    _27 = (-1348685535_i32);
    _1.fld1 = _8 + _24;
    (*_3) = _33 ^ _33;
    (*_3) = _33 ^ _33;
    _1.fld1 = _24 | _24;
    _16.1 = _18;
    _16.0 = !_5;
    (*_3) = -_33;
    _22.2 = 3438072089515700681_u64 - 6099435436600275609_u64;
    Goto(bb13)
    }
    bb13 = {
    _2.0 = Adt38 { fld0: _1.fld0,fld1: _24 };
    place!(Field::<f32>(Variant(_22.1, 0), 0)) = _22.0 - _22.0;
    (*_3) = _33;
    Goto(bb14)
    }
    bb14 = {
    RET = _33 - _33;
    _33 = (*_3);
    _31 = &_2.3;
    _32 = _22.2;
    (*_3) = _33;
    _3 = core::ptr::addr_of!((*_3));
    _2.0 = _1;
    _22.2 = _32 - _32;
    Goto(bb15)
    }
    bb15 = {
    _10 = _22.2 as f32;
    (*_3) = -_33;
    match _27 {
    0 => bb12,
    1 => bb5,
    340282366920938463463374607430419525921 => bb16,
    _ => bb8
    }
    }
    bb16 = {
    _7 = core::ptr::addr_of_mut!((*_7));
    (*_3) = -_33;
    (*_3) = -_33;
    _33 = !(*_3);
    _11 = _1.fld1 as i64;
    (*_3) = !_33;
    _9 = '\u{b162c}';
    (*_3) = _33 | _33;
    _22.1 = Adt19::Variant0 { fld0: _10 };
    _22.1 = Adt19::Variant0 { fld0: _22.0 };
    (*_3) = _33 >> _11;
    _21 = &_27;
    _8 = _2.0.fld1 ^ _2.0.fld1;
    _9 = '\u{e0207}';
    (*_3) = _33 - _33;
    _2.1 = core::ptr::addr_of_mut!(_16.1);
    _27 = 768251332_i32;
    _16.1 = _18;
    _36 = core::ptr::addr_of!((*_3));
    (*_36) = !_33;
    _12.2 = core::ptr::addr_of_mut!((*_7));
    _33 = (*_3);
    match _27 {
    0 => bb11,
    1 => bb15,
    2 => bb7,
    3 => bb4,
    4 => bb12,
    5 => bb17,
    6 => bb18,
    768251332 => bb20,
    _ => bb19
    }
    }
    bb17 = {
    Return()
    }
    bb18 = {
    _5 = (-132614621780067676997298547168048385845_i128) as i64;
    _2.2 = 10788421843279431862_u64 as f32;
    (*_3) = (-9223372036854775808_isize);
    (*_3) = (-63_isize) << _2.0.fld1;
    _1.fld0 = _2.0.fld0 > _2.0.fld0;
    (*_3) = (-9223372036854775808_isize) >> _5;
    RET = (-9223372036854775808_isize) << _1.fld1;
    (*_3) = (-9223372036854775808_isize) + (-9223372036854775808_isize);
    (*_3) = (-74_isize);
    (*_3) = 96_isize & 9223372036854775807_isize;
    (*_3) = (-122_isize) * 9223372036854775807_isize;
    (*_3) = (-13_isize);
    match (*_3) {
    0 => bb3,
    1 => bb4,
    340282366920938463463374607431768211443 => bb6,
    _ => bb5
    }
    }
    bb19 = {
    _2.2 = -_10;
    (*_3) = 1_usize as isize;
    _10 = _2.2 + _2.2;
    (*_3) = -33_isize;
    _1.fld0 = !_2.0.fld0;
    _8 = _2.0.fld1 | _2.0.fld1;
    (*_3) = -9223372036854775807_isize;
    (*_3) = 9223372036854775807_isize & (-9223372036854775808_isize);
    (*_3) = !(-7_isize);
    _15 = 110151075300492307991721281786217034188_i128 as u32;
    (*_3) = 9223372036854775807_isize * (-9223372036854775808_isize);
    _10 = _2.2 * _2.2;
    _2.0.fld0 = !_1.fld0;
    _11 = !_5;
    (*_3) = (-27_isize);
    _16.0 = _11 >> _1.fld1;
    _1.fld0 = (*_3) >= (*_3);
    (*_3) = 9223372036854775807_isize | 9223372036854775807_isize;
    Goto(bb8)
    }
    bb20 = {
    (*_3) = _33 ^ _33;
    _3 = Move(_36);
    _22.0 = Field::<f32>(Variant(_22.1, 0), 0) + Field::<f32>(Variant(_22.1, 0), 0);
    _16.1 = 53278134074209558_usize as i8;
    _36 = core::ptr::addr_of!(_33);
    _22.1 = Adt19::Variant0 { fld0: _10 };
    _1 = _2.0;
    _26 = (*_31) as usize;
    _41 = (*_36) as i32;
    _2.2 = -_22.0;
    (*_36) = -RET;
    (*_36) = _2.2 as isize;
    _42 = -_18;
    (*_36) = _1.fld1 as isize;
    Goto(bb21)
    }
    bb21 = {
    Call(_44 = dump_var(3_usize, 32_usize, Move(_32), 41_usize, Move(_41), 33_usize, Move(_33), 26_usize, Move(_26)), ReturnTo(bb22), UnwindUnreachable())
    }
    bb22 = {
    Call(_44 = dump_var(3_usize, 18_usize, Move(_18), 5_usize, Move(_5), 45_usize, _45, 45_usize, _45), ReturnTo(bb23), UnwindUnreachable())
    }
    bb23 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(
    mut _1: f32,
    mut _2: (Adt38, *mut i8, f32, u16),
    mut _3: isize,
    mut _4: isize,
    mut _5: isize,
    mut _6: isize,
    mut _7: isize,
    mut _8: isize,
    mut _9: isize,
    mut _10: isize,
    mut _11: isize,
) -> *const isize {
    mir! {
    type RET = *const isize;
    let _12: [i128; 3];
    let _13: &'static *const u32;
    let _14: [u16; 7];
    let _15: f32;
    let _16: [usize; 6];
    let _17: i32;
    let _18: *const &'static *mut &'static *mut f32;
    let _19: Adt31;
    let _20: i16;
    let _21: *const isize;
    let _22: u128;
    let _23: (char, i64, u64);
    let _24: [char; 3];
    let _25: bool;
    let _26: *mut (*mut i8, f32);
    let _27: f64;
    let _28: *const Adt19;
    let _29: Adt69;
    let _30: (Adt27, [u64; 3]);
    let _31: isize;
    let _32: &'static u16;
    let _33: isize;
    let _34: Adt69;
    let _35: *const u32;
    let _36: &'static mut u32;
    let _37: *mut (Adt27, [u64; 3]);
    let _38: f64;
    let _39: u32;
    let _40: (u32, *mut i8, &'static mut &'static mut &'static mut i128, &'static *mut f32);
    let _41: *mut (*mut i8, f32);
    let _42: isize;
    let _43: &'static u16;
    let _44: bool;
    let _45: char;
    let _46: bool;
    let _47: u32;
    let _48: *mut &'static mut i128;
    let _49: *const isize;
    let _50: [char; 3];
    let _51: ();
    let _52: ();
    {
    _9 = _10 << _2.3;
    _4 = _7;
    _6 = _7;
    _7 = _6;
    _7 = _3 & _9;
    _10 = (-23957_i16) as isize;
    _2.0.fld1 = !242_u8;
    _12 = [99709668616345553603628092872332676441_i128,(-29370117527761262363174007272133220320_i128),(-156652929564276705464040793469537920791_i128)];
    RET = core::ptr::addr_of!(_5);
    (*RET) = _3 + _7;
    _2.2 = _1 * _1;
    (*RET) = _2.2 as isize;
    _7 = (*RET) ^ (*RET);
    _2.0.fld1 = 29_u8;
    (*RET) = _6 * _7;
    (*RET) = _10 - _3;
    _5 = _2.0.fld1 as isize;
    (*RET) = _8 - _9;
    _2.2 = _1 + _1;
    (*RET) = 522512829_i32 as isize;
    (*RET) = _7 >> _6;
    _9 = (*RET) & (*RET);
    _12 = [55105837292291102840579181934842737126_i128,141848020700826548268274159838714021520_i128,23769859140134381243925172185389773881_i128];
    _15 = 3188684101_u32 as f32;
    _5 = 16653_i16 as isize;
    (*RET) = _4 << _9;
    match _2.0.fld1 {
    0 => bb1,
    1 => bb2,
    2 => bb3,
    3 => bb4,
    29 => bb6,
    _ => bb5
    }
    }
    bb1 = {
    Return()
    }
    bb2 = {
    Return()
    }
    bb3 = {
    Return()
    }
    bb4 = {
    Return()
    }
    bb5 = {
    Return()
    }
    bb6 = {
    _1 = _2.2 - _2.2;
    (*RET) = _7 << _6;
    Call(_15 = fn5(_2.0.fld1, Move(_2), (*RET), (*RET), Move(RET), _12, (*RET), (*RET), (*RET), _4), ReturnTo(bb7), UnwindUnreachable())
    }
    bb7 = {
    _2.3 = 5722846132006827128_u64 as u16;
    _6 = 15876_i16 as isize;
    _17 = (-41539965_i32) << _9;
    _2.0 = Adt38 { fld0: true,fld1: 15_u8 };
    _15 = _1 - _1;
    Goto(bb8)
    }
    bb8 = {
    _2.0.fld0 = !true;
    _2.2 = _15;
    _2.0 = Adt38 { fld0: true,fld1: 182_u8 };
    _10 = _9;
    _8 = _9 & _4;
    _5 = 1_usize as isize;
    _14 = [_2.3,_2.3,_2.3,_2.3,_2.3,_2.3,_2.3];
    _2.0.fld0 = false;
    RET = core::ptr::addr_of!(_5);
    match _2.0.fld1 {
    0 => bb1,
    1 => bb7,
    2 => bb3,
    3 => bb4,
    4 => bb5,
    5 => bb6,
    6 => bb9,
    182 => bb11,
    _ => bb10
    }
    }
    bb9 = {
    Return()
    }
    bb10 = {
    Return()
    }
    bb11 = {
    _16 = [3_usize,6282935334241479606_usize,0_usize,1_usize,5_usize,2631965928630214746_usize];
    (*RET) = _10 >> _9;
    (*RET) = _10;
    (*RET) = !_8;
    _4 = -(*RET);
    _3 = (*RET);
    (*RET) = _7 >> _3;
    (*RET) = _8 | _4;
    (*RET) = (-1345148709826984148_i64) as isize;
    (*RET) = _4;
    _5 = _3;
    (*RET) = !_9;
    _10 = !(*RET);
    (*RET) = _8;
    Goto(bb12)
    }
    bb12 = {
    (*RET) = -_3;
    _24 = ['\u{ba95e}','\u{c209b}','\u{ffa9b}'];
    _16 = [2_usize,7_usize,2_usize,4_usize,14851820321615639259_usize,4_usize];
    _4 = 16294_i16 as isize;
    (*RET) = _7 + _7;
    _2.0.fld1 = '\u{c8909}' as u8;
    _1 = _17 as f32;
    _7 = (*RET);
    (*RET) = _9 * _10;
    _12 = [(-56917661118439150109068714981388239151_i128),(-159808005474392080777755913814578117589_i128),32467832917964125949369909849440889599_i128];
    (*RET) = _11 >> _7;
    _2.0.fld0 = _7 >= (*RET);
    _23.1 = (-6513891749467891575_i64) - 7942033979166246433_i64;
    _2.0 = Adt38 { fld0: true,fld1: 27_u8 };
    _23.0 = '\u{e5ef7}';
    _23 = ('\u{c31fa}', 3709676158030917462_i64, 1756798579859430694_u64);
    _11 = (*RET);
    _29.fld0 = [_23.0,_23.0,_23.0];
    _12 = [29081321071043340967942596933896572230_i128,(-66730194687404415669892287498392354878_i128),158963699167240902013980234432063116387_i128];
    _23 = ('\u{ea3b6}', (-2669713303705316384_i64), 15164340298937489865_u64);
    _20 = 8517_i16;
    _10 = -(*RET);
    _2.0.fld0 = true | true;
    (*RET) = _3;
    Goto(bb13)
    }
    bb13 = {
    (*RET) = _11;
    (*RET) = _9 & _7;
    (*RET) = -_9;
    _11 = _2.3 as isize;
    (*RET) = !_3;
    _25 = _2.0.fld0 & _2.0.fld0;
    (*RET) = !_3;
    _23 = ('\u{1c100}', 3626105013793817825_i64, 2529630812166120451_u64);
    _10 = !(*RET);
    _24 = [_23.0,_23.0,_23.0];
    (*RET) = _7 + _3;
    _17 = 26_i8 as i32;
    _31 = (*RET);
    _25 = _15 <= _2.2;
    match _23.1 {
    0 => bb11,
    1 => bb12,
    2 => bb3,
    3 => bb14,
    3626105013793817825 => bb16,
    _ => bb15
    }
    }
    bb14 = {
    Return()
    }
    bb15 = {
    Return()
    }
    bb16 = {
    (*RET) = _10 ^ _31;
    (*RET) = _9 + _9;
    _6 = _7 >> (*RET);
    _2.3 = !45433_u16;
    _34.fld0 = [_23.0,_23.0,_23.0];
    _17 = _25 as i32;
    (*RET) = _20 as isize;
    _9 = -_31;
    _27 = 673025827_u32 as f64;
    _10 = _6;
    _23.0 = '\u{3e0d9}';
    (*RET) = _23.2 as isize;
    _32 = &_2.3;
    _7 = _23.0 as isize;
    (*RET) = _31 - _8;
    (*RET) = _3 | _31;
    _8 = (*RET) + (*RET);
    Goto(bb17)
    }
    bb17 = {
    (*RET) = _6;
    _2.0 = Adt38 { fld0: _25,fld1: 61_u8 };
    _29 = _34;
    _14 = [(*_32),(*_32),(*_32),(*_32),(*_32),(*_32),(*_32)];
    (*RET) = 14_i8 as isize;
    _6 = !_8;
    _39 = (-99787071597710635028285046637775587051_i128) as u32;
    _34.fld0 = [_23.0,_23.0,_23.0];
    _37 = core::ptr::addr_of_mut!(_30);
    (*RET) = _6 - _6;
    _34.fld0 = _24;
    (*RET) = _8;
    _22 = 150615779578804175958516068467477344486_u128 ^ 213396271542855502271514399022741545587_u128;
    (*_37).1 = [_23.2,_23.2,_23.2];
    (*RET) = -_3;
    (*RET) = -_6;
    _2.0 = Adt38 { fld0: _25,fld1: 104_u8 };
    _2.0.fld1 = 230_u8;
    _3 = _31 + _8;
    _27 = 94_i8 as f64;
    _2.0 = Adt38 { fld0: _25,fld1: 197_u8 };
    (*_37).1 = [_23.2,_23.2,_23.2];
    (*RET) = _3;
    _43 = Move(_32);
    (*RET) = _9 * _6;
    match _2.0.fld1 {
    197 => bb18,
    _ => bb15
    }
    }
    bb18 = {
    _32 = &_2.3;
    (*_37).1 = [_23.2,_23.2,_23.2];
    _43 = &(*_32);
    _31 = (*RET) >> (*RET);
    _2.0.fld1 = !30_u8;
    _20 = _22 as i16;
    (*_37).1 = [_23.2,_23.2,_23.2];
    _15 = _1;
    _42 = !_3;
    (*_37).1 = [_23.2,_23.2,_23.2];
    (*RET) = _8;
    _35 = core::ptr::addr_of!(_40.0);
    match _23.2 {
    2529630812166120451 => bb19,
    _ => bb3
    }
    }
    bb19 = {
    _11 = !(*RET);
    (*RET) = _6;
    _23.0 = '\u{cdda6}';
    (*_35) = _15 as u32;
    _33 = (*RET) ^ (*RET);
    _46 = !_25;
    _22 = 129255853325170309857370399622922263764_u128;
    _47 = (*_35) ^ (*_35);
    (*_37).1 = [_23.2,_23.2,_23.2];
    Goto(bb20)
    }
    bb20 = {
    _2.0.fld1 = 15_u8 << _5;
    _2.3 = 60671_u16 << (*RET);
    (*_35) = !_47;
    (*_37).1 = [_23.2,_23.2,_23.2];
    Goto(bb21)
    }
    bb21 = {
    (*_37).1 = [_23.2,_23.2,_23.2];
    _44 = !_25;
    (*_35) = _47 - _47;
    _36 = &mut (*_35);
    _44 = (*RET) > (*RET);
    _50 = [_23.0,_23.0,_23.0];
    _7 = _6;
    (*RET) = _3 * _33;
    (*_37).1 = [_23.2,_23.2,_23.2];
    _16 = [5_usize,0_usize,13474372940793255758_usize,1960279368525463834_usize,18081762339715861084_usize,1_usize];
    _2.3 = 63997_u16;
    (*_37).1 = [_23.2,_23.2,_23.2];
    match _23.2 {
    0 => bb11,
    2529630812166120451 => bb22,
    _ => bb7
    }
    }
    bb22 = {
    RET = core::ptr::addr_of!((*RET));
    (*_37).1 = [_23.2,_23.2,_23.2];
    (*_37).1 = [_23.2,_23.2,_23.2];
    (*RET) = _31;
    (*_36) = _15 as u32;
    Goto(bb23)
    }
    bb23 = {
    Call(_51 = dump_var(4_usize, 33_usize, Move(_33), 42_usize, Move(_42), 50_usize, Move(_50), 16_usize, Move(_16)), ReturnTo(bb24), UnwindUnreachable())
    }
    bb24 = {
    Call(_51 = dump_var(4_usize, 46_usize, Move(_46), 7_usize, Move(_7), 12_usize, Move(_12), 6_usize, Move(_6)), ReturnTo(bb25), UnwindUnreachable())
    }
    bb25 = {
    Call(_51 = dump_var(4_usize, 8_usize, Move(_8), 25_usize, Move(_25), 11_usize, Move(_11), 3_usize, Move(_3)), ReturnTo(bb26), UnwindUnreachable())
    }
    bb26 = {
    Call(_51 = dump_var(4_usize, 5_usize, Move(_5), 52_usize, _52, 52_usize, _52, 52_usize, _52), ReturnTo(bb27), UnwindUnreachable())
    }
    bb27 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(
    mut _1: u8,
    mut _2: (Adt38, *mut i8, f32, u16),
    mut _3: isize,
    mut _4: isize,
    mut _5: *const isize,
    mut _6: [i128; 3],
    mut _7: isize,
    mut _8: isize,
    mut _9: isize,
    mut _10: isize,
) -> f32 {
    mir! {
    type RET = f32;
    let _11: bool;
    let _12: &'static u16;
    let _13: isize;
    let _14: u64;
    let _15: isize;
    let _16: Adt80;
    let _17: isize;
    let _18: [u32; 4];
    let _19: i32;
    let _20: [i128; 3];
    let _21: usize;
    let _22: isize;
    let _23: isize;
    let _24: &'static mut &'static mut i128;
    let _25: *mut &'static *mut f32;
    let _26: *const u32;
    let _27: isize;
    let _28: bool;
    let _29: (Adt27, [u64; 3]);
    let _30: &'static &'static i32;
    let _31: isize;
    let _32: isize;
    let _33: [i16; 1];
    let _34: isize;
    let _35: *mut i8;
    let _36: ();
    let _37: ();
    {
    _2.3 = 30072_u16 - 21868_u16;
    _5 = core::ptr::addr_of!(_9);
    (*_5) = _7 & _4;
    (*_5) = 131923270818062329752167525356206624475_u128 as isize;
    RET = (-99026625175068435076681962354222205405_i128) as f32;
    (*_5) = 63354584279103484988480304679104688992_i128 as isize;
    (*_5) = _7 & _3;
    (*_5) = _7;
    (*_5) = _8;
    (*_5) = -_3;
    (*_5) = !_7;
    (*_5) = -_8;
    (*_5) = _3;
    (*_5) = (-2798259501224181629331544467405386579_i128) as isize;
    (*_5) = _2.2 as isize;
    (*_5) = _8 << _4;
    _2.0 = Adt38 { fld0: true,fld1: _1 };
    (*_5) = _3 ^ _4;
    (*_5) = _8 ^ _8;
    (*_5) = 13894_i16 as isize;
    _2.0.fld1 = !_1;
    (*_5) = (-1381208511_i32) as isize;
    (*_5) = !_7;
    _11 = _2.0.fld0 | _2.0.fld0;
    RET = _2.2 * _2.2;
    match _1 {
    0 => bb1,
    1 => bb2,
    2 => bb3,
    29 => bb5,
    _ => bb4
    }
    }
    bb1 = {
    Return()
    }
    bb2 = {
    Return()
    }
    bb3 = {
    Return()
    }
    bb4 = {
    Return()
    }
    bb5 = {
    (*_5) = _4 - _4;
    (*_5) = !_8;
    _5 = core::ptr::addr_of!((*_5));
    _11 = _2.0.fld0;
    (*_5) = !_7;
    Goto(bb6)
    }
    bb6 = {
    (*_5) = 98192727025660091804844684474029837124_u128 as isize;
    (*_5) = _4 & _8;
    (*_5) = _3 + _7;
    (*_5) = 187101794262252962325718483083225301843_u128 as isize;
    _2.3 = 55684_u16 | 55119_u16;
    (*_5) = _7 - _3;
    _11 = !_2.0.fld0;
    _14 = !17662894944883256610_u64;
    (*_5) = !_3;
    _2.0.fld0 = _11 & _11;
    _5 = core::ptr::addr_of!((*_5));
    _2.0.fld1 = _1 - _1;
    (*_5) = _8;
    _10 = (*_5) >> (*_5);
    Call((*_5) = core::intrinsics::bswap(_3), ReturnTo(bb7), UnwindUnreachable())
    }
    bb7 = {
    _4 = _14 as isize;
    _7 = 4062491356531958186_i64 as isize;
    _2.3 = 36256_u16 & 26238_u16;
    (*_5) = _10;
    _2.0.fld1 = _1 * _1;
    (*_5) = '\u{4e542}' as isize;
    _2.3 = 206802500871992530943482077723461140112_u128 as u16;
    (*_5) = _7;
    _8 = _10 >> _3;
    _12 = &_2.3;
    _9 = !_8;
    _9 = _7 * _3;
    _13 = _2.0.fld0 as isize;
    (*_5) = _10 & _8;
    _15 = (*_5) >> (*_5);
    _2.3 = 11796_u16;
    (*_5) = (-881797945_i32) as isize;
    Goto(bb8)
    }
    bb8 = {
    _18 = [3261754084_u32,1631785157_u32,3366124192_u32,2473447238_u32];
    (*_5) = _15;
    _2.0.fld1 = _1;
    match _2.0.fld1 {
    0 => bb4,
    29 => bb9,
    _ => bb2
    }
    }
    bb9 = {
    (*_5) = _8 << _10;
    (*_5) = _15;
    (*_5) = (-120_i8) as isize;
    (*_5) = _8 ^ _8;
    _5 = core::ptr::addr_of!(_9);
    (*_5) = -_10;
    (*_5) = !_3;
    _5 = core::ptr::addr_of!(_4);
    _2.2 = -RET;
    (*_5) = -_8;
    _11 = !_2.0.fld0;
    _18 = [3412266386_u32,1597103924_u32,2459346419_u32,319347911_u32];
    _2.3 = !10407_u16;
    _8 = 318106926421666186371054481224154988317_u128 as isize;
    (*_5) = _15 - _15;
    _2.0.fld1 = _1 * _1;
    _19 = 4010298576828456989_i64 as i32;
    Goto(bb10)
    }
    bb10 = {
    _1 = _2.0.fld1 & _2.0.fld1;
    (*_5) = _15 * _9;
    (*_5) = _15 - _15;
    _14 = 17979191332264474874_u64;
    (*_5) = _15 + _10;
    (*_5) = _3 << _15;
    (*_5) = _15;
    (*_5) = _15 + _3;
    _2.2 = RET;
    (*_5) = _9;
    _22 = _2.3 as isize;
    _2.0.fld1 = _1;
    (*_5) = _15;
    _18 = [4219076326_u32,1520638067_u32,1910202519_u32,3669844698_u32];
    _2.2 = RET - RET;
    (*_5) = _13 - _15;
    _27 = (*_5);
    _2.0.fld0 = _11 ^ _11;
    _8 = _4 << _4;
    (*_5) = _8 >> _8;
    (*_5) = -_8;
    (*_5) = (-4892705323585961445_i64) as isize;
    _9 = (*_5);
    _27 = -(*_5);
    _9 = -_8;
    Call(_8 = fn6((*_5), Move(_5)), ReturnTo(bb11), UnwindUnreachable())
    }
    bb11 = {
    _23 = 1758797054669648042_usize as isize;
    _6 = [(-150124638173422700495983487295720557727_i128),(-151346383678765370470822816898914579251_i128),(-40852327383623472797027588995535506532_i128)];
    _14 = 9856839404454651277_u64 | 17211124152717847580_u64;
    _3 = _15 << _9;
    _21 = (-9555_i16) as usize;
    _6 = [31226889194359526559851348835505836376_i128,161724153553627365541139521389583469738_i128,104245290513204469088343014451635035764_i128];
    _5 = core::ptr::addr_of!(_27);
    (*_5) = _3 - _3;
    _7 = _27 - _9;
    _6 = [34054600939398439602645635429716193932_i128,(-19364828111088709085413560637490150655_i128),80065100472540828869007017898739320875_i128];
    _7 = (*_5) >> _9;
    (*_5) = _3 * _9;
    Goto(bb12)
    }
    bb12 = {
    (*_5) = _21 as isize;
    _3 = _9 ^ _9;
    _19 = !(-1996900534_i32);
    _29.1 = [_14,_14,_14];
    RET = _2.2;
    RET = -_2.2;
    (*_5) = (-36666420717799521837935128576832157745_i128) as isize;
    _6 = [123101551025451815586560630683266754819_i128,(-93596402166215484118319640462552567360_i128),161782702261518523028470602938325093356_i128];
    _2.0.fld0 = !_11;
    _29.1 = [_14,_14,_14];
    _31 = _2.0.fld1 as isize;
    _15 = _7;
    (*_5) = _15 & _15;
    _27 = _15 << _9;
    RET = _2.2 - _2.2;
    _17 = (*_5) ^ _7;
    _2.2 = RET * RET;
    _2.0.fld1 = !_1;
    _13 = (*_5) >> (*_5);
    (*_5) = _13 >> _9;
    _21 = !3874970204182841369_usize;
    (*_5) = _15 * _13;
    Goto(bb13)
    }
    bb13 = {
    Call(_36 = dump_var(5_usize, 22_usize, Move(_22), 11_usize, Move(_11), 15_usize, Move(_15), 7_usize, Move(_7)), ReturnTo(bb14), UnwindUnreachable())
    }
    bb14 = {
    Call(_36 = dump_var(5_usize, 21_usize, Move(_21), 19_usize, Move(_19), 17_usize, Move(_17), 8_usize, Move(_8)), ReturnTo(bb15), UnwindUnreachable())
    }
    bb15 = {
    Call(_36 = dump_var(5_usize, 13_usize, Move(_13), 6_usize, Move(_6), 37_usize, _37, 37_usize, _37), ReturnTo(bb16), UnwindUnreachable())
    }
    bb16 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: isize, mut _2: *const isize) -> isize {
    mir! {
    type RET = isize;
    let _3: (*mut &'static *mut f32, Adt19, usize);
    let _4: Adt19;
    let _5: f64;
    let _6: [u32; 4];
    let _7: i8;
    let _8: f64;
    let _9: [u64; 6];
    let _10: Adt73;
    let _11: f64;
    let _12: usize;
    let _13: [isize; 7];
    let _14: &'static mut &'static mut &'static mut i128;
    let _15: Adt73;
    let _16: i128;
    let _17: isize;
    let _18: isize;
    let _19: *const [u32; 7];
    let _20: [u64; 6];
    let _21: &'static mut &'static mut &'static mut i128;
    let _22: Adt73;
    let _23: &'static mut &'static mut i128;
    let _24: char;
    let _25: *const f64;
    let _26: *mut i8;
    let _27: *mut &'static u16;
    let _28: *mut &'static mut i128;
    let _29: Adt31;
    let _30: isize;
    let _31: i32;
    let _32: f64;
    let _33: isize;
    let _34: &'static *const u32;
    let _35: *mut *mut u128;
    let _36: *const [u32; 7];
    let _37: isize;
    let _38: bool;
    let _39: f32;
    let _40: i8;
    let _41: bool;
    let _42: char;
    let _43: &'static mut i128;
    let _44: f32;
    let _45: [u64; 6];
    let _46: isize;
    let _47: &'static u16;
    let _48: f64;
    let _49: Adt73;
    let _50: (Adt73, Adt19, Adt73, (Adt38, *mut i8, f32, u16));
    let _51: i32;
    let _52: &'static mut [u32; 7];
    let _53: &'static mut *const usize;
    let _54: isize;
    let _55: isize;
    let _56: *mut &'static mut i128;
    let _57: &'static *mut f32;
    let _58: usize;
    let _59: [u16; 2];
    let _60: f64;
    let _61: &'static i32;
    let _62: ();
    let _63: ();
    {
    _1 = 9223372036854775807_isize;
    _2 = core::ptr::addr_of!(RET);
    (*_2) = _1 & _1;
    (*_2) = !_1;
    (*_2) = !_1;
    (*_2) = _1;
    (*_2) = !_1;
    _2 = core::ptr::addr_of!((*_2));
    RET = 6385_u16 as isize;
    (*_2) = _1;
    RET = _1 + _1;
    (*_2) = _1 | _1;
    (*_2) = _1 >> _1;
    _1 = (*_2) - (*_2);
    Call(_3.2 = fn7(Move(_2), (*_2), (*_2), (*_2)), ReturnTo(bb1), UnwindUnreachable())
    }
    bb1 = {
    _2 = core::ptr::addr_of!(RET);
    (*_2) = -_1;
    (*_2) = _1 - _1;
    (*_2) = 2823915359_u32 as isize;
    (*_2) = -_1;
    (*_2) = !_1;
    (*_2) = _1 * _1;
    (*_2) = _1;
    (*_2) = '\u{2a7fe}' as isize;
    _2 = core::ptr::addr_of!((*_2));
    (*_2) = _1 * _1;
    RET = _1 >> _1;
    _4 = Adt19::Variant1 { fld0: (-2687633089872776169_i64),fld1: 28879_u16 };
    (*_2) = _1 + _1;
    _5 = 124_u8 as f64;
    place!(Field::<i64>(Variant(_4, 1), 0)) = 7815232932321388204_i64 & 772556983537983219_i64;
    (*_2) = _1;
    RET = (-539660253_i32) as isize;
    _3.2 = !1_usize;
    (*_2) = Field::<i64>(Variant(_4, 1), 0) as isize;
    _4 = Adt19::Variant1 { fld0: (-7099578841506389648_i64),fld1: 16573_u16 };
    (*_2) = !_1;
    (*_2) = _1 | _1;
    _6 = [752689687_u32,1334323690_u32,2927908596_u32,455869403_u32];
    place!(Field::<i64>(Variant(_4, 1), 0)) = 3153492500_u32 as i64;
    (*_2) = _1 << _3.2;
    place!(Field::<i64>(Variant(_4, 1), 0)) = (-1568196567_i32) as i64;
    place!(Field::<u16>(Variant(_4, 1), 1)) = 65044_u16 * 24416_u16;
    (*_2) = Field::<u16>(Variant(_4, 1), 1) as isize;
    Call((*_2) = core::intrinsics::transmute(_1), ReturnTo(bb2), UnwindUnreachable())
    }
    bb2 = {
    _6 = [415238753_u32,4164447928_u32,3238051479_u32,3912672389_u32];
    (*_2) = _3.2 as isize;
    _4 = Adt19::Variant1 { fld0: 6002957747169643786_i64,fld1: 21702_u16 };
    place!(Field::<i64>(Variant(_4, 1), 0)) = 2723879193045716433_i64 >> (*_2);
    _2 = core::ptr::addr_of!(RET);
    (*_2) = 172_u8 as isize;
    place!(Field::<i64>(Variant(_4, 1), 0)) = _3.2 as i64;
    (*_2) = !_1;
    (*_2) = 41674252248890312015107301717111395329_i128 as isize;
    place!(Field::<u16>(Variant(_4, 1), 1)) = 46502_u16 - 57499_u16;
    (*_2) = _1;
    Goto(bb3)
    }
    bb3 = {
    _2 = core::ptr::addr_of!((*_2));
    (*_2) = 60007494312239466440773735694348801959_i128 as isize;
    (*_2) = 213_u8 as isize;
    (*_2) = _1 * _1;
    place!(Field::<u16>(Variant(_4, 1), 1)) = !64457_u16;
    (*_2) = _1 + _1;
    (*_2) = _1;
    (*_2) = _1;
    Goto(bb4)
    }
    bb4 = {
    (*_2) = _1 - _1;
    _3.2 = '\u{df407}' as usize;
    (*_2) = (-9015_i16) as isize;
    _1 = !(*_2);
    _7 = -82_i8;
    _7 = !5_i8;
    _3.1 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_4, 1), 0),fld1: Field::<u16>(Variant(_4, 1), 1) };
    (*_2) = _1 ^ _1;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = Field::<i64>(Variant(_4, 1), 0) ^ Field::<i64>(Variant(_4, 1), 0);
    _10.fld2 = [16352775554600383980_u64,9617386139242610167_u64,9442469818368833209_u64,10901154727413078208_u64,13542981539236801751_u64,5810032402208894463_u64];
    _11 = _5 - _5;
    _9 = [11034138281150762500_u64,671082291672832574_u64,7175826264292170679_u64,18203327592234572242_u64,1097538142303303291_u64,15798104797511427355_u64];
    _1 = (*_2);
    _7 = 74_i8 + 32_i8;
    _4 = Move(_3.1);
    (*_2) = _1;
    (*_2) = _1 ^ _1;
    _3.2 = 1_usize & 1948388376108648741_usize;
    _3.1 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_4, 1), 0),fld1: Field::<u16>(Variant(_4, 1), 1) };
    (*_2) = _1 + _1;
    (*_2) = -_1;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = Field::<i64>(Variant(_4, 1), 0);
    _10.fld1 = !_3.2;
    _11 = Field::<i64>(Variant(_4, 1), 0) as f64;
    _5 = (*_2) as f64;
    Goto(bb5)
    }
    bb5 = {
    _9 = [9878915406957484781_u64,8328199728275490313_u64,16741273447002255536_u64,3815855016295475202_u64,4629595090733313557_u64,7001963921606242564_u64];
    (*_2) = -_1;
    place!(Field::<u16>(Variant(_4, 1), 1)) = _7 as u16;
    (*_2) = _1;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = !Field::<i64>(Variant(_4, 1), 0);
    (*_2) = _1 >> _7;
    (*_2) = _1;
    (*_2) = _1 | _1;
    (*_2) = _1 + _1;
    (*_2) = Field::<i64>(Variant(_4, 1), 0) as isize;
    (*_2) = '\u{bf5e4}' as isize;
    _8 = -_5;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = -Field::<i64>(Variant(_4, 1), 0);
    (*_2) = _1 >> _3.2;
    _8 = _5 - _5;
    (*_2) = !_1;
    (*_2) = _1;
    (*_2) = -_1;
    _10.fld0 = Field::<i64>(Variant(_4, 1), 0);
    Goto(bb6)
    }
    bb6 = {
    _15.fld0 = Field::<i64>(Variant(_4, 1), 0);
    _17 = (*_2);
    Goto(bb7)
    }
    bb7 = {
    _1 = 1535_i16 as isize;
    (*_2) = _17;
    (*_2) = _17 - _17;
    _11 = _8;
    Goto(bb8)
    }
    bb8 = {
    place!(Field::<i64>(Variant(_4, 1), 0)) = Field::<u16>(Variant(_3.1, 1), 1) as i64;
    _15.fld1 = _3.2 & _10.fld1;
    _15.fld2 = [4820881389947997345_u64,16619382545904770084_u64,12848913349869784396_u64,13915744740136678096_u64,6230547710314249033_u64,6750288630986058098_u64];
    (*_2) = 1120315429_u32 as isize;
    (*_2) = !_1;
    _15.fld2 = [14660272184168276760_u64,2380802199242612516_u64,13458254069074402095_u64,17635053173654544412_u64,2938852731757366612_u64,4288520505026286226_u64];
    (*_2) = (-226500649_i32) as isize;
    Goto(bb9)
    }
    bb9 = {
    _3.1 = Move(_4);
    Call((*_2) = core::intrinsics::bswap(_17), ReturnTo(bb10), UnwindUnreachable())
    }
    bb10 = {
    _17 = (*_2);
    _10.fld1 = _3.2;
    (*_2) = _17;
    _6 = [2303448156_u32,622206029_u32,535693478_u32,4095579199_u32];
    place!(Field::<u16>(Variant(_3.1, 1), 1)) = !47472_u16;
    (*_2) = !_17;
    _5 = 58905504_u32 as f64;
    (*_2) = 245908830202389855777550432294117513603_u128 as isize;
    _16 = -(-23654975044390267172463977279254667064_i128);
    (*_2) = _1 * _1;
    (*_2) = _1 * _1;
    (*_2) = !_1;
    _10.fld0 = _15.fld0 << _10.fld1;
    _10.fld1 = _3.2;
    _18 = (*_2) ^ (*_2);
    Goto(bb11)
    }
    bb11 = {
    _12 = _15.fld1 & _15.fld1;
    (*_2) = _7 as isize;
    (*_2) = _18 ^ _17;
    (*_2) = _17;
    _15.fld2 = [12903498167673765396_u64,10223488137057217428_u64,15671524729299737765_u64,3199639834370101957_u64,11147129624700204367_u64,17049950152116178438_u64];
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = _15.fld0;
    _3.2 = 4719_i16 as usize;
    RET = _18;
    RET = !_1;
    _12 = _15.fld1 ^ _15.fld1;
    _10.fld1 = _15.fld1;
    _1 = -RET;
    (*_2) = -_1;
    _12 = 1337439846_u32 as usize;
    _10.fld1 = _15.fld1 & _15.fld1;
    (*_2) = _18 << _15.fld1;
    _2 = core::ptr::addr_of!(_1);
    (*_2) = RET & RET;
    _16 = 3815498439587394729_u64 as i128;
    Goto(bb12)
    }
    bb12 = {
    _22.fld2 = [4317920810371701752_u64,15051187845014710868_u64,4293452972205549124_u64,11548830128826028185_u64,16945976500947030211_u64,15669455042051374437_u64];
    (*_2) = _18;
    (*_2) = '\u{10a46}' as isize;
    _5 = _11 - _8;
    _18 = (*_2) & (*_2);
    _22.fld0 = _10.fld0 << (*_2);
    _9 = _22.fld2;
    (*_2) = _17 >> _18;
    _13 = [(*_2),RET,(*_2),(*_2),(*_2),(*_2),(*_2)];
    (*_2) = RET * RET;
    _22.fld1 = !_15.fld1;
    _10.fld1 = _15.fld1 + _3.2;
    _10.fld2 = [2794296113105246983_u64,1887767141151943506_u64,6162421361010539609_u64,10143739887636315199_u64,9958627982398972868_u64,4224149274518022888_u64];
    (*_2) = _18;
    (*_2) = _17 & RET;
    _3.1 = Adt19::Variant1 { fld0: _10.fld0,fld1: 45533_u16 };
    _4 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_3.1, 1), 0),fld1: 55119_u16 };
    (*_2) = '\u{10e75}' as isize;
    _22.fld0 = true as i64;
    (*_2) = 208253945612941641079134873796165411510_u128 as isize;
    (*_2) = RET - RET;
    Call((*_2) = core::intrinsics::transmute(_10.fld0), ReturnTo(bb13), UnwindUnreachable())
    }
    bb13 = {
    (*_2) = RET & RET;
    _5 = _11;
    (*_2) = RET ^ RET;
    _1 = RET | RET;
    (*_2) = RET ^ RET;
    place!(Field::<i64>(Variant(_4, 1), 0)) = !_10.fld0;
    _16 = (-88697949659558440446078737579907578363_i128);
    _16 = 65378609051153727763524046457153269124_i128;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = 2276_u16 as i64;
    Goto(bb14)
    }
    bb14 = {
    _15.fld1 = '\u{101edb}' as usize;
    _24 = '\u{e8cd2}';
    (*_2) = RET >> Field::<i64>(Variant(_4, 1), 0);
    RET = (*_2);
    Goto(bb15)
    }
    bb15 = {
    (*_2) = RET << _18;
    place!(Field::<u16>(Variant(_3.1, 1), 1)) = !7200_u16;
    _26 = core::ptr::addr_of_mut!(_7);
    Goto(bb16)
    }
    bb16 = {
    _31 = !2115800094_i32;
    _10.fld2 = _15.fld2;
    _32 = _8;
    (*_2) = -RET;
    _20 = [11789571426644954043_u64,15578441453258504943_u64,15894353756430792824_u64,7304199884979560749_u64,12346009166292334634_u64,18352780536194434241_u64];
    Goto(bb17)
    }
    bb17 = {
    (*_2) = RET;
    _9 = [17553795064420968557_u64,7273358475153978057_u64,7525621060266517923_u64,315871096370203392_u64,12295175580961215003_u64,2051486753746077438_u64];
    (*_26) = -(-5_i8);
    _22.fld2 = [9994315317734771303_u64,16069319500704274479_u64,5945883861148676993_u64,10397682528771960190_u64,11330269049018805670_u64,16966125594156444094_u64];
    _7 = (-11_i8);
    (*_2) = -RET;
    (*_2) = -_18;
    (*_26) = 36_i8 | (-25_i8);
    (*_26) = (-113_i8);
    _13 = [(*_2),(*_2),(*_2),RET,(*_2),(*_2),_1];
    place!(Field::<u16>(Variant(_3.1, 1), 1)) = _32 as u16;
    match (*_26) {
    0 => bb9,
    1 => bb12,
    2 => bb16,
    3 => bb4,
    4 => bb10,
    5 => bb6,
    340282366920938463463374607431768211343 => bb18,
    _ => bb7
    }
    }
    bb18 = {
    (*_26) = _31 as i8;
    match _16 {
    0 => bb15,
    1 => bb8,
    2 => bb19,
    3 => bb20,
    4 => bb21,
    5 => bb22,
    65378609051153727763524046457153269124 => bb24,
    _ => bb23
    }
    }
    bb19 = {
    _12 = _15.fld1 & _15.fld1;
    (*_2) = _7 as isize;
    (*_2) = _18 ^ _17;
    (*_2) = _17;
    _15.fld2 = [12903498167673765396_u64,10223488137057217428_u64,15671524729299737765_u64,3199639834370101957_u64,11147129624700204367_u64,17049950152116178438_u64];
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = _15.fld0;
    _3.2 = 4719_i16 as usize;
    RET = _18;
    RET = !_1;
    _12 = _15.fld1 ^ _15.fld1;
    _10.fld1 = _15.fld1;
    _1 = -RET;
    (*_2) = -_1;
    _12 = 1337439846_u32 as usize;
    _10.fld1 = _15.fld1 & _15.fld1;
    (*_2) = _18 << _15.fld1;
    _2 = core::ptr::addr_of!(_1);
    (*_2) = RET & RET;
    _16 = 3815498439587394729_u64 as i128;
    Goto(bb12)
    }
    bb20 = {
    _1 = 1535_i16 as isize;
    (*_2) = _17;
    (*_2) = _17 - _17;
    _11 = _8;
    Goto(bb8)
    }
    bb21 = {
    _15.fld0 = Field::<i64>(Variant(_4, 1), 0);
    _17 = (*_2);
    Goto(bb7)
    }
    bb22 = {
    _2 = core::ptr::addr_of!(RET);
    (*_2) = -_1;
    (*_2) = _1 - _1;
    (*_2) = 2823915359_u32 as isize;
    (*_2) = -_1;
    (*_2) = !_1;
    (*_2) = _1 * _1;
    (*_2) = _1;
    (*_2) = '\u{2a7fe}' as isize;
    _2 = core::ptr::addr_of!((*_2));
    (*_2) = _1 * _1;
    RET = _1 >> _1;
    _4 = Adt19::Variant1 { fld0: (-2687633089872776169_i64),fld1: 28879_u16 };
    (*_2) = _1 + _1;
    _5 = 124_u8 as f64;
    place!(Field::<i64>(Variant(_4, 1), 0)) = 7815232932321388204_i64 & 772556983537983219_i64;
    (*_2) = _1;
    RET = (-539660253_i32) as isize;
    _3.2 = !1_usize;
    (*_2) = Field::<i64>(Variant(_4, 1), 0) as isize;
    _4 = Adt19::Variant1 { fld0: (-7099578841506389648_i64),fld1: 16573_u16 };
    (*_2) = !_1;
    (*_2) = _1 | _1;
    _6 = [752689687_u32,1334323690_u32,2927908596_u32,455869403_u32];
    place!(Field::<i64>(Variant(_4, 1), 0)) = 3153492500_u32 as i64;
    (*_2) = _1 << _3.2;
    place!(Field::<i64>(Variant(_4, 1), 0)) = (-1568196567_i32) as i64;
    place!(Field::<u16>(Variant(_4, 1), 1)) = 65044_u16 * 24416_u16;
    (*_2) = Field::<u16>(Variant(_4, 1), 1) as isize;
    Call((*_2) = core::intrinsics::transmute(_1), ReturnTo(bb2), UnwindUnreachable())
    }
    bb23 = {
    _9 = [9878915406957484781_u64,8328199728275490313_u64,16741273447002255536_u64,3815855016295475202_u64,4629595090733313557_u64,7001963921606242564_u64];
    (*_2) = -_1;
    place!(Field::<u16>(Variant(_4, 1), 1)) = _7 as u16;
    (*_2) = _1;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = !Field::<i64>(Variant(_4, 1), 0);
    (*_2) = _1 >> _7;
    (*_2) = _1;
    (*_2) = _1 | _1;
    (*_2) = _1 + _1;
    (*_2) = Field::<i64>(Variant(_4, 1), 0) as isize;
    (*_2) = '\u{bf5e4}' as isize;
    _8 = -_5;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = -Field::<i64>(Variant(_4, 1), 0);
    (*_2) = _1 >> _3.2;
    _8 = _5 - _5;
    (*_2) = !_1;
    (*_2) = _1;
    (*_2) = -_1;
    _10.fld0 = Field::<i64>(Variant(_4, 1), 0);
    Goto(bb6)
    }
    bb24 = {
    _1 = _10.fld1 as isize;
    (*_2) = RET - RET;
    (*_2) = _18;
    _22.fld0 = Field::<i64>(Variant(_4, 1), 0) * _10.fld0;
    (*_2) = RET | RET;
    _3.2 = _10.fld1 >> (*_2);
    (*_26) = Field::<i64>(Variant(_4, 1), 0) as i8;
    _31 = false as i32;
    _15.fld2 = [1382798076165589526_u64,152321481749399388_u64,16370417605733454724_u64,2025877196386116947_u64,9111970139800253413_u64,14581446462228505699_u64];
    (*_2) = _18;
    (*_26) = 65_i8 ^ 116_i8;
    _10.fld0 = _22.fld0 << (*_26);
    _39 = Field::<u16>(Variant(_3.1, 1), 1) as f32;
    _13 = [_1,(*_2),(*_2),_18,RET,(*_2),RET];
    _22.fld0 = !_15.fld0;
    (*_2) = 226789718384619078511538502195787443109_u128 as isize;
    _12 = _8 as usize;
    RET = _31 as isize;
    _11 = 13862259289377339274_u64 as f64;
    _10.fld2 = [17407198493364621472_u64,832072950540461067_u64,10698903366411345805_u64,12128292263495392694_u64,2855573750348250385_u64,13163290304683004706_u64];
    place!(Field::<i64>(Variant(_4, 1), 0)) = !_22.fld0;
    match _16 {
    0 => bb14,
    1 => bb23,
    65378609051153727763524046457153269124 => bb26,
    _ => bb25
    }
    }
    bb25 = {
    _2 = core::ptr::addr_of!((*_2));
    (*_2) = 60007494312239466440773735694348801959_i128 as isize;
    (*_2) = 213_u8 as isize;
    (*_2) = _1 * _1;
    place!(Field::<u16>(Variant(_4, 1), 1)) = !64457_u16;
    (*_2) = _1 + _1;
    (*_2) = _1;
    (*_2) = _1;
    Goto(bb4)
    }
    bb26 = {
    (*_2) = RET * _18;
    match _16 {
    0 => bb14,
    1 => bb27,
    2 => bb28,
    3 => bb29,
    4 => bb30,
    5 => bb31,
    6 => bb32,
    65378609051153727763524046457153269124 => bb34,
    _ => bb33
    }
    }
    bb27 = {
    _9 = [9878915406957484781_u64,8328199728275490313_u64,16741273447002255536_u64,3815855016295475202_u64,4629595090733313557_u64,7001963921606242564_u64];
    (*_2) = -_1;
    place!(Field::<u16>(Variant(_4, 1), 1)) = _7 as u16;
    (*_2) = _1;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = !Field::<i64>(Variant(_4, 1), 0);
    (*_2) = _1 >> _7;
    (*_2) = _1;
    (*_2) = _1 | _1;
    (*_2) = _1 + _1;
    (*_2) = Field::<i64>(Variant(_4, 1), 0) as isize;
    (*_2) = '\u{bf5e4}' as isize;
    _8 = -_5;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = -Field::<i64>(Variant(_4, 1), 0);
    (*_2) = _1 >> _3.2;
    _8 = _5 - _5;
    (*_2) = !_1;
    (*_2) = _1;
    (*_2) = -_1;
    _10.fld0 = Field::<i64>(Variant(_4, 1), 0);
    Goto(bb6)
    }
    bb28 = {
    _12 = _15.fld1 & _15.fld1;
    (*_2) = _7 as isize;
    (*_2) = _18 ^ _17;
    (*_2) = _17;
    _15.fld2 = [12903498167673765396_u64,10223488137057217428_u64,15671524729299737765_u64,3199639834370101957_u64,11147129624700204367_u64,17049950152116178438_u64];
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = _15.fld0;
    _3.2 = 4719_i16 as usize;
    RET = _18;
    RET = !_1;
    _12 = _15.fld1 ^ _15.fld1;
    _10.fld1 = _15.fld1;
    _1 = -RET;
    (*_2) = -_1;
    _12 = 1337439846_u32 as usize;
    _10.fld1 = _15.fld1 & _15.fld1;
    (*_2) = _18 << _15.fld1;
    _2 = core::ptr::addr_of!(_1);
    (*_2) = RET & RET;
    _16 = 3815498439587394729_u64 as i128;
    Goto(bb12)
    }
    bb29 = {
    _3.1 = Move(_4);
    Call((*_2) = core::intrinsics::bswap(_17), ReturnTo(bb10), UnwindUnreachable())
    }
    bb30 = {
    _6 = [415238753_u32,4164447928_u32,3238051479_u32,3912672389_u32];
    (*_2) = _3.2 as isize;
    _4 = Adt19::Variant1 { fld0: 6002957747169643786_i64,fld1: 21702_u16 };
    place!(Field::<i64>(Variant(_4, 1), 0)) = 2723879193045716433_i64 >> (*_2);
    _2 = core::ptr::addr_of!(RET);
    (*_2) = 172_u8 as isize;
    place!(Field::<i64>(Variant(_4, 1), 0)) = _3.2 as i64;
    (*_2) = !_1;
    (*_2) = 41674252248890312015107301717111395329_i128 as isize;
    place!(Field::<u16>(Variant(_4, 1), 1)) = 46502_u16 - 57499_u16;
    (*_2) = _1;
    Goto(bb3)
    }
    bb31 = {
    _15.fld0 = Field::<i64>(Variant(_4, 1), 0);
    _17 = (*_2);
    Goto(bb7)
    }
    bb32 = {
    (*_26) = _31 as i8;
    match _16 {
    0 => bb15,
    1 => bb8,
    2 => bb19,
    3 => bb20,
    4 => bb21,
    5 => bb22,
    65378609051153727763524046457153269124 => bb24,
    _ => bb23
    }
    }
    bb33 = {
    _12 = _15.fld1 & _15.fld1;
    (*_2) = _7 as isize;
    (*_2) = _18 ^ _17;
    (*_2) = _17;
    _15.fld2 = [12903498167673765396_u64,10223488137057217428_u64,15671524729299737765_u64,3199639834370101957_u64,11147129624700204367_u64,17049950152116178438_u64];
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = _15.fld0;
    _3.2 = 4719_i16 as usize;
    RET = _18;
    RET = !_1;
    _12 = _15.fld1 ^ _15.fld1;
    _10.fld1 = _15.fld1;
    _1 = -RET;
    (*_2) = -_1;
    _12 = 1337439846_u32 as usize;
    _10.fld1 = _15.fld1 & _15.fld1;
    (*_2) = _18 << _15.fld1;
    _2 = core::ptr::addr_of!(_1);
    (*_2) = RET & RET;
    _16 = 3815498439587394729_u64 as i128;
    Goto(bb12)
    }
    bb34 = {
    (*_2) = !_18;
    (*_26) = (-43_i8) | 51_i8;
    (*_26) = (-98_i8) + 59_i8;
    (*_26) = _31 as i8;
    (*_2) = _15.fld0 as isize;
    (*_26) = (-15_i8);
    (*_26) = 1540418776_u32 as i8;
    (*_2) = _17 + _18;
    (*_2) = _18 << _22.fld0;
    _20 = _9;
    _20 = [11840250061133790319_u64,1472988380353802560_u64,16514438980554701634_u64,3823679551959469126_u64,18195418885288889433_u64,13386264444253649297_u64];
    match _16 {
    0 => bb13,
    1 => bb32,
    2 => bb16,
    3 => bb28,
    4 => bb22,
    5 => bb21,
    65378609051153727763524046457153269124 => bb36,
    _ => bb35
    }
    }
    bb35 = {
    _3.1 = Move(_4);
    Call((*_2) = core::intrinsics::bswap(_17), ReturnTo(bb10), UnwindUnreachable())
    }
    bb36 = {
    _10.fld0 = _22.fld0 - Field::<i64>(Variant(_4, 1), 0);
    place!(Field::<u16>(Variant(_4, 1), 1)) = Field::<u16>(Variant(_3.1, 1), 1);
    _33 = (*_2) ^ _1;
    _22.fld2 = [5694673639722627027_u64,4494184142681516509_u64,1992562489168178810_u64,7267834255420380544_u64,15352818546616690860_u64,2004667872625102408_u64];
    _25 = core::ptr::addr_of!(_8);
    _33 = (*_2) - (*_2);
    (*_26) = 20_i8;
    (*_25) = _32 + _5;
    _32 = -(*_25);
    (*_26) = (-62_i8);
    _41 = !true;
    (*_25) = _32 * _32;
    _22.fld1 = _3.2;
    (*_2) = _33 * _33;
    _44 = 11102841085216240089_u64 as f32;
    (*_26) = -116_i8;
    (*_2) = !_18;
    (*_26) = (-101_i8) | 64_i8;
    match _16 {
    0 => bb1,
    1 => bb37,
    65378609051153727763524046457153269124 => bb39,
    _ => bb38
    }
    }
    bb37 = {
    (*_2) = RET & RET;
    _5 = _11;
    (*_2) = RET ^ RET;
    _1 = RET | RET;
    (*_2) = RET ^ RET;
    place!(Field::<i64>(Variant(_4, 1), 0)) = !_10.fld0;
    _16 = (-88697949659558440446078737579907578363_i128);
    _16 = 65378609051153727763524046457153269124_i128;
    place!(Field::<i64>(Variant(_3.1, 1), 0)) = 2276_u16 as i64;
    Goto(bb14)
    }
    bb38 = {
    _17 = (*_2);
    _10.fld1 = _3.2;
    (*_2) = _17;
    _6 = [2303448156_u32,622206029_u32,535693478_u32,4095579199_u32];
    place!(Field::<u16>(Variant(_3.1, 1), 1)) = !47472_u16;
    (*_2) = !_17;
    _5 = 58905504_u32 as f64;
    (*_2) = 245908830202389855777550432294117513603_u128 as isize;
    _16 = -(-23654975044390267172463977279254667064_i128);
    (*_2) = _1 * _1;
    (*_2) = _1 * _1;
    (*_2) = !_1;
    _10.fld0 = _15.fld0 << _10.fld1;
    _10.fld1 = _3.2;
    _18 = (*_2) ^ (*_2);
    Goto(bb11)
    }
    bb39 = {
    _8 = _32;
    _8 = 153383641244453446280730054646746285053_u128 as f64;
    (*_25) = Field::<u16>(Variant(_4, 1), 1) as f64;
    (*_26) = !19_i8;
    (*_25) = _5 * _5;
    place!(Field::<u16>(Variant(_3.1, 1), 1)) = !Field::<u16>(Variant(_4, 1), 1);
    _24 = '\u{c8d65}';
    _3.2 = _22.fld1 ^ _22.fld1;
    _49.fld1 = _3.2;
    _15.fld2 = [7197404646556032364_u64,13689450763965817629_u64,15486866966248305843_u64,3328439797347184811_u64,15958695646445493517_u64,8990357927543192534_u64];
    _48 = -(*_25);
    _40 = (*_26);
    (*_2) = _18;
    _25 = core::ptr::addr_of!((*_25));
    (*_2) = _33 + _18;
    _38 = (*_25) == (*_25);
    match _16 {
    65378609051153727763524046457153269124 => bb40,
    _ => bb19
    }
    }
    bb40 = {
    _49.fld0 = (-19086_i16) as i64;
    (*_26) = (-23313_i16) as i8;
    _49.fld2 = [7251050537424588092_u64,4117939873201169521_u64,17375910344549481466_u64,11320782153459716869_u64,12460763436425064930_u64,15082905330690661183_u64];
    _12 = _22.fld1;
    _50.0.fld1 = _22.fld1;
    _41 = !_38;
    _50.3.0.fld1 = 53_u8 * 85_u8;
    (*_26) = _49.fld0 as i8;
    _33 = -(*_2);
    _10.fld0 = _15.fld0 ^ Field::<i64>(Variant(_3.1, 1), 0);
    _50.0.fld1 = _12;
    (*_2) = !_33;
    _50.2.fld0 = Field::<i64>(Variant(_3.1, 1), 0) ^ _49.fld0;
    _38 = _39 > _39;
    _50.2.fld2 = [3265269583262162761_u64,940183981445123515_u64,201771504746543062_u64,1306053338686150068_u64,2847735570717292330_u64,6852920511123169263_u64];
    (*_26) = Field::<u16>(Variant(_3.1, 1), 1) as i8;
    _50.3.1 = core::ptr::addr_of_mut!(_40);
    (*_25) = _32 * _32;
    _31 = _39 as i32;
    (*_2) = _18;
    (*_2) = 5427496950498197792_u64 as isize;
    match _16 {
    0 => bb41,
    1 => bb42,
    2 => bb43,
    65378609051153727763524046457153269124 => bb45,
    _ => bb44
    }
    }
    bb41 = {
    _1 = _10.fld1 as isize;
    (*_2) = RET - RET;
    (*_2) = _18;
    _22.fld0 = Field::<i64>(Variant(_4, 1), 0) * _10.fld0;
    (*_2) = RET | RET;
    _3.2 = _10.fld1 >> (*_2);
    (*_26) = Field::<i64>(Variant(_4, 1), 0) as i8;
    _31 = false as i32;
    _15.fld2 = [1382798076165589526_u64,152321481749399388_u64,16370417605733454724_u64,2025877196386116947_u64,9111970139800253413_u64,14581446462228505699_u64];
    (*_2) = _18;
    (*_26) = 65_i8 ^ 116_i8;
    _10.fld0 = _22.fld0 << (*_26);
    _39 = Field::<u16>(Variant(_3.1, 1), 1) as f32;
    _13 = [_1,(*_2),(*_2),_18,RET,(*_2),RET];
    _22.fld0 = !_15.fld0;
    (*_2) = 226789718384619078511538502195787443109_u128 as isize;
    _12 = _8 as usize;
    RET = _31 as isize;
    _11 = 13862259289377339274_u64 as f64;
    _10.fld2 = [17407198493364621472_u64,832072950540461067_u64,10698903366411345805_u64,12128292263495392694_u64,2855573750348250385_u64,13163290304683004706_u64];
    place!(Field::<i64>(Variant(_4, 1), 0)) = !_22.fld0;
    match _16 {
    0 => bb14,
    1 => bb23,
    65378609051153727763524046457153269124 => bb26,
    _ => bb25
    }
    }
    bb42 = {
    _6 = [415238753_u32,4164447928_u32,3238051479_u32,3912672389_u32];
    (*_2) = _3.2 as isize;
    _4 = Adt19::Variant1 { fld0: 6002957747169643786_i64,fld1: 21702_u16 };
    place!(Field::<i64>(Variant(_4, 1), 0)) = 2723879193045716433_i64 >> (*_2);
    _2 = core::ptr::addr_of!(RET);
    (*_2) = 172_u8 as isize;
    place!(Field::<i64>(Variant(_4, 1), 0)) = _3.2 as i64;
    (*_2) = !_1;
    (*_2) = 41674252248890312015107301717111395329_i128 as isize;
    place!(Field::<u16>(Variant(_4, 1), 1)) = 46502_u16 - 57499_u16;
    (*_2) = _1;
    Goto(bb3)
    }
    bb43 = {
    _22.fld2 = [4317920810371701752_u64,15051187845014710868_u64,4293452972205549124_u64,11548830128826028185_u64,16945976500947030211_u64,15669455042051374437_u64];
    (*_2) = _18;
    (*_2) = '\u{10a46}' as isize;
    _5 = _11 - _8;
    _18 = (*_2) & (*_2);
    _22.fld0 = _10.fld0 << (*_2);
    _9 = _22.fld2;
    (*_2) = _17 >> _18;
    _13 = [(*_2),RET,(*_2),(*_2),(*_2),(*_2),(*_2)];
    (*_2) = RET * RET;
    _22.fld1 = !_15.fld1;
    _10.fld1 = _15.fld1 + _3.2;
    _10.fld2 = [2794296113105246983_u64,1887767141151943506_u64,6162421361010539609_u64,10143739887636315199_u64,9958627982398972868_u64,4224149274518022888_u64];
    (*_2) = _18;
    (*_2) = _17 & RET;
    _3.1 = Adt19::Variant1 { fld0: _10.fld0,fld1: 45533_u16 };
    _4 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_3.1, 1), 0),fld1: 55119_u16 };
    (*_2) = '\u{10e75}' as isize;
    _22.fld0 = true as i64;
    (*_2) = 208253945612941641079134873796165411510_u128 as isize;
    (*_2) = RET - RET;
    Call((*_2) = core::intrinsics::transmute(_10.fld0), ReturnTo(bb13), UnwindUnreachable())
    }
    bb44 = {
    (*_26) = _31 as i8;
    match _16 {
    0 => bb15,
    1 => bb8,
    2 => bb19,
    3 => bb20,
    4 => bb21,
    5 => bb22,
    65378609051153727763524046457153269124 => bb24,
    _ => bb23
    }
    }
    bb45 = {
    (*_26) = !_40;
    _43 = &mut _16;
    Call(_15.fld0 = core::intrinsics::transmute(_3.2), ReturnTo(bb46), UnwindUnreachable())
    }
    bb46 = {
    _50.3.3 = !Field::<u16>(Variant(_4, 1), 1);
    (*_2) = _33 >> _22.fld1;
    Call((*_25) = core::intrinsics::fmaf64(_32, _5, _32), ReturnTo(bb47), UnwindUnreachable())
    }
    bb47 = {
    _56 = core::ptr::addr_of_mut!(_43);
    (*_26) = !_40;
    _15.fld0 = (*_25) as i64;
    _50.0.fld2 = [12116521353384799736_u64,7593483463461767860_u64,13783394624767710441_u64,11144433409741856127_u64,16896305416359690733_u64,17836867927194912608_u64];
    (*_26) = !_40;
    _48 = (*_25) - (*_25);
    _56 = core::ptr::addr_of_mut!((*_56));
    (*_26) = _40 << _3.2;
    Goto(bb48)
    }
    bb48 = {
    (*_26) = _40 << _3.2;
    (*_2) = _50.3.3 as isize;
    (*_26) = _40 & _40;
    (*_2) = -_33;
    _51 = _31;
    (*_26) = _40 * _40;
    _37 = (*_2);
    (*_2) = _33 & _33;
    (*_26) = _40 + _40;
    _50.0.fld1 = _15.fld0 as usize;
    _6 = [448132243_u32,3388681857_u32,2739269927_u32,3974264767_u32];
    (*_2) = !_37;
    (*_43) = _38 as i128;
    (*_2) = -_33;
    _10.fld1 = (*_26) as usize;
    _22.fld1 = _12;
    _17 = (*_2);
    (*_43) = _33 as i128;
    (*_26) = !_40;
    _50.2.fld2 = [1676114188471800234_u64,1907455498762933880_u64,7816396903587283727_u64,2810965753750910440_u64,16783204908603305826_u64,2108358264826399805_u64];
    (*_2) = _37;
    (*_43) = 55334215950782233705491911725362173007_i128;
    (*_2) = _39 as isize;
    _31 = _51 - _51;
    (*_2) = _33 & _33;
    match (*_43) {
    0 => bb46,
    55334215950782233705491911725362173007 => bb49,
    _ => bb11
    }
    }
    bb49 = {
    (*_2) = _33;
    (*_2) = _37 << _3.2;
    (*_25) = _48;
    place!(Field::<u16>(Variant(_3.1, 1), 1)) = (-28016_i16) as u16;
    (*_26) = _40;
    _33 = (*_2);
    _8 = _48 * _32;
    _44 = _39 + _39;
    _23 = &mut (*_56);
    _47 = &place!(Field::<u16>(Variant(_4, 1), 1));
    _42 = _24;
    (*_2) = (*_25) as isize;
    (*_2) = _17 | _33;
    _60 = -(*_25);
    _50.2.fld1 = !_50.0.fld1;
    (*_26) = _40;
    _54 = (*_2) << (*_2);
    _49.fld0 = Field::<i64>(Variant(_4, 1), 0);
    place!(Field::<i64>(Variant(_4, 1), 0)) = 953164672_u32 as i64;
    _31 = _51 & _51;
    _15.fld0 = _50.2.fld0;
    Goto(bb50)
    }
    bb50 = {
    Call(_62 = dump_var(6_usize, 37_usize, Move(_37), 41_usize, Move(_41), 7_usize, Move(_7), 38_usize, Move(_38)), ReturnTo(bb51), UnwindUnreachable())
    }
    bb51 = {
    Call(_62 = dump_var(6_usize, 6_usize, Move(_6), 42_usize, Move(_42), 51_usize, Move(_51), 20_usize, Move(_20)), ReturnTo(bb52), UnwindUnreachable())
    }
    bb52 = {
    Call(_62 = dump_var(6_usize, 33_usize, Move(_33), 16_usize, Move(_16), 63_usize, _63, 63_usize, _63), ReturnTo(bb53), UnwindUnreachable())
    }
    bb53 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn7(mut _1: *const isize, mut _2: isize, mut _3: isize, mut _4: isize) -> usize {
    mir! {
    type RET = usize;
    let _5: *const u32;
    let _6: *mut &'static *mut f32;
    let _7: (u32, *mut i8, &'static mut &'static mut &'static mut i128, &'static *mut f32);
    let _8: (*mut i8, f32);
    let _9: &'static mut u32;
    let _10: *const &'static *mut &'static *mut f32;
    let _11: u16;
    let _12: i32;
    let _13: (u16, char, u16, char);
    let _14: f64;
    let _15: (*mut i8, f32);
    let _16: f32;
    let _17: char;
    let _18: *const usize;
    let _19: &'static mut i128;
    let _20: Adt31;
    let _21: [char; 3];
    let _22: bool;
    let _23: &'static i32;
    let _24: *mut (*mut i8, f32);
    let _25: (i64, (u8,), (u16, char, u16, char), Adt38);
    let _26: u16;
    let _27: [i128; 3];
    let _28: i8;
    let _29: ();
    let _30: ();
    {
    RET = 4_usize | 1005883108510103832_usize;
    _2 = _3 >> _3;
    _1 = core::ptr::addr_of!(_2);
    (*_1) = _3 >> _4;
    (*_1) = (-3362_i16) as isize;
    _2 = _3;
    (*_1) = _4;
    (*_1) = 761481566_i32 as isize;
    (*_1) = 7430_u16 as isize;
    (*_1) = _3 >> _3;
    Goto(bb1)
    }
    bb1 = {
    (*_1) = _3 << RET;
    (*_1) = _4 << RET;
    RET = 0_usize - 5_usize;
    _3 = -_2;
    (*_1) = _3 & _4;
    (*_1) = _3;
    (*_1) = _3 - _3;
    (*_1) = _3 >> _3;
    (*_1) = _4 >> _3;
    (*_1) = -_3;
    (*_1) = _3 | _4;
    (*_1) = _3 & _4;
    (*_1) = !_4;
    (*_1) = _4 & _3;
    _2 = !_3;
    (*_1) = (-17602100474052476725772185397421448157_i128) as isize;
    _4 = (*_1);
    (*_1) = _3 | _3;
    (*_1) = (-20210_i16) as isize;
    (*_1) = !_3;
    (*_1) = _4;
    Call((*_1) = core::intrinsics::bswap(_4), ReturnTo(bb2), UnwindUnreachable())
    }
    bb2 = {
    (*_1) = 24458_u16 as isize;
    (*_1) = -_3;
    (*_1) = _3 >> _3;
    (*_1) = _4;
    _1 = core::ptr::addr_of!(_2);
    _7.0 = 2890016223_u32;
    (*_1) = _3 >> _3;
    (*_1) = 56635_u16 as isize;
    (*_1) = _3 - _3;
    (*_1) = (-419833508_i32) as isize;
    (*_1) = -_3;
    Goto(bb3)
    }
    bb3 = {
    (*_1) = _3;
    (*_1) = _3 - _3;
    _2 = (-20770_i16) as isize;
    _8.1 = (-594553510_i32) as f32;
    _7.0 = 2262758105_u32 | 872724217_u32;
    (*_1) = _3 - _3;
    (*_1) = _3 | _3;
    (*_1) = _4 ^ _3;
    _2 = -_4;
    (*_1) = _3;
    (*_1) = 3302550668619752598_u64 as isize;
    _5 = core::ptr::addr_of!(_7.0);
    _5 = core::ptr::addr_of!((*_5));
    RET = 5_usize;
    (*_1) = _3 + _3;
    (*_1) = _3 | _3;
    Goto(bb4)
    }
    bb4 = {
    (*_5) = 1015593380_u32 & 1636897305_u32;
    (*_1) = !_3;
    (*_1) = _3 & _3;
    (*_5) = (-18_i8) as u32;
    _7.0 = 2938255696_u32;
    (*_1) = _3 ^ _3;
    _5 = core::ptr::addr_of!((*_5));
    _12 = (*_1) as i32;
    (*_1) = -_3;
    _16 = _8.1 - _8.1;
    (*_5) = 2142974329_u32;
    Call((*_5) = fn8(Move(_1), (*_1)), ReturnTo(bb5), UnwindUnreachable())
    }
    bb5 = {
    (*_5) = 2647384802_u32;
    _4 = _2 >> _12;
    (*_5) = !2937403725_u32;
    (*_5) = RET as u32;
    (*_5) = 2203261937_u32 ^ 433365904_u32;
    _13.3 = '\u{bee0c}';
    _4 = _2 & _2;
    _9 = &mut (*_5);
    _5 = core::ptr::addr_of!((*_9));
    _14 = 47580900347479918895636550076026734042_u128 as f64;
    _13.2 = !24281_u16;
    _2 = _4;
    _17 = _13.3;
    (*_5) = _13.3 as u32;
    Goto(bb6)
    }
    bb6 = {
    (*_9) = 952003262_u32;
    (*_9) = 670700512_u32 * 2311880258_u32;
    _2 = _4 >> (*_9);
    _16 = -_8.1;
    (*_9) = 3750540124_u32 | 859634075_u32;
    _13 = (63896_u16, _17, 61110_u16, _17);
    (*_9) = 2603859627_u32;
    _4 = _3 ^ _2;
    _18 = core::ptr::addr_of!(RET);
    (*_9) = !3579240711_u32;
    (*_9) = !468963664_u32;
    _18 = core::ptr::addr_of!((*_18));
    _14 = 24483_i16 as f64;
    (*_18) = 4_usize;
    match _13.2 {
    0 => bb5,
    1 => bb2,
    2 => bb7,
    61110 => bb9,
    _ => bb8
    }
    }
    bb7 = {
    (*_5) = 2647384802_u32;
    _4 = _2 >> _12;
    (*_5) = !2937403725_u32;
    (*_5) = RET as u32;
    (*_5) = 2203261937_u32 ^ 433365904_u32;
    _13.3 = '\u{bee0c}';
    _4 = _2 & _2;
    _9 = &mut (*_5);
    _5 = core::ptr::addr_of!((*_9));
    _14 = 47580900347479918895636550076026734042_u128 as f64;
    _13.2 = !24281_u16;
    _2 = _4;
    _17 = _13.3;
    (*_5) = _13.3 as u32;
    Goto(bb6)
    }
    bb8 = {
    (*_1) = _3;
    (*_1) = _3 - _3;
    _2 = (-20770_i16) as isize;
    _8.1 = (-594553510_i32) as f32;
    _7.0 = 2262758105_u32 | 872724217_u32;
    (*_1) = _3 - _3;
    (*_1) = _3 | _3;
    (*_1) = _4 ^ _3;
    _2 = -_4;
    (*_1) = _3;
    (*_1) = 3302550668619752598_u64 as isize;
    _5 = core::ptr::addr_of!(_7.0);
    _5 = core::ptr::addr_of!((*_5));
    RET = 5_usize;
    (*_1) = _3 + _3;
    (*_1) = _3 | _3;
    Goto(bb4)
    }
    bb9 = {
    (*_18) = 6_usize;
    (*_9) = false as u32;
    (*_18) = 13649867478732830342_usize;
    (*_18) = 7435062819054408993_usize * 3_usize;
    (*_18) = !18324041361606438705_usize;
    (*_9) = !594114725_u32;
    (*_9) = 3915541283_u32;
    Goto(bb10)
    }
    bb10 = {
    _14 = _13.0 as f64;
    _12 = _8.1 as i32;
    (*_18) = !0_usize;
    (*_9) = 218_u8 as u32;
    _15.1 = _8.1;
    _25.3.fld1 = 253_u8;
    (*_9) = 2610835878_u32;
    (*_18) = 11507202114982864002_usize - 3_usize;
    (*_18) = !5035887432306736225_usize;
    (*_9) = !1743799487_u32;
    _22 = _4 <= _2;
    _24 = core::ptr::addr_of_mut!(_15);
    (*_9) = !2589804896_u32;
    _17 = _13.1;
    _21 = [_13.3,_13.1,_13.1];
    _1 = core::ptr::addr_of!(_3);
    match _13.2 {
    0 => bb1,
    1 => bb2,
    2 => bb3,
    3 => bb4,
    4 => bb5,
    5 => bb6,
    6 => bb7,
    61110 => bb11,
    _ => bb8
    }
    }
    bb11 = {
    (*_9) = 167378574736695384366832884235637467682_u128 as u32;
    (*_18) = 5628083836161556828_usize * 3_usize;
    (*_1) = _4;
    (*_24).0 = core::ptr::addr_of_mut!(_28);
    (*_18) = _25.3.fld1 as usize;
    (*_24).0 = core::ptr::addr_of_mut!(_28);
    (*_18) = 4_usize << (*_1);
    _25.2.3 = _13.3;
    _25.2.0 = _13.0 | _13.2;
    Goto(bb12)
    }
    bb12 = {
    Call(_29 = dump_var(7_usize, 17_usize, Move(_17), 12_usize, Move(_12), 13_usize, Move(_13), 22_usize, Move(_22)), ReturnTo(bb13), UnwindUnreachable())
    }
    bb13 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: *const isize, mut _2: isize) -> u32 {
    mir! {
    type RET = u32;
    let _3: u32;
    let _4: char;
    let _5: i32;
    let _6: [u64; 6];
    let _7: (Adt38, *mut i8, f32, u16);
    let _8: (Adt38, *mut i8, f32, u16);
    let _9: *mut u128;
    let _10: (*mut i8, f32);
    let _11: bool;
    let _12: isize;
    let _13: usize;
    let _14: Adt80;
    let _15: isize;
    let _16: [u16; 2];
    let _17: *mut i8;
    let _18: &'static *const u32;
    let _19: bool;
    let _20: i16;
    let _21: char;
    let _22: bool;
    let _23: ((Adt27, [u64; 3]), ((char, i64, u64),), *mut &'static mut i128, [char; 3]);
    let _24: (i16, &'static mut *const usize, *mut *mut u128);
    let _25: isize;
    let _26: f64;
    let _27: *const (u16, char, u16, char);
    let _28: Adt19;
    let _29: f32;
    let _30: &'static mut u32;
    let _31: [char; 3];
    let _32: f64;
    let _33: *mut i8;
    let _34: &'static mut &'static mut &'static mut i128;
    let _35: [u16; 2];
    let _36: u8;
    let _37: f64;
    let _38: *const &'static *mut &'static *mut f32;
    let _39: *mut f32;
    let _40: char;
    let _41: f64;
    let _42: isize;
    let _43: ();
    let _44: ();
    {
    _1 = core::ptr::addr_of!(_2);
    (*_1) = (-9223372036854775808_isize) >> 1667387663954203275_i64;
    (*_1) = (-9223372036854775808_isize) & 9223372036854775807_isize;
    (*_1) = 9223372036854775807_isize;
    (*_1) = 186_u8 as isize;
    (*_1) = 19992_i16 as isize;
    (*_1) = 9223372036854775807_isize;
    _2 = (-27_isize) | (-9223372036854775808_isize);
    _4 = '\u{109357}';
    _2 = true as isize;
    (*_1) = 9223372036854775807_isize;
    (*_1) = (-9223372036854775808_isize) + 100_isize;
    (*_1) = (-124_isize) << 2007665385707871441_i64;
    (*_1) = (-9223372036854775808_isize);
    (*_1) = false as isize;
    (*_1) = (-9223372036854775808_isize);
    _2 = 101_isize >> 101_i8;
    Goto(bb1)
    }
    bb1 = {
    _3 = 2810513687_u32 | 3567928691_u32;
    _4 = '\u{684c6}';
    (*_1) = 17191_u16 as isize;
    (*_1) = 7518757531714067954_i64 as isize;
    _5 = (-1419946663_i32);
    (*_1) = 9223372036854775807_isize;
    (*_1) = _5 as isize;
    (*_1) = (-9223372036854775808_isize) >> _3;
    _2 = -(-118_isize);
    match _5 {
    0 => bb2,
    1 => bb3,
    2 => bb4,
    3 => bb5,
    340282366920938463463374607430348264793 => bb7,
    _ => bb6
    }
    }
    bb2 = {
    Return()
    }
    bb3 = {
    Return()
    }
    bb4 = {
    Return()
    }
    bb5 = {
    Return()
    }
    bb6 = {
    Return()
    }
    bb7 = {
    (*_1) = 34_isize + (-54_isize);
    (*_1) = (-30277_i16) as isize;
    _1 = core::ptr::addr_of!((*_1));
    (*_1) = !9223372036854775807_isize;
    match _5 {
    0 => bb1,
    1 => bb8,
    340282366920938463463374607430348264793 => bb10,
    _ => bb9
    }
    }
    bb8 = {
    _3 = 2810513687_u32 | 3567928691_u32;
    _4 = '\u{684c6}';
    (*_1) = 17191_u16 as isize;
    (*_1) = 7518757531714067954_i64 as isize;
    _5 = (-1419946663_i32);
    (*_1) = 9223372036854775807_isize;
    (*_1) = _5 as isize;
    (*_1) = (-9223372036854775808_isize) >> _3;
    _2 = -(-118_isize);
    match _5 {
    0 => bb2,
    1 => bb3,
    2 => bb4,
    3 => bb5,
    340282366920938463463374607430348264793 => bb7,
    _ => bb6
    }
    }
    bb9 = {
    Return()
    }
    bb10 = {
    _7.0.fld0 = true & true;
    Goto(bb11)
    }
    bb11 = {
    (*_1) = (-86_isize);
    _8.0.fld1 = 146_u8;
    _7.2 = (-124_i8) as f32;
    (*_1) = _3 as isize;
    RET = 311943726417170677763385099268493811807_u128 as u32;
    _8.0.fld0 = !_7.0.fld0;
    (*_1) = (-50_isize) + 106_isize;
    _8.0.fld0 = (*_1) == (*_1);
    (*_1) = (-9223372036854775808_isize) & (-9223372036854775808_isize);
    _10.1 = -_7.2;
    _7.0.fld1 = _8.0.fld1 ^ _8.0.fld1;
    (*_1) = (-9223372036854775808_isize) >> _5;
    _8.3 = 1466_u16 << (*_1);
    (*_1) = -9223372036854775807_isize;
    _1 = core::ptr::addr_of!((*_1));
    _2 = 9223372036854775807_isize << _5;
    (*_1) = (-9223372036854775808_isize);
    (*_1) = (-87_isize) - (-18_isize);
    _7.3 = _8.3 << _7.0.fld1;
    Call((*_1) = fn9(), ReturnTo(bb12), UnwindUnreachable())
    }
    bb12 = {
    _7.2 = _10.1 - _10.1;
    _12 = 10509284621273682590_u64 as isize;
    _8.2 = _7.2 * _10.1;
    _6 = [16982405912173509309_u64,9016835542156987304_u64,7163107904074269291_u64,1293094712189392503_u64,3798588998463175079_u64,11283170193430918479_u64];
    (*_1) = _10.1 as isize;
    _11 = _7.3 != _8.3;
    _11 = _7.0.fld0;
    (*_1) = _12 & _12;
    (*_1) = _12 * _12;
    _7.0.fld1 = (*_1) as u8;
    (*_1) = _12;
    _7.0.fld0 = !_8.0.fld0;
    _7.3 = _8.3 | _8.3;
    (*_1) = _12 | _12;
    match _8.0.fld1 {
    0 => bb1,
    1 => bb13,
    2 => bb14,
    146 => bb16,
    _ => bb15
    }
    }
    bb13 = {
    Return()
    }
    bb14 = {
    _7.0.fld0 = true & true;
    Goto(bb11)
    }
    bb15 = {
    Return()
    }
    bb16 = {
    _7.2 = _8.2;
    _15 = (*_1);
    (*_1) = _7.0.fld1 as isize;
    _16 = [_7.3,_7.3];
    _4 = '\u{97ada}';
    (*_1) = _12;
    Goto(bb17)
    }
    bb17 = {
    (*_1) = _15 ^ _15;
    _15 = (*_1) - (*_1);
    _8.0 = Adt38 { fld0: _7.0.fld0,fld1: _7.0.fld1 };
    _10.1 = _8.2 - _8.2;
    _16 = [_7.3,_7.3];
    (*_1) = !_15;
    _13 = 10968153570560885042_usize | 0_usize;
    _3 = RET;
    (*_1) = -_15;
    (*_1) = _15;
    _8.3 = !_7.3;
    _1 = core::ptr::addr_of!(_2);
    _8.2 = _7.2 * _7.2;
    _8.0.fld0 = _7.0.fld0;
    _7.3 = !_8.3;
    Call((*_1) = fn10(Move(_1), _15, _12, _7.0.fld0, _7.2), ReturnTo(bb18), UnwindUnreachable())
    }
    bb18 = {
    _8.0 = Adt38 { fld0: _7.0.fld0,fld1: _7.0.fld1 };
    _8.0.fld0 = _11;
    _7.0.fld0 = _8.0.fld0;
    _7.0.fld0 = _11;
    _16 = [_7.3,_8.3];
    _19 = !_11;
    _11 = !_19;
    _7.0.fld0 = _8.0.fld0 ^ _19;
    _7.2 = _10.1;
    _8.0.fld1 = _7.0.fld1 >> _2;
    _5 = (-1472021878_i32);
    _7.0 = Adt38 { fld0: _19,fld1: _8.0.fld1 };
    _3 = RET;
    _5 = (-83889827_i32) | 31929046_i32;
    _8.3 = _7.3 + _7.3;
    _3 = RET * RET;
    RET = 3516824546675090297_u64 as u32;
    _15 = _2 | _2;
    _11 = !_7.0.fld0;
    _20 = (-28825_i16);
    _4 = '\u{9edbf}';
    _5 = 1971623705_i32 - (-767659078_i32);
    _3 = _7.0.fld1 as u32;
    _10.1 = -_7.2;
    _8.0.fld1 = _7.0.fld1 + _7.0.fld1;
    match _20 {
    0 => bb19,
    1 => bb20,
    2 => bb21,
    3 => bb22,
    4 => bb23,
    340282366920938463463374607431768182631 => bb25,
    _ => bb24
    }
    }
    bb19 = {
    (*_1) = _15 ^ _15;
    _15 = (*_1) - (*_1);
    _8.0 = Adt38 { fld0: _7.0.fld0,fld1: _7.0.fld1 };
    _10.1 = _8.2 - _8.2;
    _16 = [_7.3,_7.3];
    (*_1) = !_15;
    _13 = 10968153570560885042_usize | 0_usize;
    _3 = RET;
    (*_1) = -_15;
    (*_1) = _15;
    _8.3 = !_7.3;
    _1 = core::ptr::addr_of!(_2);
    _8.2 = _7.2 * _7.2;
    _8.0.fld0 = _7.0.fld0;
    _7.3 = !_8.3;
    Call((*_1) = fn10(Move(_1), _15, _12, _7.0.fld0, _7.2), ReturnTo(bb18), UnwindUnreachable())
    }
    bb20 = {
    _7.2 = _8.2;
    _15 = (*_1);
    (*_1) = _7.0.fld1 as isize;
    _16 = [_7.3,_7.3];
    _4 = '\u{97ada}';
    (*_1) = _12;
    Goto(bb17)
    }
    bb21 = {
    Return()
    }
    bb22 = {
    Return()
    }
    bb23 = {
    Return()
    }
    bb24 = {
    _7.0.fld0 = true & true;
    Goto(bb11)
    }
    bb25 = {
    _12 = _2 * _15;
    _7.0 = Adt38 { fld0: _8.0.fld0,fld1: _8.0.fld1 };
    _19 = _12 == _12;
    _12 = _15;
    _4 = '\u{d1cec}';
    _3 = RET - RET;
    RET = _3;
    _16 = [_8.3,_8.3];
    _12 = !_15;
    _23.1.0.1 = 7814101020104823478_i64 & (-8903080536459416143_i64);
    _21 = _4;
    Call(_23.1.0.2 = fn12(_12, _7.3, _11, _4, _2, _21, _3, _11, _13, _20, _15), ReturnTo(bb26), UnwindUnreachable())
    }
    bb26 = {
    _8.0 = Adt38 { fld0: _19,fld1: _7.0.fld1 };
    _8.0.fld1 = _7.0.fld1 & _7.0.fld1;
    _22 = !_19;
    _23.1.0.2 = 17418108770860567217_u64 + 18353931280347680201_u64;
    _29 = _8.0.fld1 as f32;
    _23.1.0 = (_4, 3854699413272426801_i64, 10376278190491611485_u64);
    _8.2 = _29;
    _28 = Adt19::Variant0 { fld0: _29 };
    _2 = !_12;
    _8.3 = !_7.3;
    _7.3 = _8.3 ^ _8.3;
    place!(Field::<f32>(Variant(_28, 0), 0)) = _8.2 * _8.2;
    _23.1.0.2 = 17191504209334596926_u64 & 6583049923092147835_u64;
    _8.2 = _10.1;
    _23.1.0.1 = 64799660238578590872144960301339251265_u128 as i64;
    _8.2 = -_29;
    _3 = RET - RET;
    match _20 {
    340282366920938463463374607431768182631 => bb27,
    _ => bb20
    }
    }
    bb27 = {
    _23.0.1 = [_23.1.0.2,_23.1.0.2,_23.1.0.2];
    match _20 {
    0 => bb1,
    1 => bb2,
    2 => bb3,
    3 => bb7,
    340282366920938463463374607431768182631 => bb29,
    _ => bb28
    }
    }
    bb28 = {
    _7.0.fld0 = true & true;
    Goto(bb11)
    }
    bb29 = {
    _19 = _8.0.fld0;
    _8.0.fld1 = _7.0.fld1;
    _19 = _29 <= Field::<f32>(Variant(_28, 0), 0);
    _24.2 = core::ptr::addr_of_mut!(_9);
    _19 = _22 > _22;
    _15 = _12 << _8.0.fld1;
    _4 = _21;
    _19 = _22;
    _7.0.fld0 = _22;
    _24.0 = _20 + _20;
    _25 = _8.3 as isize;
    _23.3 = [_21,_23.1.0.0,_21];
    _13 = !5_usize;
    _7.0.fld1 = _8.0.fld1;
    _35 = _16;
    _8.2 = Field::<f32>(Variant(_28, 0), 0);
    _24.0 = _20 ^ _20;
    _31 = [_23.1.0.0,_23.1.0.0,_21];
    place!(Field::<f32>(Variant(_28, 0), 0)) = _8.2 - _29;
    Goto(bb30)
    }
    bb30 = {
    _30 = &mut _3;
    _7.3 = !_8.3;
    _24.0 = _20;
    _24.2 = core::ptr::addr_of_mut!(_9);
    _8.0.fld1 = !_7.0.fld1;
    _26 = _23.1.0.1 as f64;
    _24.0 = _20 * _20;
    _23.0.1 = [_23.1.0.2,_23.1.0.2,_23.1.0.2];
    _10.1 = -_8.2;
    _20 = _24.0;
    _41 = _26 + _26;
    _12 = _20 as isize;
    _29 = -Field::<f32>(Variant(_28, 0), 0);
    _10.1 = -_8.2;
    _29 = _8.0.fld1 as f32;
    _23.0.1 = [_23.1.0.2,_23.1.0.2,_23.1.0.2];
    (*_30) = _7.3 as u32;
    _37 = _24.0 as f64;
    (*_30) = RET & RET;
    RET = !(*_30);
    _21 = _4;
    _24.2 = core::ptr::addr_of_mut!(_9);
    _15 = _2 - _2;
    _39 = core::ptr::addr_of_mut!(_8.2);
    Goto(bb31)
    }
    bb31 = {
    _32 = -_41;
    _42 = _15 >> (*_30);
    (*_39) = _10.1;
    (*_30) = RET >> _15;
    _40 = _4;
    _8.2 = (*_30) as f32;
    (*_39) = _2 as f32;
    _28 = Adt19::Variant0 { fld0: (*_39) };
    (*_39) = _10.1;
    _19 = _7.0.fld0 | _8.0.fld0;
    _28 = Adt19::Variant0 { fld0: (*_39) };
    _24.2 = core::ptr::addr_of_mut!(_9);
    RET = (*_30);
    (*_30) = _4 as u32;
    (*_39) = _8.0.fld1 as f32;
    _29 = (*_39) + (*_39);
    place!(Field::<f32>(Variant(_28, 0), 0)) = (*_39) + (*_39);
    (*_39) = Field::<f32>(Variant(_28, 0), 0) - _10.1;
    _32 = _41;
    (*_30) = !RET;
    place!(Field::<f32>(Variant(_28, 0), 0)) = (*_39) * (*_39);
    _23.3 = _31;
    _12 = _15;
    (*_39) = _29 * Field::<f32>(Variant(_28, 0), 0);
    _35 = _16;
    _7.2 = (*_39);
    _23.1.0.1 = 4544230563553849716_i64 * 4659768806239995925_i64;
    _10.1 = (*_39) + _29;
    Goto(bb32)
    }
    bb32 = {
    Call(_43 = dump_var(8_usize, 19_usize, Move(_19), 16_usize, Move(_16), 15_usize, Move(_15), 6_usize, Move(_6)), ReturnTo(bb33), UnwindUnreachable())
    }
    bb33 = {
    Call(_43 = dump_var(8_usize, 20_usize, Move(_20), 40_usize, Move(_40), 31_usize, Move(_31), 4_usize, Move(_4)), ReturnTo(bb34), UnwindUnreachable())
    }
    bb34 = {
    Call(_43 = dump_var(8_usize, 22_usize, Move(_22), 44_usize, _44, 44_usize, _44, 44_usize, _44), ReturnTo(bb35), UnwindUnreachable())
    }
    bb35 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn9() -> isize {
    mir! {
    type RET = isize;
    let _1: [usize; 6];
    let _2: *const u32;
    let _3: (Adt27, [u64; 3]);
    let _4: usize;
    let _5: &'static *mut &'static *mut f32;
    let _6: [u32; 3];
    let _7: *mut (*mut i8, f32);
    let _8: &'static u16;
    let _9: f64;
    let _10: isize;
    let _11: i16;
    let _12: *const isize;
    let _13: isize;
    let _14: [usize; 6];
    let _15: isize;
    let _16: &'static mut &'static mut i128;
    let _17: *mut f32;
    let _18: isize;
    let _19: *const &'static *mut &'static *mut f32;
    let _20: char;
    let _21: char;
    let _22: isize;
    let _23: ((Adt27, [u64; 3]), ((char, i64, u64),), *mut &'static mut i128, [char; 3]);
    let _24: *const isize;
    let _25: u8;
    let _26: f32;
    let _27: u128;
    let _28: f64;
    let _29: f64;
    let _30: char;
    let _31: char;
    let _32: f32;
    let _33: [isize; 7];
    let _34: isize;
    let _35: (u8,);
    let _36: bool;
    let _37: *const [u32; 7];
    let _38: bool;
    let _39: isize;
    let _40: isize;
    let _41: [i16; 1];
    let _42: f64;
    let _43: isize;
    let _44: [u32; 7];
    let _45: u128;
    let _46: isize;
    let _47: isize;
    let _48: (*const Adt19, (u8,), isize);
    let _49: [char; 3];
    let _50: bool;
    let _51: bool;
    let _52: f32;
    let _53: *const Adt19;
    let _54: Adt31;
    let _55: bool;
    let _56: f64;
    let _57: isize;
    let _58: &'static mut [u32; 7];
    let _59: ();
    let _60: ();
    {
    RET = 9223372036854775807_isize;
    RET = 57_isize;
    _1 = [2164819274018740366_usize,2_usize,12200810377728903978_usize,3_usize,4_usize,17214079304716823070_usize];
    RET = (-2533292159835992795_i64) as isize;
    _1 = [13291732336966332709_usize,14510251976914039082_usize,3_usize,2406099212549228713_usize,8450270630884191605_usize,4_usize];
    RET = (-9_isize) ^ (-9223372036854775808_isize);
    _1 = [2_usize,8971275428598323843_usize,15173791264516107918_usize,10657855695464773245_usize,7_usize,12132821182041197454_usize];
    RET = (-9223372036854775808_isize) * (-9223372036854775808_isize);
    _1 = [16692449332149318219_usize,2_usize,5266121163558707184_usize,1920664942948439719_usize,10817336941208839156_usize,17891874290206800009_usize];
    _1 = [6710679178530559017_usize,12721282998182791033_usize,3_usize,6510779845999118807_usize,4_usize,4_usize];
    Goto(bb1)
    }
    bb1 = {
    RET = 9223372036854775807_isize;
    RET = 9223372036854775807_isize * 23_isize;
    _1 = [5_usize,17005871671914160935_usize,14609218465740078508_usize,7988007963307876278_usize,6_usize,7_usize];
    _3.1 = [6829478921229602560_u64,5112198661534960504_u64,17374585027038540972_u64];
    _6 = [1754448336_u32,937239435_u32,3697643359_u32];
    _4 = 7595775738097548624_usize;
    _1 = [_4,_4,_4,_4,_4,_4];
    _4 = 5_usize;
    _1 = [_4,_4,_4,_4,_4,_4];
    _3.1 = [9566083169189983022_u64,15179711736756765251_u64,8264054354001522150_u64];
    _1[_4] = _4 << RET;
    _4 = _1[_4] ^ _1[_4];
    _1 = [_4,_4,_4,_4,_4,_4];
    _1 = [_4,_4,_4,_4,_4,_4];
    RET = (-9223372036854775808_isize) + 9223372036854775807_isize;
    _4 = 6_usize & 6_usize;
    RET = 7874572224355304433_i64 as isize;
    _4 = 88_u8 as usize;
    _3.1 = [10147876663222116406_u64,14316301302578990005_u64,8201611268039158421_u64];
    RET = 9223372036854775807_isize << _4;
    _4 = 2020556097926770334_usize + 1_usize;
    _1 = [_4,_4,_4,_4,_4,_4];
    _4 = 10758556022681022076_usize >> RET;
    Goto(bb2)
    }
    bb2 = {
    _9 = 22552_u16 as f64;
    _6 = [1917013199_u32,3195057696_u32,533703707_u32];
    RET = 9223372036854775807_isize & 74_isize;
    _3.1 = [5338058829442510352_u64,17669963053582407581_u64,17257067204668163285_u64];
    _10 = !RET;
    _11 = 164_i16 >> _4;
    _12 = core::ptr::addr_of!(_10);
    (*_12) = RET;
    (*_12) = RET >> _11;
    (*_12) = 16_i8 as isize;
    RET = _10;
    (*_12) = RET;
    Goto(bb3)
    }
    bb3 = {
    _4 = (-6_i8) as usize;
    (*_12) = RET >> _11;
    _12 = core::ptr::addr_of!((*_12));
    Call((*_12) = core::intrinsics::transmute(_4), ReturnTo(bb4), UnwindUnreachable())
    }
    bb4 = {
    (*_12) = !RET;
    (*_12) = RET + RET;
    (*_12) = -RET;
    (*_12) = RET;
    (*_12) = !RET;
    (*_12) = RET - RET;
    _11 = 10882_i16 + 21381_i16;
    _14 = [_4,_4,_4,_4,_4,_4];
    (*_12) = RET + RET;
    (*_12) = RET ^ RET;
    (*_12) = _9 as isize;
    (*_12) = RET;
    _11 = (-44_i8) as i16;
    (*_12) = RET;
    _14 = _1;
    (*_12) = '\u{d6b9c}' as isize;
    _11 = 32_u8 as i16;
    Call((*_12) = core::intrinsics::bswap(RET), ReturnTo(bb5), UnwindUnreachable())
    }
    bb5 = {
    (*_12) = RET;
    _12 = core::ptr::addr_of!((*_12));
    RET = -(*_12);
    (*_12) = !RET;
    _1 = [_4,_4,_4,_4,_4,_4];
    (*_12) = !RET;
    (*_12) = '\u{d07ee}' as isize;
    _13 = (*_12);
    Goto(bb6)
    }
    bb6 = {
    (*_12) = _13 >> _13;
    _12 = core::ptr::addr_of!((*_12));
    (*_12) = -_13;
    _14 = _1;
    _18 = (*_12);
    _22 = (*_12) - _18;
    (*_12) = !_13;
    (*_12) = RET;
    (*_12) = RET;
    _11 = (-25234_i16) + 23137_i16;
    _12 = core::ptr::addr_of!((*_12));
    Goto(bb7)
    }
    bb7 = {
    _20 = '\u{7ee97}';
    (*_12) = RET;
    (*_12) = _22 >> _4;
    _13 = (*_12);
    _23.3 = [_20,_20,_20];
    (*_12) = _13 + _13;
    (*_12) = _13 ^ _22;
    _21 = _20;
    Goto(bb8)
    }
    bb8 = {
    _12 = core::ptr::addr_of!((*_12));
    _25 = 112_u8 & 109_u8;
    (*_12) = _22 * _13;
    _18 = (*_12) ^ _22;
    _1 = [_4,_4,_4,_4,_4,_4];
    _11 = _20 as i16;
    _9 = 143299820369874157114477477248441114562_u128 as f64;
    _23.1.0.0 = _21;
    _27 = 132083589576225033936760887693571280284_u128 ^ 162336224461904320804000922748962151558_u128;
    _11 = !15338_i16;
    _20 = _21;
    (*_12) = _11 as isize;
    Call((*_12) = core::intrinsics::transmute(_18), ReturnTo(bb9), UnwindUnreachable())
    }
    bb9 = {
    (*_12) = _18;
    (*_12) = _18 << _4;
    (*_12) = 3286920441246046445_u64 as isize;
    _25 = !31_u8;
    _1 = [_4,_4,_4,_4,_4,_4];
    (*_12) = RET;
    _23.0.1 = _3.1;
    (*_12) = _13 | _18;
    (*_12) = _13 ^ _22;
    _15 = (*_12) * (*_12);
    _28 = _9;
    _17 = core::ptr::addr_of_mut!(_26);
    _27 = (-3_i8) as u128;
    _30 = _20;
    Goto(bb10)
    }
    bb10 = {
    (*_17) = _9 as f32;
    _25 = !49_u8;
    _23.1.0.0 = _21;
    Goto(bb11)
    }
    bb11 = {
    (*_17) = (-65576231301251618231422219775830168573_i128) as f32;
    (*_12) = !_15;
    _23.1.0.2 = 3211464814486420134_u64 << (*_12);
    (*_17) = 44194114366002364336429344661021470136_i128 as f32;
    (*_12) = _15 | _18;
    _29 = _9 - _28;
    (*_17) = 21_i8 as f32;
    (*_12) = !_15;
    (*_17) = _10 as f32;
    _23.3 = [_30,_20,_20];
    (*_12) = _15 - _15;
    _25 = _23.1.0.2 as u8;
    _14 = [_4,_4,_4,_4,_4,_4];
    _23.1.0.1 = 1894942608_u32 as i64;
    _23.3 = [_23.1.0.0,_21,_30];
    _23.1.0.0 = _30;
    Goto(bb12)
    }
    bb12 = {
    (*_12) = !_15;
    (*_17) = 43630_u16 as f32;
    (*_17) = 3411663812_u32 as f32;
    _26 = _23.1.0.1 as f32;
    (*_17) = _11 as f32;
    _12 = core::ptr::addr_of!((*_12));
    (*_17) = 39_i8 as f32;
    (*_12) = _15;
    (*_17) = _11 as f32;
    _17 = core::ptr::addr_of_mut!((*_17));
    (*_17) = _11 as f32;
    _22 = (*_12);
    _13 = (*_12) ^ (*_12);
    (*_17) = 113_i8 as f32;
    (*_12) = _18;
    (*_12) = _15;
    Goto(bb13)
    }
    bb13 = {
    (*_12) = _18 ^ _22;
    (*_17) = _25 as f32;
    _36 = false | false;
    (*_17) = 37959_u16 as f32;
    _21 = _30;
    (*_12) = -_15;
    RET = _36 as isize;
    (*_12) = _22;
    _6 = [2669130619_u32,1545373629_u32,2934184581_u32];
    (*_12) = _18 * _15;
    _27 = 280993356288865755449714792863878194138_u128 | 214567933703614305845808508722703198834_u128;
    (*_12) = _36 as isize;
    (*_17) = 2018679048_u32 as f32;
    (*_17) = 454606415_i32 as f32;
    (*_12) = (-1666084940_i32) as isize;
    _14 = [_4,_4,_4,_4,_4,_4];
    _31 = _30;
    (*_12) = _13 >> _13;
    _1 = [_4,_4,_4,_4,_4,_4];
    Goto(bb14)
    }
    bb14 = {
    _43 = (*_12) ^ (*_12);
    _14 = _1;
    _29 = _9 + _9;
    (*_17) = _23.1.0.1 as f32;
    (*_12) = !_43;
    (*_12) = _43 << _43;
    _23.1.0 = (_21, (-7302493249563156934_i64), 2759896961435941907_u64);
    _14 = _1;
    (*_12) = (-55580380519765959748280580607055794181_i128) as isize;
    _37 = core::ptr::addr_of!(_44);
    (*_37) = [1246468817_u32,747179962_u32,2560965039_u32,2508650807_u32,631193241_u32,525936287_u32,834132676_u32];
    _48.1 = (_25,);
    (*_12) = -_43;
    (*_37) = [75053068_u32,2378812756_u32,2610819748_u32,3775190035_u32,349609682_u32,920954041_u32,1900671941_u32];
    (*_12) = (*_17) as isize;
    (*_12) = _11 as isize;
    (*_37) = [701611286_u32,296328765_u32,3324163378_u32,1548199830_u32,1607527947_u32,1358627666_u32,1318439188_u32];
    _35 = (_48.1.0,);
    (*_37) = [384024039_u32,1818030448_u32,2047701616_u32,1137423659_u32,2732610785_u32,1993552656_u32,3332140604_u32];
    _48.2 = !(*_12);
    (*_17) = _29 as f32;
    _23.1.0.2 = !8225517808438344240_u64;
    _44 = [3653189882_u32,2186666055_u32,2845450388_u32,3151933372_u32,3084568059_u32,37774203_u32,3334134044_u32];
    _28 = _29;
    _20 = _31;
    (*_12) = 27_i8 as isize;
    Goto(bb15)
    }
    bb15 = {
    (*_12) = _43 >> _43;
    _39 = _27 as isize;
    _46 = _4 as isize;
    _38 = (*_12) < (*_12);
    (*_12) = _43 | _13;
    (*_17) = 63_i8 as f32;
    (*_12) = _39 | _43;
    _52 = (*_17) - _26;
    (*_37) = [2925568652_u32,3308352699_u32,3108612953_u32,2979834935_u32,1295128627_u32,3442895340_u32,290200624_u32];
    _12 = core::ptr::addr_of!((*_12));
    (*_37) = [618427646_u32,2766691129_u32,1976798449_u32,2720103139_u32,928317505_u32,1858092505_u32,2895320926_u32];
    (*_37) = [463443820_u32,1876730669_u32,1916573555_u32,500819254_u32,1653199027_u32,724057722_u32,3675296899_u32];
    _48.1.0 = _25 - _25;
    _47 = (*_12) - (*_12);
    _35 = (_48.1.0,);
    _15 = (*_12) * (*_12);
    (*_37) = [1750994706_u32,1982774141_u32,50717984_u32,14058349_u32,4231827481_u32,3520493894_u32,3717678728_u32];
    _30 = _23.1.0.0;
    _50 = (*_12) > _47;
    (*_12) = _43;
    _44 = [4250173157_u32,25440625_u32,4205299392_u32,3196326612_u32,1603038010_u32,243894260_u32,1957150415_u32];
    Goto(bb16)
    }
    bb16 = {
    (*_17) = _23.1.0.1 as f32;
    _1 = [_4,_4,_4,_4,_4,_4];
    RET = (*_12) >> (*_12);
    _41 = [_11];
    _39 = RET + _10;
    _12 = core::ptr::addr_of!(RET);
    Goto(bb17)
    }
    bb17 = {
    Call(_59 = dump_var(9_usize, 1_usize, Move(_1), 30_usize, Move(_30), 21_usize, Move(_21), 35_usize, Move(_35)), ReturnTo(bb18), UnwindUnreachable())
    }
    bb18 = {
    Call(_59 = dump_var(9_usize, 41_usize, Move(_41), 43_usize, Move(_43), 13_usize, Move(_13), 11_usize, Move(_11)), ReturnTo(bb19), UnwindUnreachable())
    }
    bb19 = {
    Call(_59 = dump_var(9_usize, 47_usize, Move(_47), 22_usize, Move(_22), 15_usize, Move(_15), 50_usize, Move(_50)), ReturnTo(bb20), UnwindUnreachable())
    }
    bb20 = {
    Call(_59 = dump_var(9_usize, 18_usize, Move(_18), 60_usize, _60, 60_usize, _60, 60_usize, _60), ReturnTo(bb21), UnwindUnreachable())
    }
    bb21 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn10(mut _1: *const isize, mut _2: isize, mut _3: isize, mut _4: bool, mut _5: f32) -> isize {
    mir! {
    type RET = isize;
    let _6: bool;
    let _7: f64;
    let _8: [i16; 1];
    let _9: [i128; 3];
    let _10: u32;
    let _11: usize;
    let _12: i16;
    let _13: isize;
    let _14: f64;
    let _15: (i64, (u8,), (u16, char, u16, char), Adt38);
    let _16: f32;
    let _17: &'static mut &'static mut i128;
    let _18: ();
    let _19: ();
    {
    _5 = 1753032966_i32 as f32;
    _1 = core::ptr::addr_of!(_3);
    (*_1) = _2 << _2;
    _5 = 50240_u16 as f32;
    (*_1) = _2 | _2;
    (*_1) = _2 ^ _2;
    Goto(bb1)
    }
    bb1 = {
    _4 = true | false;
    (*_1) = -_2;
    (*_1) = _2 * _2;
    (*_1) = !_2;
    _6 = _4 ^ _4;
    _1 = core::ptr::addr_of!((*_1));
    _7 = (-59_i8) as f64;
    _3 = _2 << _2;
    (*_1) = !_2;
    (*_1) = 216238834590149332425290348622432905241_u128 as isize;
    _5 = (-106_i8) as f32;
    (*_1) = 7_usize as isize;
    (*_1) = !_2;
    (*_1) = _2;
    (*_1) = _2 & _2;
    _7 = 44_u8 as f64;
    _1 = core::ptr::addr_of!((*_1));
    Goto(bb2)
    }
    bb2 = {
    RET = (-28631_i16) as isize;
    _9 = [(-5774346262614969435776739268269597259_i128),(-6523616741634135694020235619014944786_i128),(-97646180147653395998715299271349672825_i128)];
    (*_1) = _2 | RET;
    _5 = 87500809821932443108661117424052725076_i128 as f32;
    (*_1) = _5 as isize;
    (*_1) = !_2;
    Goto(bb3)
    }
    bb3 = {
    (*_1) = RET - _2;
    (*_1) = _2 << _2;
    (*_1) = _2 >> _2;
    _5 = 169907871509825828293094495054897037094_u128 as f32;
    (*_1) = !_2;
    (*_1) = (-57_i8) as isize;
    Call((*_1) = fn11(Move(_1), _2, _9, _6), ReturnTo(bb4), UnwindUnreachable())
    }
    bb4 = {
    _1 = core::ptr::addr_of!(_2);
    (*_1) = _3 * _3;
    (*_1) = _3;
    (*_1) = 251979021_u32 as isize;
    _1 = core::ptr::addr_of!((*_1));
    _11 = 5_usize;
    (*_1) = _3 << _3;
    _9 = [(-167382419997506690452821692279422615514_i128),(-27249136142769830671457152765626346837_i128),11289351572422613813058085475373092821_i128];
    (*_1) = 2508096603_u32 as isize;
    (*_1) = _3;
    (*_1) = _3;
    (*_1) = -_3;
    _9 = [(-58327104998671363817481359897985959742_i128),33813762835906131027827675122854544074_i128,(-144647364458286761739171718479565870961_i128)];
    (*_1) = -RET;
    (*_1) = _3 & _3;
    (*_1) = _3;
    _8 = [32474_i16];
    _7 = (*_1) as f64;
    (*_1) = -_3;
    _2 = 1841161711521651058_u64 as isize;
    (*_1) = _3;
    (*_1) = _3;
    _5 = _3 as f32;
    _10 = 2991699664_u32 + 1488489844_u32;
    _5 = 179191180378711871815223305875423987683_u128 as f32;
    _10 = !2871452218_u32;
    (*_1) = 88664338048460218_i64 as isize;
    (*_1) = _3 << _3;
    match _11 {
    0 => bb2,
    1 => bb5,
    5 => bb7,
    _ => bb6
    }
    }
    bb5 = {
    (*_1) = RET - _2;
    (*_1) = _2 << _2;
    (*_1) = _2 >> _2;
    _5 = 169907871509825828293094495054897037094_u128 as f32;
    (*_1) = !_2;
    (*_1) = (-57_i8) as isize;
    Call((*_1) = fn11(Move(_1), _2, _9, _6), ReturnTo(bb4), UnwindUnreachable())
    }
    bb6 = {
    _4 = true | false;
    (*_1) = -_2;
    (*_1) = _2 * _2;
    (*_1) = !_2;
    _6 = _4 ^ _4;
    _1 = core::ptr::addr_of!((*_1));
    _7 = (-59_i8) as f64;
    _3 = _2 << _2;
    (*_1) = !_2;
    (*_1) = 216238834590149332425290348622432905241_u128 as isize;
    _5 = (-106_i8) as f32;
    (*_1) = 7_usize as isize;
    (*_1) = !_2;
    (*_1) = _2;
    (*_1) = _2 & _2;
    _7 = 44_u8 as f64;
    _1 = core::ptr::addr_of!((*_1));
    Goto(bb2)
    }
    bb7 = {
    (*_1) = -_3;
    match _11 {
    0 => bb8,
    1 => bb9,
    2 => bb10,
    3 => bb11,
    4 => bb12,
    5 => bb15,
    _ => bb14
    }
    }
    bb8 = {
    _4 = true | false;
    (*_1) = -_2;
    (*_1) = _2 * _2;
    (*_1) = !_2;
    _6 = _4 ^ _4;
    _1 = core::ptr::addr_of!((*_1));
    _7 = (-59_i8) as f64;
    _3 = _2 << _2;
    (*_1) = !_2;
    (*_1) = 216238834590149332425290348622432905241_u128 as isize;
    _5 = (-106_i8) as f32;
    (*_1) = 7_usize as isize;
    (*_1) = !_2;
    (*_1) = _2;
    (*_1) = _2 & _2;
    _7 = 44_u8 as f64;
    _1 = core::ptr::addr_of!((*_1));
    Goto(bb2)
    }
    bb9 = {
    (*_1) = RET - _2;
    (*_1) = _2 << _2;
    (*_1) = _2 >> _2;
    _5 = 169907871509825828293094495054897037094_u128 as f32;
    (*_1) = !_2;
    (*_1) = (-57_i8) as isize;
    Call((*_1) = fn11(Move(_1), _2, _9, _6), ReturnTo(bb4), UnwindUnreachable())
    }
    bb10 = {
    _1 = core::ptr::addr_of!(_2);
    (*_1) = _3 * _3;
    (*_1) = _3;
    (*_1) = 251979021_u32 as isize;
    _1 = core::ptr::addr_of!((*_1));
    _11 = 5_usize;
    (*_1) = _3 << _3;
    _9 = [(-167382419997506690452821692279422615514_i128),(-27249136142769830671457152765626346837_i128),11289351572422613813058085475373092821_i128];
    (*_1) = 2508096603_u32 as isize;
    (*_1) = _3;
    (*_1) = _3;
    (*_1) = -_3;
    _9 = [(-58327104998671363817481359897985959742_i128),33813762835906131027827675122854544074_i128,(-144647364458286761739171718479565870961_i128)];
    (*_1) = -RET;
    (*_1) = _3 & _3;
    (*_1) = _3;
    _8 = [32474_i16];
    _7 = (*_1) as f64;
    (*_1) = -_3;
    _2 = 1841161711521651058_u64 as isize;
    (*_1) = _3;
    (*_1) = _3;
    _5 = _3 as f32;
    _10 = 2991699664_u32 + 1488489844_u32;
    _5 = 179191180378711871815223305875423987683_u128 as f32;
    _10 = !2871452218_u32;
    (*_1) = 88664338048460218_i64 as isize;
    (*_1) = _3 << _3;
    match _11 {
    0 => bb2,
    1 => bb5,
    5 => bb7,
    _ => bb6
    }
    }
    bb11 = {
    (*_1) = RET - _2;
    (*_1) = _2 << _2;
    (*_1) = _2 >> _2;
    _5 = 169907871509825828293094495054897037094_u128 as f32;
    (*_1) = !_2;
    (*_1) = (-57_i8) as isize;
    Call((*_1) = fn11(Move(_1), _2, _9, _6), ReturnTo(bb4), UnwindUnreachable())
    }
    bb12 = {
    RET = (-28631_i16) as isize;
    _9 = [(-5774346262614969435776739268269597259_i128),(-6523616741634135694020235619014944786_i128),(-97646180147653395998715299271349672825_i128)];
    (*_1) = _2 | RET;
    _5 = 87500809821932443108661117424052725076_i128 as f32;
    (*_1) = _5 as isize;
    (*_1) = !_2;
    Goto(bb3)
    }
    bb13 = {
    _4 = true | false;
    (*_1) = -_2;
    (*_1) = _2 * _2;
    (*_1) = !_2;
    _6 = _4 ^ _4;
    _1 = core::ptr::addr_of!((*_1));
    _7 = (-59_i8) as f64;
    _3 = _2 << _2;
    (*_1) = !_2;
    (*_1) = 216238834590149332425290348622432905241_u128 as isize;
    _5 = (-106_i8) as f32;
    (*_1) = 7_usize as isize;
    (*_1) = !_2;
    (*_1) = _2;
    (*_1) = _2 & _2;
    _7 = 44_u8 as f64;
    _1 = core::ptr::addr_of!((*_1));
    Goto(bb2)
    }
    bb14 = {
    Return()
    }
    bb15 = {
    (*_1) = _3 & _3;
    _13 = 27602_i16 as isize;
    RET = (*_1);
    _15.2.3 = '\u{9600b}';
    (*_1) = RET;
    _8 = [15797_i16];
    (*_1) = RET | RET;
    _2 = RET >> RET;
    (*_1) = _5 as isize;
    Goto(bb16)
    }
    bb16 = {
    Call(_18 = dump_var(10_usize, 8_usize, Move(_8), 13_usize, Move(_13), 2_usize, Move(_2), 9_usize, Move(_9)), ReturnTo(bb17), UnwindUnreachable())
    }
    bb17 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn11(mut _1: *const isize, mut _2: isize, mut _3: [i128; 3], mut _4: bool) -> isize {
    mir! {
    type RET = isize;
    let _5: i16;
    let _6: &'static *mut &'static *mut f32;
    let _7: f64;
    let _8: &'static *mut f32;
    let _9: char;
    let _10: *const usize;
    let _11: ();
    let _12: ();
    {
    _3 = [(-149428173671952445796963112826246430959_i128),(-120259778770905121406345179519214725448_i128),73618557919379010003068009301390381744_i128];
    RET = _2;
    _2 = -RET;
    _4 = RET == _2;
    _5 = (-8193_i16) ^ 192_i16;
    RET = 4_usize as isize;
    RET = -_2;
    _4 = !true;
    RET = _2;
    RET = _2 ^ _2;
    _7 = 10150853142289432495_u64 as f64;
    _7 = RET as f64;
    _5 = 314_i16 - 11222_i16;
    _9 = '\u{3d951}';
    RET = _2 ^ _2;
    _5 = _4 as i16;
    _4 = _7 != _7;
    _1 = core::ptr::addr_of!(RET);
    RET = 2732418830_u32 as isize;
    _9 = '\u{ee5c7}';
    _5 = (-2315817108406154114_i64) as i16;
    (*_1) = _2 | _2;
    _2 = (*_1) ^ (*_1);
    Goto(bb1)
    }
    bb1 = {
    Call(_11 = dump_var(11_usize, 4_usize, Move(_4), 2_usize, Move(_2), 12_usize, _12, 12_usize, _12), ReturnTo(bb2), UnwindUnreachable())
    }
    bb2 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn12(
    mut _1: isize,
    mut _2: u16,
    mut _3: bool,
    mut _4: char,
    mut _5: isize,
    mut _6: char,
    mut _7: u32,
    mut _8: bool,
    mut _9: usize,
    mut _10: i16,
    mut _11: isize,
) -> u64 {
    mir! {
    type RET = u64;
    let _12: u8;
    let _13: bool;
    let _14: u32;
    let _15: f64;
    let _16: Adt27;
    let _17: &'static &'static i32;
    let _18: [u16; 2];
    let _19: i16;
    let _20: (Adt27, [u64; 3]);
    let _21: Adt19;
    let _22: (f32, Adt19, u64);
    let _23: [u64; 3];
    let _24: isize;
    let _25: &'static u16;
    let _26: i128;
    let _27: &'static mut *const usize;
    let _28: Adt69;
    let _29: char;
    let _30: char;
    let _31: [i8; 3];
    let _32: usize;
    let _33: &'static mut *const usize;
    let _34: [u32; 7];
    let _35: &'static *const u32;
    let _36: i8;
    let _37: (u32, *mut i8, &'static mut &'static mut &'static mut i128, &'static *mut f32);
    let _38: u8;
    let _39: isize;
    let _40: (*mut i8, f32);
    let _41: (u16, char, u16, char);
    let _42: u32;
    let _43: u128;
    let _44: [u32; 7];
    let _45: Adt19;
    let _46: Adt19;
    let _47: (u16, char, u16, char);
    let _48: &'static *mut &'static *mut f32;
    let _49: (*mut i8, f32);
    let _50: Adt73;
    let _51: [usize; 6];
    let _52: i32;
    let _53: i8;
    let _54: *const u32;
    let _55: [u64; 3];
    let _56: u128;
    let _57: u16;
    let _58: *const usize;
    let _59: (u8,);
    let _60: usize;
    let _61: u32;
    let _62: *mut *mut u128;
    let _63: [u16; 7];
    let _64: &'static *const u32;
    let _65: usize;
    let _66: *const (u16, char, u16, char);
    let _67: *const (u16, char, u16, char);
    let _68: i16;
    let _69: [u32; 4];
    let _70: *const Adt19;
    let _71: *mut &'static u16;
    let _72: [char; 3];
    let _73: f64;
    let _74: isize;
    let _75: &'static &'static i32;
    let _76: *const [u32; 7];
    let _77: u128;
    let _78: i64;
    let _79: ();
    let _80: ();
    {
    RET = _8 as u64;
    _9 = 6805564314989995980_usize >> _11;
    _9 = 1_usize << _2;
    _1 = _11 << _11;
    _6 = _4;
    _2 = 56563_u16 - 21379_u16;
    _7 = RET as u32;
    _12 = 197_u8 >> _1;
    _2 = 34475_u16 * 51501_u16;
    _9 = 654392172336724131_usize * 3_usize;
    _4 = _6;
    _7 = !988900477_u32;
    _11 = _2 as isize;
    RET = 3933738994697817071491896658374962955_u128 as u64;
    _2 = !5860_u16;
    _13 = _12 != _12;
    RET = 6658243847972192516_u64 ^ 14551468365626577640_u64;
    _5 = _9 as isize;
    RET = 13385896452291188854_u64;
    match RET {
    0 => bb1,
    1 => bb2,
    2 => bb3,
    3 => bb4,
    4 => bb5,
    5 => bb6,
    6 => bb7,
    13385896452291188854 => bb9,
    _ => bb8
    }
    }
    bb1 = {
    Return()
    }
    bb2 = {
    Return()
    }
    bb3 = {
    Return()
    }
    bb4 = {
    Return()
    }
    bb5 = {
    Return()
    }
    bb6 = {
    Return()
    }
    bb7 = {
    Return()
    }
    bb8 = {
    Return()
    }
    bb9 = {
    _13 = _8 ^ _3;
    _15 = (-166437740829506410215974073476983898098_i128) as f64;
    _4 = _6;
    _7 = 1842687020_u32 | 2996781349_u32;
    _14 = _7 ^ _7;
    _14 = !_7;
    _6 = _4;
    _10 = 12034_i16 * (-16551_i16);
    _4 = _6;
    _11 = _1 & _1;
    _1 = _11;
    _4 = _6;
    _18 = [_2,_2];
    _7 = _14 + _14;
    _9 = 6_usize;
    Goto(bb10)
    }
    bb10 = {
    _15 = 1959238736_i32 as f64;
    _10 = 28406_i16;
    RET = 13176541438856126834_u64 | 18270445478897081899_u64;
    _4 = _6;
    _11 = RET as isize;
    _8 = _1 <= _1;
    _5 = _1 * _1;
    _10 = _1 as i16;
    _3 = !_8;
    _14 = _7 - _7;
    _9 = 2_usize * 756589262005122959_usize;
    _7 = (-661276084_i32) as u32;
    _13 = !_8;
    _9 = 17691531383541845559_usize & 4_usize;
    _13 = _8;
    _15 = _9 as f64;
    _19 = _10 + _10;
    _20.1 = [RET,RET,RET];
    _6 = _4;
    _11 = _1 >> _10;
    _22.1 = Adt19::Variant1 { fld0: (-4147562784601752906_i64),fld1: _2 };
    _23 = [RET,RET,RET];
    _23 = _20.1;
    _22.2 = !RET;
    _15 = RET as f64;
    Goto(bb11)
    }
    bb11 = {
    _5 = -_1;
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = 3749962265621048961_i64;
    _19 = -_10;
    _11 = _1;
    _22.1 = Adt19::Variant1 { fld0: 6205286234494641188_i64,fld1: _2 };
    _11 = _5 ^ _1;
    _25 = &place!(Field::<u16>(Variant(_22.1, 1), 1));
    _3 = !_13;
    _11 = _1 & _1;
    _22.1 = Adt19::Variant1 { fld0: (-6960908255403321694_i64),fld1: _2 };
    _15 = _9 as f64;
    _23 = [_22.2,RET,RET];
    _12 = 153_u8;
    _2 = Field::<u16>(Variant(_22.1, 1), 1) & Field::<u16>(Variant(_22.1, 1), 1);
    _8 = _13 != _13;
    _13 = _8;
    match _12 {
    0 => bb12,
    1 => bb13,
    153 => bb15,
    _ => bb14
    }
    }
    bb12 = {
    _15 = 1959238736_i32 as f64;
    _10 = 28406_i16;
    RET = 13176541438856126834_u64 | 18270445478897081899_u64;
    _4 = _6;
    _11 = RET as isize;
    _8 = _1 <= _1;
    _5 = _1 * _1;
    _10 = _1 as i16;
    _3 = !_8;
    _14 = _7 - _7;
    _9 = 2_usize * 756589262005122959_usize;
    _7 = (-661276084_i32) as u32;
    _13 = !_8;
    _9 = 17691531383541845559_usize & 4_usize;
    _13 = _8;
    _15 = _9 as f64;
    _19 = _10 + _10;
    _20.1 = [RET,RET,RET];
    _6 = _4;
    _11 = _1 >> _10;
    _22.1 = Adt19::Variant1 { fld0: (-4147562784601752906_i64),fld1: _2 };
    _23 = [RET,RET,RET];
    _23 = _20.1;
    _22.2 = !RET;
    _15 = RET as f64;
    Goto(bb11)
    }
    bb13 = {
    Return()
    }
    bb14 = {
    Return()
    }
    bb15 = {
    _18 = [Field::<u16>(Variant(_22.1, 1), 1),Field::<u16>(Variant(_22.1, 1), 1)];
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = -1749396416173177264_i64;
    _26 = -2305844251469959739040640194759618288_i128;
    _18 = [_2,_2];
    _18 = [_2,Field::<u16>(Variant(_22.1, 1), 1)];
    _5 = _1 - _1;
    _9 = _15 as usize;
    _3 = _8 ^ _8;
    Call(_8 = fn13(_14, _12, _14, Field::<i64>(Variant(_22.1, 1), 0), _13, _6, _15, _4), ReturnTo(bb16), UnwindUnreachable())
    }
    bb16 = {
    _18 = [_2,Field::<u16>(Variant(_22.1, 1), 1)];
    _9 = _19 as usize;
    _1 = _5 >> _5;
    _11 = 1424727112_i32 as isize;
    _6 = _4;
    place!(Field::<u16>(Variant(_22.1, 1), 1)) = _2 ^ _2;
    place!(Field::<u16>(Variant(_22.1, 1), 1)) = _2;
    _10 = _19 & _19;
    _22.0 = Field::<i64>(Variant(_22.1, 1), 0) as f32;
    _14 = !_7;
    _21 = Adt19::Variant0 { fld0: _22.0 };
    _22.0 = Field::<u16>(Variant(_22.1, 1), 1) as f32;
    _28.fld0 = [_6,_4,_4];
    _31 = [(-90_i8),46_i8,0_i8];
    _13 = _3;
    match _12 {
    0 => bb8,
    1 => bb10,
    2 => bb17,
    3 => bb18,
    4 => bb19,
    5 => bb20,
    153 => bb22,
    _ => bb21
    }
    }
    bb17 = {
    _18 = [Field::<u16>(Variant(_22.1, 1), 1),Field::<u16>(Variant(_22.1, 1), 1)];
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = -1749396416173177264_i64;
    _26 = -2305844251469959739040640194759618288_i128;
    _18 = [_2,_2];
    _18 = [_2,Field::<u16>(Variant(_22.1, 1), 1)];
    _5 = _1 - _1;
    _9 = _15 as usize;
    _3 = _8 ^ _8;
    Call(_8 = fn13(_14, _12, _14, Field::<i64>(Variant(_22.1, 1), 0), _13, _6, _15, _4), ReturnTo(bb16), UnwindUnreachable())
    }
    bb18 = {
    Return()
    }
    bb19 = {
    Return()
    }
    bb20 = {
    Return()
    }
    bb21 = {
    Return()
    }
    bb22 = {
    _24 = 151127965465090159187327438096496796196_u128 as isize;
    _30 = _4;
    _8 = _3;
    _11 = _5 & _1;
    _12 = _14 as u8;
    _5 = _11 | _11;
    _12 = RET as u8;
    _1 = _5;
    _15 = (-106_i8) as f64;
    _20.1 = [RET,_22.2,RET];
    _22 = (Field::<f32>(Variant(_21, 0), 0), Move(_21), RET);
    _21 = Adt19::Variant1 { fld0: 6815749787802067082_i64,fld1: _2 };
    _11 = _12 as isize;
    _13 = _8 | _3;
    _22.2 = RET;
    _6 = _4;
    _32 = _9 - _9;
    _22.1 = Adt19::Variant0 { fld0: _22.0 };
    _26 = 118517572587670321654645272226806755338_i128;
    _25 = &place!(Field::<u16>(Variant(_21, 1), 1));
    _12 = 214_u8 & 253_u8;
    _25 = &_2;
    _22.2 = RET * RET;
    _21 = Move(_22.1);
    _24 = _1 + _11;
    place!(Field::<f32>(Variant(_21, 0), 0)) = _22.0 + _22.0;
    match _26 {
    0 => bb7,
    1 => bb2,
    2 => bb6,
    3 => bb19,
    4 => bb23,
    5 => bb24,
    118517572587670321654645272226806755338 => bb26,
    _ => bb25
    }
    }
    bb23 = {
    _5 = -_1;
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = 3749962265621048961_i64;
    _19 = -_10;
    _11 = _1;
    _22.1 = Adt19::Variant1 { fld0: 6205286234494641188_i64,fld1: _2 };
    _11 = _5 ^ _1;
    _25 = &place!(Field::<u16>(Variant(_22.1, 1), 1));
    _3 = !_13;
    _11 = _1 & _1;
    _22.1 = Adt19::Variant1 { fld0: (-6960908255403321694_i64),fld1: _2 };
    _15 = _9 as f64;
    _23 = [_22.2,RET,RET];
    _12 = 153_u8;
    _2 = Field::<u16>(Variant(_22.1, 1), 1) & Field::<u16>(Variant(_22.1, 1), 1);
    _8 = _13 != _13;
    _13 = _8;
    match _12 {
    0 => bb12,
    1 => bb13,
    153 => bb15,
    _ => bb14
    }
    }
    bb24 = {
    Return()
    }
    bb25 = {
    Return()
    }
    bb26 = {
    _3 = !_8;
    _21 = Adt19::Variant0 { fld0: _22.0 };
    _22 = (Field::<f32>(Variant(_21, 0), 0), Move(_21), RET);
    _20.1 = _23;
    _20.1 = [RET,RET,_22.2];
    _30 = _6;
    _30 = _4;
    _34 = [_7,_7,_14,_14,_14,_7,_7];
    _11 = _22.0 as isize;
    _21 = Adt19::Variant0 { fld0: Field::<f32>(Variant(_22.1, 0), 0) };
    _19 = _10 ^ _10;
    _30 = _6;
    place!(Field::<f32>(Variant(_22.1, 0), 0)) = Field::<f32>(Variant(_21, 0), 0) - _22.0;
    _36 = 80_i8;
    _28.fld0 = [_4,_6,_4];
    _32 = _9;
    _38 = _7 as u8;
    _22 = (Field::<f32>(Variant(_21, 0), 0), Move(_21), RET);
    _39 = !_24;
    _2 = 51341_u16 + 7537_u16;
    _9 = _32 + _32;
    _12 = _38;
    match _36 {
    0 => bb3,
    1 => bb27,
    2 => bb28,
    3 => bb29,
    4 => bb30,
    5 => bb31,
    80 => bb33,
    _ => bb32
    }
    }
    bb27 = {
    Return()
    }
    bb28 = {
    _15 = 1959238736_i32 as f64;
    _10 = 28406_i16;
    RET = 13176541438856126834_u64 | 18270445478897081899_u64;
    _4 = _6;
    _11 = RET as isize;
    _8 = _1 <= _1;
    _5 = _1 * _1;
    _10 = _1 as i16;
    _3 = !_8;
    _14 = _7 - _7;
    _9 = 2_usize * 756589262005122959_usize;
    _7 = (-661276084_i32) as u32;
    _13 = !_8;
    _9 = 17691531383541845559_usize & 4_usize;
    _13 = _8;
    _15 = _9 as f64;
    _19 = _10 + _10;
    _20.1 = [RET,RET,RET];
    _6 = _4;
    _11 = _1 >> _10;
    _22.1 = Adt19::Variant1 { fld0: (-4147562784601752906_i64),fld1: _2 };
    _23 = [RET,RET,RET];
    _23 = _20.1;
    _22.2 = !RET;
    _15 = RET as f64;
    Goto(bb11)
    }
    bb29 = {
    _5 = -_1;
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = 3749962265621048961_i64;
    _19 = -_10;
    _11 = _1;
    _22.1 = Adt19::Variant1 { fld0: 6205286234494641188_i64,fld1: _2 };
    _11 = _5 ^ _1;
    _25 = &place!(Field::<u16>(Variant(_22.1, 1), 1));
    _3 = !_13;
    _11 = _1 & _1;
    _22.1 = Adt19::Variant1 { fld0: (-6960908255403321694_i64),fld1: _2 };
    _15 = _9 as f64;
    _23 = [_22.2,RET,RET];
    _12 = 153_u8;
    _2 = Field::<u16>(Variant(_22.1, 1), 1) & Field::<u16>(Variant(_22.1, 1), 1);
    _8 = _13 != _13;
    _13 = _8;
    match _12 {
    0 => bb12,
    1 => bb13,
    153 => bb15,
    _ => bb14
    }
    }
    bb30 = {
    Return()
    }
    bb31 = {
    _18 = [Field::<u16>(Variant(_22.1, 1), 1),Field::<u16>(Variant(_22.1, 1), 1)];
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = -1749396416173177264_i64;
    _26 = -2305844251469959739040640194759618288_i128;
    _18 = [_2,_2];
    _18 = [_2,Field::<u16>(Variant(_22.1, 1), 1)];
    _5 = _1 - _1;
    _9 = _15 as usize;
    _3 = _8 ^ _8;
    Call(_8 = fn13(_14, _12, _14, Field::<i64>(Variant(_22.1, 1), 0), _13, _6, _15, _4), ReturnTo(bb16), UnwindUnreachable())
    }
    bb32 = {
    Return()
    }
    bb33 = {
    _18 = [_2,_2];
    _1 = (-2028201128_i32) as isize;
    _41.0 = !_2;
    _21 = Adt19::Variant0 { fld0: _22.0 };
    _40.0 = core::ptr::addr_of_mut!(_36);
    _40.1 = Field::<f32>(Variant(_22.1, 0), 0) * Field::<f32>(Variant(_21, 0), 0);
    _30 = _4;
    _39 = _5 << _24;
    _30 = _4;
    place!(Field::<f32>(Variant(_21, 0), 0)) = Field::<f32>(Variant(_22.1, 0), 0) - Field::<f32>(Variant(_22.1, 0), 0);
    _42 = _14;
    _22.1 = Move(_21);
    place!(Field::<f32>(Variant(_22.1, 0), 0)) = _40.1 + _40.1;
    _2 = _41.0;
    _41 = (_2, _4, _2, _6);
    _5 = _24;
    _41.2 = Field::<f32>(Variant(_22.1, 0), 0) as u16;
    match _36 {
    80 => bb35,
    _ => bb34
    }
    }
    bb34 = {
    _5 = -_1;
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = 3749962265621048961_i64;
    _19 = -_10;
    _11 = _1;
    _22.1 = Adt19::Variant1 { fld0: 6205286234494641188_i64,fld1: _2 };
    _11 = _5 ^ _1;
    _25 = &place!(Field::<u16>(Variant(_22.1, 1), 1));
    _3 = !_13;
    _11 = _1 & _1;
    _22.1 = Adt19::Variant1 { fld0: (-6960908255403321694_i64),fld1: _2 };
    _15 = _9 as f64;
    _23 = [_22.2,RET,RET];
    _12 = 153_u8;
    _2 = Field::<u16>(Variant(_22.1, 1), 1) & Field::<u16>(Variant(_22.1, 1), 1);
    _8 = _13 != _13;
    _13 = _8;
    match _12 {
    0 => bb12,
    1 => bb13,
    153 => bb15,
    _ => bb14
    }
    }
    bb35 = {
    place!(Field::<f32>(Variant(_22.1, 0), 0)) = _22.0;
    _19 = _24 as i16;
    _5 = _39 - _39;
    _22.1 = Adt19::Variant0 { fld0: _40.1 };
    _10 = _19 | _19;
    _19 = _10 >> _24;
    _18 = [_2,_41.2];
    _5 = _24 | _39;
    _21 = Adt19::Variant0 { fld0: _22.0 };
    _37.1 = core::ptr::addr_of_mut!(_36);
    _18 = [_2,_41.2];
    _12 = _38 >> _32;
    _13 = _8 & _8;
    _4 = _30;
    _36 = (-46_i8) & (-104_i8);
    Call(_22 = fn14(Move(_37.1), _40.1, Move(_40)), ReturnTo(bb36), UnwindUnreachable())
    }
    bb36 = {
    _7 = _24 as u32;
    _41.1 = _4;
    _40.0 = core::ptr::addr_of_mut!(_36);
    _21 = Move(_22.1);
    _30 = _4;
    _4 = _30;
    _41 = (Field::<u16>(Variant(_21, 1), 1), _4, _2, _30);
    _37.1 = core::ptr::addr_of_mut!(_36);
    Goto(bb37)
    }
    bb37 = {
    _10 = !_19;
    _41.0 = _41.2;
    _2 = !_41.2;
    _46 = Adt19::Variant0 { fld0: _22.0 };
    _46 = Adt19::Variant0 { fld0: _22.0 };
    _12 = _38 | _38;
    _20.1 = [RET,RET,RET];
    _41.2 = (-1699735292_i32) as u16;
    _25 = &place!(Field::<u16>(Variant(_21, 1), 1));
    _37.1 = core::ptr::addr_of_mut!(_36);
    _47.0 = _32 as u16;
    _37.0 = _22.2 as u32;
    place!(Field::<u16>(Variant(_21, 1), 1)) = !_47.0;
    place!(Field::<i64>(Variant(_21, 1), 0)) = 3761704393393425053_i64;
    _46 = Move(_21);
    _50.fld1 = _32 * _9;
    Goto(bb38)
    }
    bb38 = {
    _21 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_46, 1), 0),fld1: _47.0 };
    Goto(bb39)
    }
    bb39 = {
    _5 = -_39;
    _45 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_46, 1), 0),fld1: Field::<u16>(Variant(_46, 1), 1) };
    _13 = !_8;
    _51 = [_50.fld1,_50.fld1,_9,_50.fld1,_32,_32];
    _25 = &place!(Field::<u16>(Variant(_21, 1), 1));
    _47.2 = !(*_25);
    _50.fld3 = core::ptr::addr_of!(_7);
    _32 = _50.fld1;
    _49.0 = core::ptr::addr_of_mut!(_53);
    _50.fld0 = Field::<i64>(Variant(_46, 1), 0);
    _50.fld1 = _32 ^ _9;
    _38 = _12;
    _41.2 = (*_25) & Field::<u16>(Variant(_46, 1), 1);
    _49 = (Move(_40.0), _22.0);
    _44 = _34;
    _22 = (_49.1, Move(_46), RET);
    _15 = _10 as f64;
    _47.1 = _41.1;
    place!(Field::<i64>(Variant(_21, 1), 0)) = Field::<i64>(Variant(_45, 1), 0) & _50.fld0;
    _40.1 = _22.0;
    _40.1 = _39 as f32;
    _41.2 = (*_25) << (*_25);
    _22.2 = _36 as u64;
    _38 = _12 >> (*_25);
    _43 = 209127006994900415996526427918636945054_u128;
    Goto(bb40)
    }
    bb40 = {
    _46 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_45, 1), 0),fld1: (*_25) };
    _29 = _47.1;
    _29 = _6;
    _8 = !_13;
    _31 = [_36,_36,_36];
    _59.0 = _40.1 as u8;
    _51 = [_50.fld1,_32,_50.fld1,_9,_32,_9];
    _59.0 = _38;
    place!(Field::<u16>(Variant(_46, 1), 1)) = (*_25) * (*_25);
    _58 = core::ptr::addr_of!(_50.fld1);
    _52 = 190865903_i32 - (-978765720_i32);
    _59 = (_38,);
    _46 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_45, 1), 0),fld1: (*_25) };
    _47 = ((*_25), _30, (*_25), _29);
    (*_58) = !_32;
    _8 = (*_25) > (*_25);
    _40.1 = _22.0;
    _41.1 = _4;
    _11 = _24;
    _40.0 = core::ptr::addr_of_mut!(_53);
    Goto(bb41)
    }
    bb41 = {
    _44 = [_7,_7,_7,_7,_7,_7,_7];
    _14 = _22.2 as u32;
    _56 = _43 % _43;
    _25 = &_41.2;
    _11 = _52 as isize;
    _60 = _40.1 as usize;
    _60 = _6 as usize;
    _60 = !(*_58);
    _40 = (Move(_37.1), _49.1);
    _25 = &_47.0;
    (*_58) = _7 as usize;
    (*_58) = _9;
    _55 = [_22.2,_22.2,_22.2];
    _50.fld2 = [RET,_22.2,RET,_22.2,_22.2,_22.2];
    _33 = &mut _58;
    place!(Field::<u16>(Variant(_45, 1), 1)) = (*_25) * Field::<u16>(Variant(_46, 1), 1);
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = Field::<i64>(Variant(_45, 1), 0) | Field::<i64>(Variant(_45, 1), 0);
    (*_33) = core::ptr::addr_of!(_50.fld1);
    Goto(bb42)
    }
    bb42 = {
    (*_33) = core::ptr::addr_of!(_32);
    _35 = &_50.fld3;
    _54 = core::ptr::addr_of!(_7);
    _59.0 = _38 & _38;
    _23 = [_22.2,_22.2,_22.2];
    _37.1 = core::ptr::addr_of_mut!(_53);
    _11 = _5;
    (*_54) = _42;
    _4 = _41.3;
    _22.1 = Move(_45);
    _29 = _4;
    (*_54) = _37.0;
    _70 = core::ptr::addr_of!(_22.1);
    _22.0 = _49.1 - _40.1;
    (*_54) = _14 | _14;
    match _43 {
    0 => bb29,
    1 => bb21,
    2 => bb3,
    3 => bb43,
    4 => bb44,
    5 => bb45,
    6 => bb46,
    209127006994900415996526427918636945054 => bb48,
    _ => bb47
    }
    }
    bb43 = {
    _44 = [_7,_7,_7,_7,_7,_7,_7];
    _14 = _22.2 as u32;
    _56 = _43 % _43;
    _25 = &_41.2;
    _11 = _52 as isize;
    _60 = _40.1 as usize;
    _60 = _6 as usize;
    _60 = !(*_58);
    _40 = (Move(_37.1), _49.1);
    _25 = &_47.0;
    (*_58) = _7 as usize;
    (*_58) = _9;
    _55 = [_22.2,_22.2,_22.2];
    _50.fld2 = [RET,_22.2,RET,_22.2,_22.2,_22.2];
    _33 = &mut _58;
    place!(Field::<u16>(Variant(_45, 1), 1)) = (*_25) * Field::<u16>(Variant(_46, 1), 1);
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = Field::<i64>(Variant(_45, 1), 0) | Field::<i64>(Variant(_45, 1), 0);
    (*_33) = core::ptr::addr_of!(_50.fld1);
    Goto(bb42)
    }
    bb44 = {
    _18 = [Field::<u16>(Variant(_22.1, 1), 1),Field::<u16>(Variant(_22.1, 1), 1)];
    place!(Field::<i64>(Variant(_22.1, 1), 0)) = -1749396416173177264_i64;
    _26 = -2305844251469959739040640194759618288_i128;
    _18 = [_2,_2];
    _18 = [_2,Field::<u16>(Variant(_22.1, 1), 1)];
    _5 = _1 - _1;
    _9 = _15 as usize;
    _3 = _8 ^ _8;
    Call(_8 = fn13(_14, _12, _14, Field::<i64>(Variant(_22.1, 1), 0), _13, _6, _15, _4), ReturnTo(bb16), UnwindUnreachable())
    }
    bb45 = {
    _5 = -_39;
    _45 = Adt19::Variant1 { fld0: Field::<i64>(Variant(_46, 1), 0),fld1: Field::<u16>(Variant(_46, 1), 1) };
    _13 = !_8;
    _51 = [_50.fld1,_50.fld1,_9,_50.fld1,_32,_32];
    _25 = &place!(Field::<u16>(Variant(_21, 1), 1));
    _47.2 = !(*_25);
    _50.fld3 = core::ptr::addr_of!(_7);
    _32 = _50.fld1;
    _49.0 = core::ptr::addr_of_mut!(_53);
    _50.fld0 = Field::<i64>(Variant(_46, 1), 0);
    _50.fld1 = _32 ^ _9;
    _38 = _12;
    _41.2 = (*_25) & Field::<u16>(Variant(_46, 1), 1);
    _49 = (Move(_40.0), _22.0);
    _44 = _34;
    _22 = (_49.1, Move(_46), RET);
    _15 = _10 as f64;
    _47.1 = _41.1;
    place!(Field::<i64>(Variant(_21, 1), 0)) = Field::<i64>(Variant(_45, 1), 0) & _50.fld0;
    _40.1 = _22.0;
    _40.1 = _39 as f32;
    _41.2 = (*_25) << (*_25);
    _22.2 = _36 as u64;
    _38 = _12 >> (*_25);
    _43 = 209127006994900415996526427918636945054_u128;
    Goto(bb40)
    }
    bb46 = {
    Return()
    }
    bb47 = {
    _3 = !_8;
    _21 = Adt19::Variant0 { fld0: _22.0 };
    _22 = (Field::<f32>(Variant(_21, 0), 0), Move(_21), RET);
    _20.1 = _23;
    _20.1 = [RET,RET,_22.2];
    _30 = _6;
    _30 = _4;
    _34 = [_7,_7,_14,_14,_14,_7,_7];
    _11 = _22.0 as isize;
    _21 = Adt19::Variant0 { fld0: Field::<f32>(Variant(_22.1, 0), 0) };
    _19 = _10 ^ _10;
    _30 = _6;
    place!(Field::<f32>(Variant(_22.1, 0), 0)) = Field::<f32>(Variant(_21, 0), 0) - _22.0;
    _36 = 80_i8;
    _28.fld0 = [_4,_6,_4];
    _32 = _9;
    _38 = _7 as u8;
    _22 = (Field::<f32>(Variant(_21, 0), 0), Move(_21), RET);
    _39 = !_24;
    _2 = 51341_u16 + 7537_u16;
    _9 = _32 + _32;
    _12 = _38;
    match _36 {
    0 => bb3,
    1 => bb27,
    2 => bb28,
    3 => bb29,
    4 => bb30,
    5 => bb31,
    80 => bb33,
    _ => bb32
    }
    }
    bb48 = {
    (*_33) = core::ptr::addr_of!(_32);
    _40 = (Move(_49.0), _22.0);
    place!(Field::<u16>(Variant((*_70), 1), 1)) = (*_25) >> _38;
    _32 = _50.fld1;
    (*_70) = Adt19::Variant1 { fld0: _50.fld0,fld1: (*_25) };
    _49 = (Move(_40.0), _22.0);
    place!(Field::<i64>(Variant((*_70), 1), 0)) = _50.fld0;
    (*_70) = Move(_21);
    _40 = (Move(_49.0), _22.0);
    _22.1 = Adt19::Variant0 { fld0: _49.1 };
    _25 = &_47.2;
    _45 = Adt19::Variant1 { fld0: _50.fld0,fld1: (*_25) };
    (*_70) = Adt19::Variant0 { fld0: _40.1 };
    _47 = _41;
    _53 = _36 & _36;
    (*_54) = !_42;
    (*_33) = core::ptr::addr_of!(_32);
    (*_70) = Adt19::Variant1 { fld0: _50.fld0,fld1: Field::<u16>(Variant(_45, 1), 1) };
    (*_33) = core::ptr::addr_of!(_9);
    _47.1 = _41.1;
    _76 = core::ptr::addr_of!(_34);
    (*_33) = core::ptr::addr_of!(_9);
    place!(Field::<i64>(Variant((*_70), 1), 0)) = _50.fld0;
    (*_33) = core::ptr::addr_of!(_9);
    match Field::<i64>(Variant((*_70), 1), 0) {
    3761704393393425053 => bb49,
    _ => bb19
    }
    }
    bb49 = {
    (*_76) = [(*_54),(*_54),(*_54),(*_54),(*_54),(*_54),(*_54)];
    _59 = (_38,);
    (*_33) = core::ptr::addr_of!(_50.fld1);
    (*_70) = Adt19::Variant1 { fld0: Field::<i64>(Variant(_45, 1), 0),fld1: _47.2 };
    (*_33) = core::ptr::addr_of!(_32);
    (*_54) = _14;
    (*_33) = core::ptr::addr_of!(_50.fld1);
    (*_76) = [(*_54),(*_54),(*_54),(*_54),(*_54),(*_54),(*_54)];
    place!(Field::<u16>(Variant(_45, 1), 1)) = Field::<u16>(Variant((*_70), 1), 1);
    _15 = _60 as f64;
    (*_33) = core::ptr::addr_of!(_50.fld1);
    (*_76) = [(*_54),(*_54),(*_54),(*_54),_42,(*_54),(*_54)];
    (*_76) = [(*_54),(*_54),(*_54),(*_54),(*_54),(*_54),(*_54)];
    place!(Field::<u16>(Variant((*_70), 1), 1)) = _38 as u16;
    _49.1 = -_22.0;
    Goto(bb50)
    }
    bb50 = {
    Call(_79 = dump_var(12_usize, 29_usize, Move(_29), 7_usize, Move(_7), 59_usize, Move(_59), 4_usize, Move(_4)), ReturnTo(bb51), UnwindUnreachable())
    }
    bb51 = {
    Call(_79 = dump_var(12_usize, 10_usize, Move(_10), 51_usize, Move(_51), 12_usize, Move(_12), 38_usize, Move(_38)), ReturnTo(bb52), UnwindUnreachable())
    }
    bb52 = {
    Call(_79 = dump_var(12_usize, 42_usize, Move(_42), 41_usize, Move(_41), 6_usize, Move(_6), 56_usize, Move(_56)), ReturnTo(bb53), UnwindUnreachable())
    }
    bb53 = {
    Call(_79 = dump_var(12_usize, 11_usize, Move(_11), 53_usize, Move(_53), 31_usize, Move(_31), 36_usize, Move(_36)), ReturnTo(bb54), UnwindUnreachable())
    }
    bb54 = {
    Call(_79 = dump_var(12_usize, 32_usize, Move(_32), 55_usize, Move(_55), 24_usize, Move(_24), 80_usize, _80), ReturnTo(bb55), UnwindUnreachable())
    }
    bb55 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn13(
    mut _1: u32,
    mut _2: u8,
    mut _3: u32,
    mut _4: i64,
    mut _5: bool,
    mut _6: char,
    mut _7: f64,
    mut _8: char,
) -> bool {
    mir! {
    type RET = bool;
    let _9: usize;
    let _10: isize;
    let _11: (u8,);
    let _12: (*mut &'static *mut f32, Adt19, usize);
    let _13: i16;
    let _14: ();
    let _15: ();
    {
    RET = !_5;
    _7 = _1 as f64;
    _4 = (-3312053761454327174_i64) ^ (-8159301838796296308_i64);
    _5 = RET;
    _9 = 5_usize;
    _5 = !RET;
    _8 = _6;
    _3 = 22_i8 as u32;
    _10 = 11_isize;
    RET = !_5;
    _7 = _9 as f64;
    _6 = _8;
    _4 = !7539998450801139163_i64;
    _5 = !RET;
    _6 = _8;
    _4 = (-37250503208275063131667077271419591003_i128) as i64;
    _1 = !_3;
    _11 = (_2,);
    _9 = 0_usize | 507060414988653629_usize;
    _4 = 8557508161136881171_i64 & (-5412435630652263058_i64);
    _8 = _6;
    _6 = _8;
    _9 = !5526187687089644549_usize;
    _6 = _8;
    _10 = (-9223372036854775808_isize) + 48_isize;
    _11.0 = _2 - _2;
    _13 = 143_i16 - (-4244_i16);
    Goto(bb1)
    }
    bb1 = {
    Call(_14 = dump_var(13_usize, 2_usize, Move(_2), 9_usize, Move(_9), 13_usize, Move(_13), 8_usize, Move(_8)), ReturnTo(bb2), UnwindUnreachable())
    }
    bb2 = {
    Call(_14 = dump_var(13_usize, 10_usize, Move(_10), 15_usize, _15, 15_usize, _15, 15_usize, _15), ReturnTo(bb3), UnwindUnreachable())
    }
    bb3 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn14(mut _1: *mut i8, mut _2: f32, mut _3: (*mut i8, f32)) -> (f32, Adt19, u64) {
    mir! {
    type RET = (f32, Adt19, u64);
    let _4: *const &'static *mut &'static *mut f32;
    let _5: (i64, i8, &'static mut u32);
    let _6: isize;
    let _7: &'static Adt31;
    let _8: isize;
    let _9: [char; 3];
    let _10: *mut f32;
    let _11: *const usize;
    let _12: i64;
    let _13: isize;
    let _14: f64;
    let _15: &'static u16;
    let _16: f32;
    let _17: [i128; 3];
    let _18: *mut *mut u128;
    let _19: (char, i64, u64);
    let _20: &'static *const u32;
    let _21: isize;
    let _22: isize;
    let _23: Adt69;
    let _24: ();
    let _25: ();
    {
    RET.0 = _2;
    RET.0 = -_2;
    _1 = Move(_3.0);
    RET.1 = Adt19::Variant0 { fld0: _3.1 };
    RET.0 = _2 - _3.1;
    _3 = (Move(_1), RET.0);
    RET.2 = (-7369634466701088505_i64) as u64;
    _5.1 = (-66_i8);
    place!(Field::<f32>(Variant(RET.1, 0), 0)) = _3.1;
    RET.0 = (-1326608376_i32) as f32;
    _3.1 = _2;
    RET.0 = Field::<f32>(Variant(RET.1, 0), 0) * _2;
    RET.1 = Adt19::Variant0 { fld0: _3.1 };
    _2 = 25761_i16 as f32;
    RET.2 = !642380607455814541_u64;
    _5.1 = 27_i8 - 120_i8;
    Goto(bb1)
    }
    bb1 = {
    RET.0 = Field::<f32>(Variant(RET.1, 0), 0);
    _9 = ['\u{57b21}','\u{425d7}','\u{50f65}'];
    _5.0 = (-3891827789109013407_i64) * 3839687656531159829_i64;
    _3.0 = core::ptr::addr_of_mut!(_5.1);
    Call(_6 = core::intrinsics::bswap(9223372036854775807_isize), ReturnTo(bb2), UnwindUnreachable())
    }
    bb2 = {
    _5.0 = 7347395750175223859_i64 ^ 7303434598169975737_i64;
    _3.0 = core::ptr::addr_of_mut!(_5.1);
    _1 = core::ptr::addr_of_mut!(_5.1);
    _2 = Field::<f32>(Variant(RET.1, 0), 0) + RET.0;
    place!(Field::<f32>(Variant(RET.1, 0), 0)) = 32560_u16 as f32;
    _3.1 = _2;
    Goto(bb3)
    }
    bb3 = {
    (*_1) = !12_i8;
    (*_1) = (-126_i8) * 39_i8;
    place!(Field::<f32>(Variant(RET.1, 0), 0)) = RET.2 as f32;
    (*_1) = 7_i8 - (-81_i8);
    RET.2 = !7670270245007831621_u64;
    (*_1) = 67_i8 - 42_i8;
    (*_1) = 17_i8 * (-11_i8);
    (*_1) = (-47_i8);
    (*_1) = (-55_i8);
    (*_1) = !15_i8;
    (*_1) = 9_i8 & 99_i8;
    (*_1) = 77_i8;
    (*_1) = 63_i8 << RET.2;
    RET.1 = Adt19::Variant1 { fld0: _5.0,fld1: 63804_u16 };
    (*_1) = RET.2 as i8;
    Goto(bb4)
    }
    bb4 = {
    _10 = core::ptr::addr_of_mut!(RET.0);
    (*_10) = -_3.1;
    (*_1) = (-55_i8) - (-47_i8);
    _6 = 9223372036854775807_isize;
    (*_1) = 109_i8 << Field::<i64>(Variant(RET.1, 1), 0);
    (*_1) = 4_i8;
    RET.2 = 7107602932145458976_u64 + 7997192915930678474_u64;
    place!(Field::<u16>(Variant(RET.1, 1), 1)) = 4523_u16 >> (*_1);
    (*_1) = -(-25_i8);
    (*_10) = 3206254954_u32 as f32;
    _5.0 = Field::<i64>(Variant(RET.1, 1), 0) & Field::<i64>(Variant(RET.1, 1), 0);
    place!(Field::<i64>(Variant(RET.1, 1), 0)) = '\u{20893}' as i64;
    (*_10) = -_3.1;
    (*_10) = _3.1;
    (*_10) = -_3.1;
    (*_1) = (-19_i8);
    (*_10) = -_2;
    (*_1) = (-38_i8) | (-22_i8);
    match _6 {
    9223372036854775807 => bb6,
    _ => bb5
    }
    }
    bb5 = {
    RET.0 = Field::<f32>(Variant(RET.1, 0), 0);
    _9 = ['\u{57b21}','\u{425d7}','\u{50f65}'];
    _5.0 = (-3891827789109013407_i64) * 3839687656531159829_i64;
    _3.0 = core::ptr::addr_of_mut!(_5.1);
    Call(_6 = core::intrinsics::bswap(9223372036854775807_isize), ReturnTo(bb2), UnwindUnreachable())
    }
    bb6 = {
    (*_10) = _2 - _3.1;
    (*_10) = _2;
    (*_10) = 211_u8 as f32;
    (*_10) = _2;
    (*_1) = (-18_i8) & (-91_i8);
    RET.1 = Adt19::Variant1 { fld0: _5.0,fld1: 58340_u16 };
    (*_1) = 117_i8 * (-11_i8);
    _5.0 = Field::<i64>(Variant(RET.1, 1), 0) + Field::<i64>(Variant(RET.1, 1), 0);
    (*_1) = _5.0 as i8;
    _10 = core::ptr::addr_of_mut!((*_10));
    _1 = core::ptr::addr_of_mut!((*_1));
    (*_10) = _2 * _3.1;
    (*_10) = _2 + _3.1;
    (*_1) = (-74_i8) >> _6;
    (*_1) = 19_i8;
    (*_1) = 1342576893_u32 as i8;
    _8 = _6 - _6;
    _6 = (-21738_i16) as isize;
    (*_10) = -_3.1;
    (*_10) = _3.1;
    (*_10) = (-149021180723451508147919618803410768373_i128) as f32;
    Goto(bb7)
    }
    bb7 = {
    (*_1) = 96_i8 << _5.0;
    (*_10) = 251788719382730114987597456789638202508_u128 as f32;
    Call((*_10) = fn15(Move(_3), Move(_10), Move(_1), (*_1), (*_1), _6), ReturnTo(bb8), UnwindUnreachable())
    }
    bb8 = {
    _12 = Field::<i64>(Variant(RET.1, 1), 0) | _5.0;
    _16 = RET.0 * RET.0;
    RET.1 = Adt19::Variant1 { fld0: _5.0,fld1: 14857_u16 };
    RET.0 = -_16;
    _1 = core::ptr::addr_of_mut!(_5.1);
    _3 = (Move(_1), RET.0);
    _9 = ['\u{1e64f}','\u{f9d19}','\u{5b76a}'];
    _12 = false as i64;
    _5.1 = (-72_i8);
    match _5.1 {
    340282366920938463463374607431768211384 => bb9,
    _ => bb1
    }
    }
    bb9 = {
    _14 = (-11263764978010805802382784197433840159_i128) as f64;
    place!(Field::<u16>(Variant(RET.1, 1), 1)) = 38052_u16 ^ 57489_u16;
    _1 = core::ptr::addr_of_mut!(_5.1);
    place!(Field::<i64>(Variant(RET.1, 1), 0)) = _5.0 | _12;
    (*_1) = 91_i8 * 25_i8;
    _13 = _8 - _6;
    RET.2 = 2300462988022718060_u64;
    _9 = ['\u{e0b90}','\u{b86c1}','\u{10ebd3}'];
    _16 = RET.0 * _3.1;
    (*_1) = -52_i8;
    _21 = 17094978956214957060_usize as isize;
    _19.1 = RET.2 as i64;
    (*_1) = !9_i8;
    (*_1) = 77_i8 | (-22_i8);
    Goto(bb10)
    }
    bb10 = {
    Call(_24 = dump_var(14_usize, 9_usize, Move(_9), 6_usize, Move(_6), 12_usize, Move(_12), 25_usize, _25), ReturnTo(bb11), UnwindUnreachable())
    }
    bb11 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(
    mut _1: (*mut i8, f32),
    mut _2: *mut f32,
    mut _3: *mut i8,
    mut _4: i8,
    mut _5: i8,
    mut _6: isize,
) -> f32 {
    mir! {
    type RET = f32;
    let _7: &'static mut u32;
    let _8: isize;
    let _9: *mut &'static u16;
    let _10: (i16, &'static mut *const usize, *mut *mut u128);
    let _11: *mut i8;
    let _12: &'static mut u32;
    let _13: bool;
    let _14: *mut f32;
    let _15: i64;
    let _16: f32;
    let _17: (*mut &'static *mut f32, Adt19, usize);
    let _18: &'static mut [u32; 7];
    let _19: &'static *mut &'static *mut f32;
    let _20: [isize; 7];
    let _21: *const [u32; 7];
    let _22: [i8; 3];
    let _23: (i64, (u8,), (u16, char, u16, char), Adt38);
    let _24: i64;
    let _25: f64;
    let _26: *mut &'static mut i128;
    let _27: &'static *mut f32;
    let _28: &'static mut *const usize;
    let _29: *const [u32; 7];
    let _30: ((char, i64, u64),);
    let _31: u32;
    let _32: [u64; 6];
    let _33: [u64; 6];
    let _34: isize;
    let _35: u16;
    let _36: isize;
    let _37: f64;
    let _38: [i8; 3];
    let _39: &'static u16;
    let _40: char;
    let _41: usize;
    let _42: (*mut &'static *mut f32, Adt19, usize);
    let _43: [i16; 1];
    let _44: &'static *mut &'static *mut f32;
    let _45: &'static i32;
    let _46: Adt73;
    let _47: i32;
    let _48: i128;
    let _49: [u16; 2];
    let _50: u16;
    let _51: char;
    let _52: bool;
    let _53: i128;
    let _54: f64;
    let _55: *mut *const (u16, char, u16, char);
    let _56: (Adt38, *mut i8, f32, u16);
    let _57: (i64, (u8,), (u16, char, u16, char), Adt38);
    let _58: *mut *mut u128;
    let _59: i128;
    let _60: &'static mut u32;
    let _61: usize;
    let _62: isize;
    let _63: bool;
    let _64: *mut (Adt27, [u64; 3]);
    let _65: usize;
    let _66: f64;
    let _67: isize;
    let _68: f32;
    let _69: i128;
    let _70: &'static mut i128;
    let _71: char;
    let _72: f32;
    let _73: &'static mut u32;
    let _74: (i16, &'static mut *const usize, *mut *mut u128);
    let _75: ();
    let _76: ();
    {
    _5 = -_4;
    _4 = !_5;
    _1.1 = 3845876584009409048_u64 as f32;
    _1.1 = 12183959372324692156_u64 as f32;
    RET = 3155262943_u32 as f32;
    _5 = -_4;
    _5 = _4 + _4;
    _3 = core::ptr::addr_of_mut!(_4);
    Call((*_3) = fn16(Move(_1), _5, Move(_3), Move(_2), _6, _6, _6, _6, _6, RET, _6, _6), ReturnTo(bb1), UnwindUnreachable())
    }
    bb1 = {
    RET = 60850_u16 as f32;
    _1.0 = core::ptr::addr_of_mut!(_4);
    RET = 17062549408138257744_u64 as f32;
    Goto(bb2)
    }
    bb2 = {
    _1.1 = RET - RET;
    _2 = core::ptr::addr_of_mut!(_1.1);
    (*_2) = -RET;
    (*_2) = RET;
    (*_2) = RET;
    (*_2) = -RET;
    _1.0 = core::ptr::addr_of_mut!(_5);
    _5 = -_4;
    _3 = core::ptr::addr_of_mut!(_5);
    _1.0 = core::ptr::addr_of_mut!((*_3));
    (*_3) = _4 | _4;
    _8 = _6 - _6;
    (*_2) = -RET;
    (*_2) = RET - RET;
    _1 = (Move(_3), RET);
    _3 = core::ptr::addr_of_mut!(_4);
    (*_2) = RET * RET;
    (*_2) = RET;
    Call((*_3) = core::intrinsics::bswap(_5), ReturnTo(bb3), UnwindUnreachable())
    }
    bb3 = {
    (*_2) = RET + RET;
    (*_3) = -_5;
    (*_3) = _5 - _5;
    (*_3) = _5;
    (*_3) = !_5;
    (*_2) = -RET;
    (*_3) = _5 + _5;
    (*_3) = _5;
    (*_3) = -_5;
    (*_2) = -RET;
    _1.0 = Move(_3);
    (*_2) = RET - RET;
    (*_2) = (-863_i16) as f32;
    _11 = Move(_1.0);
    (*_2) = RET + RET;
    Goto(bb4)
    }
    bb4 = {
    _4 = _5 + _5;
    (*_2) = RET;
    (*_2) = RET * RET;
    _1 = (Move(_11), RET);
    (*_2) = RET - RET;
    _1.1 = RET + RET;
    (*_2) = -RET;
    _6 = _8;
    (*_2) = _8 as f32;
    _6 = (-16196_i16) as isize;
    Goto(bb5)
    }
    bb5 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb6 = {
    _1.0 = core::ptr::addr_of_mut!(_5);
    (*_2) = RET;
    _10.0 = (-8696_i16) + (-32543_i16);
    _10.0 = 22254_i16 | 5306_i16;
    RET = (*_2) - (*_2);
    (*_2) = -RET;
    _1 = (Move(_11), RET);
    (*_2) = RET;
    Goto(bb7)
    }
    bb7 = {
    (*_2) = -RET;
    (*_2) = RET;
    (*_2) = RET;
    _11 = Move(_1.0);
    (*_2) = -RET;
    _16 = -(*_2);
    (*_2) = -_16;
    _8 = _6 + _6;
    _15 = '\u{50caa}' as i64;
    _13 = _4 != _4;
    _1 = (Move(_11), RET);
    _10.0 = 7564_i16 + (-16155_i16);
    (*_2) = 1151346318_u32 as f32;
    RET = (*_2) + (*_2);
    _13 = true;
    _6 = (*_2) as isize;
    (*_2) = 318319169703235213242060826951391419220_u128 as f32;
    _17.1 = Adt19::Variant1 { fld0: _15,fld1: 19790_u16 };
    place!(Field::<i64>(Variant(_17.1, 1), 0)) = _15;
    _15 = -Field::<i64>(Variant(_17.1, 1), 0);
    _17.2 = !2598348547415926268_usize;
    (*_2) = 161829184046415052063565406354037619583_u128 as f32;
    Goto(bb8)
    }
    bb8 = {
    (*_2) = _16;
    (*_2) = RET - _16;
    _11 = Move(_1.0);
    _1 = (Move(_11), _16);
    _8 = -_6;
    _13 = true;
    (*_2) = -RET;
    _17.1 = Adt19::Variant0 { fld0: (*_2) };
    (*_2) = RET - _16;
    _8 = _6 >> _5;
    Goto(bb9)
    }
    bb9 = {
    _1.0 = core::ptr::addr_of_mut!(_4);
    (*_2) = -RET;
    (*_2) = 55692_u16 as f32;
    (*_2) = RET * RET;
    _10.0 = (-19170_i16) - (-24581_i16);
    _10.0 = 16668_i16;
    (*_2) = _16;
    _10.0 = (-7918_i16) + 3552_i16;
    Goto(bb10)
    }
    bb10 = {
    _24 = _15;
    _23.2.2 = !25856_u16;
    (*_2) = -RET;
    Goto(bb11)
    }
    bb11 = {
    _3 = core::ptr::addr_of_mut!(_4);
    _23.3.fld0 = _13 | _13;
    _1 = (Move(_3), Field::<f32>(Variant(_17.1, 0), 0));
    (*_2) = _17.2 as f32;
    Goto(bb12)
    }
    bb12 = {
    _1.1 = RET * _16;
    _25 = (-1073613642_i32) as f64;
    _11 = core::ptr::addr_of_mut!(_4);
    _10.0 = (-6328_i16) & 2777_i16;
    (*_2) = RET;
    (*_2) = RET;
    _24 = _15;
    _23.2.2 = !18558_u16;
    (*_2) = -Field::<f32>(Variant(_17.1, 0), 0);
    (*_2) = _16 - RET;
    _23.0 = _15 >> (*_11);
    _22 = [(*_11),(*_11),(*_11)];
    _20 = [_8,_8,_8,_8,_8,_8,_8];
    (*_11) = _8 as i8;
    _23.2.3 = '\u{f69e4}';
    (*_11) = 215_u8 as i8;
    (*_2) = -Field::<f32>(Variant(_17.1, 0), 0);
    (*_2) = -_16;
    (*_11) = _5 << _23.0;
    _23.2.0 = _23.2.2 - _23.2.2;
    _23.2 = (27120_u16, '\u{69b8}', 54984_u16, '\u{a3593}');
    place!(Field::<f32>(Variant(_17.1, 0), 0)) = (*_2);
    _23.1.0 = 130_u8;
    _23.1.0 = 233_u8;
    _23.3.fld1 = !_23.1.0;
    match _23.2.0 {
    0 => bb3,
    1 => bb6,
    2 => bb13,
    3 => bb14,
    4 => bb15,
    5 => bb16,
    27120 => bb18,
    _ => bb17
    }
    }
    bb13 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb14 = {
    _24 = _15;
    _23.2.2 = !25856_u16;
    (*_2) = -RET;
    Goto(bb11)
    }
    bb15 = {
    _1.1 = RET - RET;
    _2 = core::ptr::addr_of_mut!(_1.1);
    (*_2) = -RET;
    (*_2) = RET;
    (*_2) = RET;
    (*_2) = -RET;
    _1.0 = core::ptr::addr_of_mut!(_5);
    _5 = -_4;
    _3 = core::ptr::addr_of_mut!(_5);
    _1.0 = core::ptr::addr_of_mut!((*_3));
    (*_3) = _4 | _4;
    _8 = _6 - _6;
    (*_2) = -RET;
    (*_2) = RET - RET;
    _1 = (Move(_3), RET);
    _3 = core::ptr::addr_of_mut!(_4);
    (*_2) = RET * RET;
    (*_2) = RET;
    Call((*_3) = core::intrinsics::bswap(_5), ReturnTo(bb3), UnwindUnreachable())
    }
    bb16 = {
    _1.0 = core::ptr::addr_of_mut!(_5);
    (*_2) = RET;
    _10.0 = (-8696_i16) + (-32543_i16);
    _10.0 = 22254_i16 | 5306_i16;
    RET = (*_2) - (*_2);
    (*_2) = -RET;
    _1 = (Move(_11), RET);
    (*_2) = RET;
    Goto(bb7)
    }
    bb17 = {
    (*_2) = -RET;
    (*_2) = RET;
    (*_2) = RET;
    _11 = Move(_1.0);
    (*_2) = -RET;
    _16 = -(*_2);
    (*_2) = -_16;
    _8 = _6 + _6;
    _15 = '\u{50caa}' as i64;
    _13 = _4 != _4;
    _1 = (Move(_11), RET);
    _10.0 = 7564_i16 + (-16155_i16);
    (*_2) = 1151346318_u32 as f32;
    RET = (*_2) + (*_2);
    _13 = true;
    _6 = (*_2) as isize;
    (*_2) = 318319169703235213242060826951391419220_u128 as f32;
    _17.1 = Adt19::Variant1 { fld0: _15,fld1: 19790_u16 };
    place!(Field::<i64>(Variant(_17.1, 1), 0)) = _15;
    _15 = -Field::<i64>(Variant(_17.1, 1), 0);
    _17.2 = !2598348547415926268_usize;
    (*_2) = 161829184046415052063565406354037619583_u128 as f32;
    Goto(bb8)
    }
    bb18 = {
    _23.3 = Adt38 { fld0: _13,fld1: _23.1.0 };
    (*_11) = _5;
    (*_2) = RET - _16;
    (*_11) = _5 * _5;
    _1 = (Move(_11), RET);
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0);
    _22 = [_5,_5,_5];
    RET = (*_2) * (*_2);
    _23.2 = (20171_u16, '\u{4dd7c}', 45749_u16, '\u{416cb}');
    _17.2 = 7_usize ^ 12150149192730784063_usize;
    _1.0 = core::ptr::addr_of_mut!(_5);
    _15 = _23.0;
    _30.0.0 = _23.2.1;
    _1.1 = -RET;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0) - RET;
    _33 = [228974942327037112_u64,16470487204801055520_u64,9385686784116152088_u64,17889872234877269569_u64,12859917407820827754_u64,17684920051968707224_u64];
    _23.3.fld0 = !_13;
    _22 = [_4,_5,_4];
    _16 = -(*_2);
    _32 = [2100640869371195151_u64,17485143483016275803_u64,10497358521785180329_u64,4017432367802565923_u64,2499679973585339544_u64,10591551078590997681_u64];
    _14 = core::ptr::addr_of_mut!((*_2));
    _32 = _33;
    _30.0.2 = !5460878517504824729_u64;
    _16 = (*_2) * (*_2);
    match _23.3.fld1 {
    0 => bb16,
    1 => bb13,
    2 => bb5,
    3 => bb4,
    4 => bb19,
    5 => bb20,
    233 => bb22,
    _ => bb21
    }
    }
    bb19 = {
    _24 = _15;
    _23.2.2 = !25856_u16;
    (*_2) = -RET;
    Goto(bb11)
    }
    bb20 = {
    (*_2) = RET + RET;
    (*_3) = -_5;
    (*_3) = _5 - _5;
    (*_3) = _5;
    (*_3) = !_5;
    (*_2) = -RET;
    (*_3) = _5 + _5;
    (*_3) = _5;
    (*_3) = -_5;
    (*_2) = -RET;
    _1.0 = Move(_3);
    (*_2) = RET - RET;
    (*_2) = (-863_i16) as f32;
    _11 = Move(_1.0);
    (*_2) = RET + RET;
    Goto(bb4)
    }
    bb21 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb22 = {
    _20 = [_8,_8,_8,_8,_8,_8,_8];
    (*_14) = _8 as f32;
    place!(Field::<f32>(Variant(_17.1, 0), 0)) = (*_2);
    _23.2 = (30848_u16, _30.0.0, 10679_u16, _30.0.0);
    _8 = 141515345_i32 as isize;
    _27 = &_14;
    _35 = _23.2.2;
    (*_14) = Field::<f32>(Variant(_17.1, 0), 0) * _16;
    (*_14) = Field::<f32>(Variant(_17.1, 0), 0);
    _23.3.fld0 = !_13;
    _1.1 = -Field::<f32>(Variant(_17.1, 0), 0);
    (*_14) = Field::<f32>(Variant(_17.1, 0), 0) + Field::<f32>(Variant(_17.1, 0), 0);
    _11 = core::ptr::addr_of_mut!(_5);
    _35 = _23.2.2 << _5;
    _23.0 = _15;
    _30.0.2 = 3135668197751697035_u64 << (*_11);
    (*_14) = Field::<f32>(Variant(_17.1, 0), 0);
    (*_14) = -Field::<f32>(Variant(_17.1, 0), 0);
    (*_11) = _4 >> _30.0.2;
    (*_14) = _30.0.2 as f32;
    match _23.2.2 {
    0 => bb23,
    10679 => bb25,
    _ => bb24
    }
    }
    bb23 = {
    _1.1 = RET * _16;
    _25 = (-1073613642_i32) as f64;
    _11 = core::ptr::addr_of_mut!(_4);
    _10.0 = (-6328_i16) & 2777_i16;
    (*_2) = RET;
    (*_2) = RET;
    _24 = _15;
    _23.2.2 = !18558_u16;
    (*_2) = -Field::<f32>(Variant(_17.1, 0), 0);
    (*_2) = _16 - RET;
    _23.0 = _15 >> (*_11);
    _22 = [(*_11),(*_11),(*_11)];
    _20 = [_8,_8,_8,_8,_8,_8,_8];
    (*_11) = _8 as i8;
    _23.2.3 = '\u{f69e4}';
    (*_11) = 215_u8 as i8;
    (*_2) = -Field::<f32>(Variant(_17.1, 0), 0);
    (*_2) = -_16;
    (*_11) = _5 << _23.0;
    _23.2.0 = _23.2.2 - _23.2.2;
    _23.2 = (27120_u16, '\u{69b8}', 54984_u16, '\u{a3593}');
    place!(Field::<f32>(Variant(_17.1, 0), 0)) = (*_2);
    _23.1.0 = 130_u8;
    _23.1.0 = 233_u8;
    _23.3.fld1 = !_23.1.0;
    match _23.2.0 {
    0 => bb3,
    1 => bb6,
    2 => bb13,
    3 => bb14,
    4 => bb15,
    5 => bb16,
    27120 => bb18,
    _ => bb17
    }
    }
    bb24 = {
    RET = 60850_u16 as f32;
    _1.0 = core::ptr::addr_of_mut!(_4);
    RET = 17062549408138257744_u64 as f32;
    Goto(bb2)
    }
    bb25 = {
    (*_2) = -Field::<f32>(Variant(_17.1, 0), 0);
    (*_2) = (-820283005_i32) as f32;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0) - Field::<f32>(Variant(_17.1, 0), 0);
    (*_2) = -Field::<f32>(Variant(_17.1, 0), 0);
    _30.0 = (_23.2.1, _23.0, 14293858023162457723_u64);
    (*_11) = _15 as i8;
    (*_11) = _4 + _4;
    _43 = [_10.0];
    _23.2.3 = _30.0.0;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0);
    (*_11) = _4;
    (*_2) = -Field::<f32>(Variant(_17.1, 0), 0);
    _30.0 = (_23.2.1, _23.0, 11529572028866491005_u64);
    _23.0 = _30.0.1 & _15;
    place!(Field::<f32>(Variant(_17.1, 0), 0)) = (*_11) as f32;
    _35 = _30.0.2 as u16;
    _17.0 = core::ptr::addr_of_mut!(_27);
    _39 = &_23.2.2;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0);
    match (*_39) {
    0 => bb1,
    1 => bb5,
    2 => bb3,
    3 => bb26,
    10679 => bb28,
    _ => bb27
    }
    }
    bb26 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb27 = {
    _1.0 = core::ptr::addr_of_mut!(_5);
    (*_2) = RET;
    _10.0 = (-8696_i16) + (-32543_i16);
    _10.0 = 22254_i16 | 5306_i16;
    RET = (*_2) - (*_2);
    (*_2) = -RET;
    _1 = (Move(_11), RET);
    (*_2) = RET;
    Goto(bb7)
    }
    bb28 = {
    (*_11) = _4 * _4;
    (*_11) = 169454542131977784524194794204425535529_i128 as i8;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0) * Field::<f32>(Variant(_17.1, 0), 0);
    _23.2.1 = _23.2.3;
    (*_2) = 2449552315_u32 as f32;
    _40 = _23.2.3;
    _32 = [_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2];
    _4 = (*_11) >> _35;
    Goto(bb29)
    }
    bb29 = {
    _23.1.0 = _23.3.fld1 * _23.3.fld1;
    _35 = _23.3.fld1 as u16;
    _34 = _8 - _8;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0) + Field::<f32>(Variant(_17.1, 0), 0);
    _11 = core::ptr::addr_of_mut!((*_11));
    _32 = _33;
    _5 = _4 * _4;
    _19 = &_17.0;
    _42 = (Move(_17.0), Move(_17.1), _17.2);
    _9 = core::ptr::addr_of_mut!(_39);
    (*_11) = !_4;
    _17 = Move(_42);
    _23.2 = (_35, _40, _35, _40);
    (*_11) = _4;
    _10.0 = (-5579_i16) ^ 22705_i16;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0) - Field::<f32>(Variant(_17.1, 0), 0);
    (*_11) = !_4;
    _3 = core::ptr::addr_of_mut!((*_11));
    _46.fld2 = [_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2];
    (*_11) = _4;
    _15 = 285451468125643568132679893755388250833_u128 as i64;
    _44 = &_17.0;
    _1 = (Move(_3), _16);
    (*_9) = &_23.2.0;
    _46.fld3 = core::ptr::addr_of!(_31);
    match _30.0.2 {
    0 => bb30,
    1 => bb31,
    2 => bb32,
    3 => bb33,
    11529572028866491005 => bb35,
    _ => bb34
    }
    }
    bb30 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb31 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb32 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb33 = {
    (*_2) = -RET;
    (*_2) = RET;
    (*_2) = RET;
    _11 = Move(_1.0);
    (*_2) = -RET;
    _16 = -(*_2);
    (*_2) = -_16;
    _8 = _6 + _6;
    _15 = '\u{50caa}' as i64;
    _13 = _4 != _4;
    _1 = (Move(_11), RET);
    _10.0 = 7564_i16 + (-16155_i16);
    (*_2) = 1151346318_u32 as f32;
    RET = (*_2) + (*_2);
    _13 = true;
    _6 = (*_2) as isize;
    (*_2) = 318319169703235213242060826951391419220_u128 as f32;
    _17.1 = Adt19::Variant1 { fld0: _15,fld1: 19790_u16 };
    place!(Field::<i64>(Variant(_17.1, 1), 0)) = _15;
    _15 = -Field::<i64>(Variant(_17.1, 1), 0);
    _17.2 = !2598348547415926268_usize;
    (*_2) = 161829184046415052063565406354037619583_u128 as f32;
    Goto(bb8)
    }
    bb34 = {
    _1.0 = core::ptr::addr_of_mut!(_5);
    (*_2) = RET;
    _10.0 = (-8696_i16) + (-32543_i16);
    _10.0 = 22254_i16 | 5306_i16;
    RET = (*_2) - (*_2);
    (*_2) = -RET;
    _1 = (Move(_11), RET);
    (*_2) = RET;
    Goto(bb7)
    }
    bb35 = {
    _36 = -_8;
    _47 = (-1303653389_i32);
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0) + Field::<f32>(Variant(_17.1, 0), 0);
    (*_11) = _4;
    _22 = [(*_11),(*_11),(*_11)];
    (*_9) = &_35;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0) - Field::<f32>(Variant(_17.1, 0), 0);
    _40 = _23.2.3;
    match _30.0.2 {
    0 => bb36,
    11529572028866491005 => bb38,
    _ => bb37
    }
    }
    bb36 = {
    _24 = _15;
    _23.2.2 = !25856_u16;
    (*_2) = -RET;
    Goto(bb11)
    }
    bb37 = {
    _3 = core::ptr::addr_of_mut!(_4);
    _23.3.fld0 = _13 | _13;
    _1 = (Move(_3), Field::<f32>(Variant(_17.1, 0), 0));
    (*_2) = _17.2 as f32;
    Goto(bb12)
    }
    bb38 = {
    (*_9) = &_23.2.0;
    (*_9) = &_35;
    (*_11) = -_4;
    _35 = !_23.2.2;
    (*_11) = !_4;
    (*_2) = Field::<f32>(Variant(_17.1, 0), 0);
    _42 = (Move(_17.0), Move(_17.1), _17.2);
    _23.2.2 = !_35;
    _4 = (*_11) | (*_11);
    _30.0.1 = _23.0 & _23.0;
    _16 = (*_2);
    (*_9) = &_23.2.2;
    (*_9) = &_35;
    (*_2) = 38643834016965494697476715715860521225_i128 as f32;
    _53 = (-123633780529313391810137993879378928960_i128) * 115352077256540794873737459596054013005_i128;
    _54 = _25;
    place!(Field::<f32>(Variant(_42.1, 0), 0)) = _16 + (*_2);
    _41 = !_17.2;
    (*_2) = _16;
    (*_9) = &_23.2.2;
    _57.1 = (_23.1.0,);
    match _30.0.2 {
    0 => bb23,
    1 => bb18,
    2 => bb7,
    3 => bb4,
    4 => bb39,
    11529572028866491005 => bb41,
    _ => bb40
    }
    }
    bb39 = {
    _1.0 = core::ptr::addr_of_mut!(_5);
    (*_2) = RET;
    _10.0 = (-8696_i16) + (-32543_i16);
    _10.0 = 22254_i16 | 5306_i16;
    RET = (*_2) - (*_2);
    (*_2) = -RET;
    _1 = (Move(_11), RET);
    (*_2) = RET;
    Goto(bb7)
    }
    bb40 = {
    _1.1 = 48156_u16 as f32;
    _5 = _4;
    (*_2) = RET + RET;
    (*_2) = RET;
    (*_2) = RET * RET;
    _6 = 5887744975623307310_i64 as isize;
    (*_2) = RET;
    (*_2) = 27169_i16 as f32;
    _11 = Move(_1.0);
    (*_2) = 96_u8 as f32;
    (*_2) = RET;
    (*_2) = 265308139510098315042982482987624609734_u128 as f32;
    (*_2) = RET + RET;
    (*_2) = -RET;
    (*_2) = RET + RET;
    Goto(bb6)
    }
    bb41 = {
    _42.1 = Adt19::Variant1 { fld0: _23.0,fld1: _35 };
    _57.3 = _23.3;
    (*_9) = &_35;
    (*_2) = 1221751785_u32 as f32;
    _57.1 = (_23.3.fld1,);
    _19 = &_42.0;
    _38 = _22;
    _48 = _53 >> (*_11);
    (*_9) = &place!(Field::<u16>(Variant(_42.1, 1), 1));
    _17.2 = _34 as usize;
    _1 = (Move(_11), _16);
    _46.fld0 = _23.0 | _30.0.1;
    (*_2) = _16 * _16;
    (*_2) = -_16;
    _44 = &(*_19);
    (*_9) = &_23.2.2;
    _45 = &_47;
    _46.fld0 = _30.0.1;
    _39 = &_23.2.0;
    _56.0.fld1 = _57.3.fld0 as u8;
    _23.1.0 = !_56.0.fld1;
    _57.2.1 = _30.0.0;
    _33 = [_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2];
    _23.3 = Adt38 { fld0: _13,fld1: _57.3.fld1 };
    _46.fld3 = core::ptr::addr_of!(_31);
    (*_9) = &_23.2.2;
    (*_2) = _16 * _16;
    Goto(bb42)
    }
    bb42 = {
    _19 = Move(_44);
    _23.1.0 = !_56.0.fld1;
    _30.0.0 = _23.2.1;
    _13 = _57.3.fld0;
    _23.2.1 = _30.0.0;
    _23.2.2 = !_35;
    (*_2) = -_16;
    (*_2) = 2209033510_u32 as f32;
    (*_9) = &_23.2.0;
    _32 = [_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2];
    _6 = _34 | _8;
    _62 = _57.1.0 as isize;
    _23.3.fld0 = _57.3.fld0 | _57.3.fld0;
    (*_9) = &_23.2.2;
    (*_2) = -_16;
    _44 = &_42.0;
    _50 = !(*_39);
    _23.3 = Adt38 { fld0: _13,fld1: _57.3.fld1 };
    (*_2) = -_16;
    _19 = &(*_44);
    _16 = _23.3.fld1 as f32;
    (*_9) = &_35;
    _57.0 = _17.2 as i64;
    _46.fld1 = _41;
    _23.3.fld0 = !_13;
    _20 = [_34,_36,_36,_6,_6,_6,_34];
    _61 = _17.2 | _41;
    _35 = Field::<u16>(Variant(_42.1, 1), 1);
    _57.2 = (_35, _40, Field::<u16>(Variant(_42.1, 1), 1), _40);
    Goto(bb43)
    }
    bb43 = {
    _56.3 = _23.1.0 as u16;
    _30.0.1 = 758391180_u32 as i64;
    _56.2 = (*_2) + (*_2);
    _57.2.1 = _57.2.3;
    _56.3 = _57.2.0 + _57.2.2;
    _56 = (_23.3, Move(_1.0), (*_2), _57.2.0);
    _36 = !_6;
    (*_9) = &_23.2.2;
    (*_9) = &_23.2.0;
    _57.0 = -Field::<i64>(Variant(_42.1, 1), 0);
    (*_2) = -_56.2;
    _25 = _54;
    _50 = _4 as u16;
    (*_9) = &_57.2.2;
    _51 = _57.2.3;
    _32 = [_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2,_30.0.2];
    _27 = &_2;
    _42.1 = Adt19::Variant1 { fld0: _46.fld0,fld1: _50 };
    Goto(bb44)
    }
    bb44 = {
    _46.fld3 = core::ptr::addr_of!(_31);
    _49 = [Field::<u16>(Variant(_42.1, 1), 1),_50];
    _1.0 = core::ptr::addr_of_mut!(_5);
    (*_2) = _56.2;
    _39 = &_50;
    (*_2) = _56.2 * _56.2;
    (*_2) = _56.2;
    _3 = core::ptr::addr_of_mut!(_4);
    (*_3) = _5 ^ _5;
    _63 = _13 ^ _57.3.fld0;
    _19 = Move(_44);
    _56.0 = Adt38 { fld0: _13,fld1: _57.1.0 };
    _23.1 = (_56.0.fld1,);
    (*_9) = &_23.2.0;
    (*_2) = -_56.2;
    _62 = (*_39) as isize;
    _54 = _25;
    (*_9) = &_56.3;
    match _30.0.2 {
    0 => bb16,
    1 => bb19,
    2 => bb34,
    11529572028866491005 => bb45,
    _ => bb18
    }
    }
    bb45 = {
    (*_2) = _56.2 * RET;
    _53 = _48 ^ _48;
    (*_3) = !_5;
    (*_2) = _56.2 + _56.2;
    (*_9) = &place!(Field::<u16>(Variant(_42.1, 1), 1));
    _17.2 = !_41;
    (*_3) = _5 | _5;
    match _30.0.2 {
    11529572028866491005 => bb46,
    _ => bb26
    }
    }
    bb46 = {
    (*_2) = _56.2 * _56.2;
    RET = (*_2) + (*_2);
    _23.2.0 = (*_39) >> (*_39);
    _4 = _5 - _5;
    (*_3) = _5 + _5;
    (*_2) = RET + _56.2;
    _68 = -(*_2);
    (*_9) = &_57.2.0;
    (*_9) = &_35;
    (*_9) = &_23.2.2;
    _48 = _56.0.fld0 as i128;
    (*_3) = _54 as i8;
    (*_9) = &_35;
    (*_2) = _56.2;
    (*_2) = RET - _68;
    (*_9) = &_23.2.0;
    _23.2.3 = _23.2.1;
    _9 = core::ptr::addr_of_mut!((*_9));
    _57.2.1 = _23.2.3;
    (*_9) = &place!(Field::<u16>(Variant(_42.1, 1), 1));
    _23.3.fld1 = _23.1.0 & _57.1.0;
    _3 = core::ptr::addr_of_mut!((*_3));
    _13 = (*_39) >= (*_39);
    Goto(bb47)
    }
    bb47 = {
    Call(_75 = dump_var(15_usize, 13_usize, Move(_13), 4_usize, Move(_4), 36_usize, Move(_36), 22_usize, Move(_22)), ReturnTo(bb48), UnwindUnreachable())
    }
    bb48 = {
    Call(_75 = dump_var(15_usize, 35_usize, Move(_35), 30_usize, Move(_30), 53_usize, Move(_53), 51_usize, Move(_51)), ReturnTo(bb49), UnwindUnreachable())
    }
    bb49 = {
    Call(_75 = dump_var(15_usize, 63_usize, Move(_63), 32_usize, Move(_32), 61_usize, Move(_61), 20_usize, Move(_20)), ReturnTo(bb50), UnwindUnreachable())
    }
    bb50 = {
    Call(_75 = dump_var(15_usize, 33_usize, Move(_33), 24_usize, Move(_24), 76_usize, _76, 76_usize, _76), ReturnTo(bb51), UnwindUnreachable())
    }
    bb51 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn16(
    mut _1: (*mut i8, f32),
    mut _2: i8,
    mut _3: *mut i8,
    mut _4: *mut f32,
    mut _5: isize,
    mut _6: isize,
    mut _7: isize,
    mut _8: isize,
    mut _9: isize,
    mut _10: f32,
    mut _11: isize,
    mut _12: isize,
) -> i8 {
    mir! {
    type RET = i8;
    let _13: [bool; 7];
    let _14: i8;
    let _15: &'static *mut &'static *mut f32;
    let _16: *mut (*mut i8, f32);
    let _17: u8;
    let _18: i64;
    let _19: Adt80;
    let _20: isize;
    let _21: bool;
    let _22: isize;
    let _23: [i16; 1];
    let _24: i32;
    let _25: i16;
    let _26: f32;
    let _27: f32;
    let _28: [i128; 3];
    let _29: *const f64;
    let _30: [bool; 7];
    let _31: isize;
    let _32: &'static mut i128;
    let _33: i64;
    let _34: *const isize;
    let _35: Adt77;
    let _36: char;
    let _37: bool;
    let _38: &'static mut *const usize;
    let _39: (u32, *mut i8, &'static mut &'static mut &'static mut i128, &'static *mut f32);
    let _40: *const f64;
    let _41: bool;
    let _42: (Adt38, *mut i8, f32, u16);
    let _43: *const (u16, char, u16, char);
    let _44: *const (u16, char, u16, char);
    let _45: *mut &'static *mut f32;
    let _46: ();
    let _47: ();
    {
    _7 = _6;
    _5 = -_6;
    _9 = _6 - _11;
    _4 = core::ptr::addr_of_mut!(_10);
    (*_4) = _1.1 * _1.1;
    _2 = (-76_i8) - (-97_i8);
    (*_4) = _1.1 + _1.1;
    (*_4) = _1.1 + _1.1;
    (*_4) = _1.1 * _1.1;
    (*_4) = _1.1 * _1.1;
    (*_4) = _1.1 * _1.1;
    _6 = 49573825091307256055600988013286072817_i128 as isize;
    _2 = 96_i8 + 95_i8;
    (*_4) = _1.1;
    _14 = _2 | _2;
    _5 = _9 * _8;
    (*_4) = _1.1 - _1.1;
    _2 = -_14;
    Goto(bb1)
    }
    bb1 = {
    (*_4) = -_1.1;
    (*_4) = _1.1 + _1.1;
    (*_4) = -_1.1;
    _9 = false as isize;
    _10 = 277071696772896144738577777125258051887_u128 as f32;
    (*_4) = _1.1 + _1.1;
    _1.1 = (*_4) * (*_4);
    _13 = [true,false,true,false,true,false,true];
    (*_4) = 25809_u16 as f32;
    _3 = core::ptr::addr_of_mut!(_14);
    (*_4) = 15536_i16 as f32;
    (*_3) = (*_4) as i8;
    _11 = !_9;
    (*_4) = _1.1 * _1.1;
    Call((*_3) = fn17(Move(_1), Move(_3), (*_4), _2, (*_4), Move(_4), _7, _6, (*_4), (*_4), (*_4)), ReturnTo(bb2), UnwindUnreachable())
    }
    bb2 = {
    _11 = '\u{4bdc2}' as isize;
    _4 = core::ptr::addr_of_mut!(_1.1);
    _2 = !_14;
    _16 = core::ptr::addr_of_mut!(_1);
    (*_16).1 = _10 + _10;
    _20 = _8 ^ _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _3 = core::ptr::addr_of_mut!(_2);
    (*_16) = (Move(_3), _10);
    (*_16).1 = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 * _10;
    _18 = (-3518206843765887797_i64) * 3707666924723080048_i64;
    _3 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = Move(_3);
    (*_4) = 41927_u16 as f32;
    (*_4) = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = -_10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    Goto(bb3)
    }
    bb3 = {
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _11 = 229359370466038739378765596155891703716_u128 as isize;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _1.0 = core::ptr::addr_of_mut!(_2);
    _6 = _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    RET = _14 * _2;
    _12 = 5_usize as isize;
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_4) = -_10;
    (*_4) = _10 - _10;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    Goto(bb4)
    }
    bb4 = {
    _6 = !_9;
    _1.0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10;
    _5 = _9 | _9;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _17 = 170_u8;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = -_10;
    RET = -_2;
    (*_4) = _10;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_4) = _17 as f32;
    RET = _14;
    RET = _14;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_4) = _10 * _10;
    _9 = _11 >> _20;
    _23 = [(-15121_i16)];
    _1.1 = -_10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    match _17 {
    170 => bb5,
    _ => bb2
    }
    }
    bb5 = {
    _9 = 229835896486139025911785244773055320297_u128 as isize;
    (*_4) = _10 + _10;
    (*_4) = _10 - _10;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = 50974_u16 as f32;
    (*_4) = 26153_i16 as f32;
    match _17 {
    0 => bb6,
    1 => bb7,
    2 => bb8,
    3 => bb9,
    4 => bb10,
    5 => bb11,
    170 => bb13,
    _ => bb12
    }
    }
    bb6 = {
    _6 = !_9;
    _1.0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10;
    _5 = _9 | _9;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _17 = 170_u8;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = -_10;
    RET = -_2;
    (*_4) = _10;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_4) = _17 as f32;
    RET = _14;
    RET = _14;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_4) = _10 * _10;
    _9 = _11 >> _20;
    _23 = [(-15121_i16)];
    _1.1 = -_10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    match _17 {
    170 => bb5,
    _ => bb2
    }
    }
    bb7 = {
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _11 = 229359370466038739378765596155891703716_u128 as isize;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _1.0 = core::ptr::addr_of_mut!(_2);
    _6 = _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    RET = _14 * _2;
    _12 = 5_usize as isize;
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_4) = -_10;
    (*_4) = _10 - _10;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    Goto(bb4)
    }
    bb8 = {
    _11 = '\u{4bdc2}' as isize;
    _4 = core::ptr::addr_of_mut!(_1.1);
    _2 = !_14;
    _16 = core::ptr::addr_of_mut!(_1);
    (*_16).1 = _10 + _10;
    _20 = _8 ^ _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _3 = core::ptr::addr_of_mut!(_2);
    (*_16) = (Move(_3), _10);
    (*_16).1 = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 * _10;
    _18 = (-3518206843765887797_i64) * 3707666924723080048_i64;
    _3 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = Move(_3);
    (*_4) = 41927_u16 as f32;
    (*_4) = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = -_10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    Goto(bb3)
    }
    bb9 = {
    (*_4) = -_1.1;
    (*_4) = _1.1 + _1.1;
    (*_4) = -_1.1;
    _9 = false as isize;
    _10 = 277071696772896144738577777125258051887_u128 as f32;
    (*_4) = _1.1 + _1.1;
    _1.1 = (*_4) * (*_4);
    _13 = [true,false,true,false,true,false,true];
    (*_4) = 25809_u16 as f32;
    _3 = core::ptr::addr_of_mut!(_14);
    (*_4) = 15536_i16 as f32;
    (*_3) = (*_4) as i8;
    _11 = !_9;
    (*_4) = _1.1 * _1.1;
    Call((*_3) = fn17(Move(_1), Move(_3), (*_4), _2, (*_4), Move(_4), _7, _6, (*_4), (*_4), (*_4)), ReturnTo(bb2), UnwindUnreachable())
    }
    bb10 = {
    Return()
    }
    bb11 = {
    Return()
    }
    bb12 = {
    Return()
    }
    bb13 = {
    _24 = -(-1993047286_i32);
    (*_4) = _10 - _10;
    _24 = 1472338115_i32 | 1817445016_i32;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _25 = 13538_i16 & 27645_i16;
    _5 = _8;
    Goto(bb14)
    }
    bb14 = {
    _14 = 63478322948981942746699267373359455882_i128 as i8;
    (*_4) = 3357870460_u32 as f32;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _1.0 = core::ptr::addr_of_mut!(RET);
    (*_4) = _10;
    _8 = _12;
    (*_4) = _10;
    _3 = Move((*_16).0);
    (*_16).0 = Move(_3);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _6 = _20 - _7;
    (*_4) = _10 + _10;
    (*_4) = _10 - _10;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _28 = [67443981188325727953728909899749395211_i128,104265751983751416595492847986211056039_i128,94047472363996069719698772412377250323_i128];
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _21 = !true;
    _3 = core::ptr::addr_of_mut!(RET);
    match _17 {
    0 => bb15,
    1 => bb16,
    2 => bb17,
    3 => bb18,
    4 => bb19,
    5 => bb20,
    170 => bb22,
    _ => bb21
    }
    }
    bb15 = {
    _24 = -(-1993047286_i32);
    (*_4) = _10 - _10;
    _24 = 1472338115_i32 | 1817445016_i32;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _25 = 13538_i16 & 27645_i16;
    _5 = _8;
    Goto(bb14)
    }
    bb16 = {
    _11 = '\u{4bdc2}' as isize;
    _4 = core::ptr::addr_of_mut!(_1.1);
    _2 = !_14;
    _16 = core::ptr::addr_of_mut!(_1);
    (*_16).1 = _10 + _10;
    _20 = _8 ^ _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _3 = core::ptr::addr_of_mut!(_2);
    (*_16) = (Move(_3), _10);
    (*_16).1 = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 * _10;
    _18 = (-3518206843765887797_i64) * 3707666924723080048_i64;
    _3 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = Move(_3);
    (*_4) = 41927_u16 as f32;
    (*_4) = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = -_10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    Goto(bb3)
    }
    bb17 = {
    Return()
    }
    bb18 = {
    (*_4) = -_1.1;
    (*_4) = _1.1 + _1.1;
    (*_4) = -_1.1;
    _9 = false as isize;
    _10 = 277071696772896144738577777125258051887_u128 as f32;
    (*_4) = _1.1 + _1.1;
    _1.1 = (*_4) * (*_4);
    _13 = [true,false,true,false,true,false,true];
    (*_4) = 25809_u16 as f32;
    _3 = core::ptr::addr_of_mut!(_14);
    (*_4) = 15536_i16 as f32;
    (*_3) = (*_4) as i8;
    _11 = !_9;
    (*_4) = _1.1 * _1.1;
    Call((*_3) = fn17(Move(_1), Move(_3), (*_4), _2, (*_4), Move(_4), _7, _6, (*_4), (*_4), (*_4)), ReturnTo(bb2), UnwindUnreachable())
    }
    bb19 = {
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _11 = 229359370466038739378765596155891703716_u128 as isize;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _1.0 = core::ptr::addr_of_mut!(_2);
    _6 = _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    RET = _14 * _2;
    _12 = 5_usize as isize;
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_4) = -_10;
    (*_4) = _10 - _10;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    Goto(bb4)
    }
    bb20 = {
    _11 = '\u{4bdc2}' as isize;
    _4 = core::ptr::addr_of_mut!(_1.1);
    _2 = !_14;
    _16 = core::ptr::addr_of_mut!(_1);
    (*_16).1 = _10 + _10;
    _20 = _8 ^ _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _3 = core::ptr::addr_of_mut!(_2);
    (*_16) = (Move(_3), _10);
    (*_16).1 = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 * _10;
    _18 = (-3518206843765887797_i64) * 3707666924723080048_i64;
    _3 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = Move(_3);
    (*_4) = 41927_u16 as f32;
    (*_4) = _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = -_10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    Goto(bb3)
    }
    bb21 = {
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _11 = 229359370466038739378765596155891703716_u128 as isize;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _1.0 = core::ptr::addr_of_mut!(_2);
    _6 = _11;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    RET = _14 * _2;
    _12 = 5_usize as isize;
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_4) = -_10;
    (*_4) = _10 - _10;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10 + _10;
    Goto(bb4)
    }
    bb22 = {
    _8 = _20;
    (*_4) = _10 + _10;
    _28 = [67864073072737446966919433609900577795_i128,(-37502864612042206745694882021466033203_i128),(-108053831934988808084790247885728828765_i128)];
    _28 = [(-15182136272902571763253879069099665081_i128),(-71789190899539122810011563670140682709_i128),(-11490080642606201868761308703131355416_i128)];
    (*_4) = _10 - _10;
    _25 = 87385312548696853761947078321452797595_i128 as i16;
    (*_16).0 = core::ptr::addr_of_mut!((*_3));
    (*_3) = _14 & _14;
    (*_3) = '\u{5f9de}' as i8;
    (*_4) = -_10;
    (*_16).0 = core::ptr::addr_of_mut!((*_3));
    (*_4) = _10 * _10;
    (*_4) = 48974_u16 as f32;
    _10 = (*_4) + (*_4);
    (*_3) = 14116_u16 as i8;
    (*_4) = _10;
    (*_16).0 = core::ptr::addr_of_mut!((*_3));
    (*_3) = _2 * _2;
    (*_4) = -_10;
    Goto(bb23)
    }
    bb23 = {
    (*_4) = _10 * _10;
    Goto(bb24)
    }
    bb24 = {
    (*_16).0 = core::ptr::addr_of_mut!((*_3));
    (*_3) = _24 as i8;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _26 = 155375086957638277178316984152304590402_u128 as f32;
    (*_3) = _24 as i8;
    (*_4) = -_26;
    (*_4) = _26 + _26;
    (*_3) = _14 * _14;
    (*_3) = _2 - _2;
    (*_16).0 = Move(_3);
    _31 = _6 >> _24;
    _3 = Move((*_16).0);
    _30 = [_21,_21,_21,_21,_21,_21,_21];
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    _20 = _12 * _12;
    _13 = [_21,_21,_21,_21,_21,_21,_21];
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _26 + _26;
    Goto(bb25)
    }
    bb25 = {
    _16 = core::ptr::addr_of_mut!(_1);
    _22 = _8 - _6;
    _11 = _5 ^ _12;
    (*_4) = _10 + _26;
    _8 = !_22;
    (*_4) = -_26;
    _26 = -(*_4);
    (*_4) = -_26;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_4) = _26;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_4) = -_10;
    _37 = _21;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _27 = (*_4) + (*_4);
    _1.0 = core::ptr::addr_of_mut!(_2);
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    Goto(bb26)
    }
    bb26 = {
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_4) = -_27;
    _1 = (Move(_3), _27);
    _7 = _22 * _31;
    _8 = _18 as isize;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _1.1 = _26 + _27;
    _5 = (-61818561450863620963057923628194102587_i128) as isize;
    _37 = _21;
    _31 = 20407711151573439260159013370289830555_u128 as isize;
    _33 = _18;
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    (*_16).0 = core::ptr::addr_of_mut!(_14);
    _16 = core::ptr::addr_of_mut!(_1);
    _8 = _7 << _7;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _11 = _31;
    match _17 {
    170 => bb27,
    _ => bb19
    }
    }
    bb27 = {
    _41 = _37 & _21;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).1 = _10 + _27;
    (*_16).1 = 2503663755_u32 as f32;
    (*_4) = _27 - _10;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _36 = '\u{473c0}';
    _21 = _37 | _37;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = 6510_u16 as f32;
    (*_4) = -_27;
    _18 = _33 >> _31;
    _24 = (-1671407885_i32) >> _8;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _7 = !_22;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _39.3 = &_4;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_4) = _24 as f32;
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _14 = _2 << _8;
    _45 = core::ptr::addr_of_mut!(_39.3);
    match _17 {
    0 => bb13,
    170 => bb28,
    _ => bb12
    }
    }
    bb28 = {
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _10;
    _42.0.fld0 = _21 ^ _41;
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    (*_4) = _25 as f32;
    _42.0 = Adt38 { fld0: _41,fld1: _17 };
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    (*_4) = 232379877159798821942107409560563018034_u128 as f32;
    _45 = core::ptr::addr_of_mut!((*_45));
    (*_16).0 = core::ptr::addr_of_mut!(_2);
    _42.3 = !60536_u16;
    _3 = core::ptr::addr_of_mut!(RET);
    (*_16).0 = core::ptr::addr_of_mut!(RET);
    _14 = RET * (*_3);
    _24 = 462097654_i32 << RET;
    (*_4) = _10 + _27;
    (*_16).0 = core::ptr::addr_of_mut!((*_3));
    (*_4) = 5_usize as f32;
    (*_3) = _25 as i8;
    (*_3) = _2 * _14;
    _42.0.fld1 = _17 | _17;
    (*_3) = _14 << _8;
    (*_16).0 = Move(_3);
    (*_4) = _27 * _10;
    Goto(bb29)
    }
    bb29 = {
    Call(_46 = dump_var(16_usize, 14_usize, Move(_14), 22_usize, Move(_22), 12_usize, Move(_12), 6_usize, Move(_6)), ReturnTo(bb30), UnwindUnreachable())
    }
    bb30 = {
    Call(_46 = dump_var(16_usize, 36_usize, Move(_36), 5_usize, Move(_5), 9_usize, Move(_9), 18_usize, Move(_18)), ReturnTo(bb31), UnwindUnreachable())
    }
    bb31 = {
    Call(_46 = dump_var(16_usize, 30_usize, Move(_30), 17_usize, Move(_17), 33_usize, Move(_33), 21_usize, Move(_21)), ReturnTo(bb32), UnwindUnreachable())
    }
    bb32 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn17(
    mut _1: (*mut i8, f32),
    mut _2: *mut i8,
    mut _3: f32,
    mut _4: i8,
    mut _5: f32,
    mut _6: *mut f32,
    mut _7: isize,
    mut _8: isize,
    mut _9: f32,
    mut _10: f32,
    mut _11: f32,
) -> i8 {
    mir! {
    type RET = i8;
    let _12: f64;
    let _13: f64;
    let _14: *mut &'static mut i128;
    let _15: (Adt38, *mut i8, f32, u16);
    let _16: isize;
    let _17: isize;
    let _18: *const isize;
    let _19: isize;
    let _20: f32;
    let _21: &'static u16;
    let _22: bool;
    let _23: [usize; 6];
    let _24: bool;
    let _25: &'static mut u32;
    let _26: u64;
    let _27: i32;
    let _28: *const (u16, char, u16, char);
    let _29: &'static &'static i32;
    let _30: Adt31;
    let _31: (u32, *mut i8, &'static mut &'static mut &'static mut i128, &'static *mut f32);
    let _32: isize;
    let _33: bool;
    let _34: *mut *mut u128;
    let _35: (Adt73, Adt19, Adt73, (Adt38, *mut i8, f32, u16));
    let _36: [u16; 2];
    let _37: (*mut i8, f32);
    let _38: [char; 3];
    let _39: (i64, i8, &'static mut u32);
    let _40: f32;
    let _41: [u64; 3];
    let _42: *mut *const (u16, char, u16, char);
    let _43: char;
    let _44: char;
    let _45: [i16; 1];
    let _46: Adt19;
    let _47: (i16, &'static mut *const usize, *mut *mut u128);
    let _48: isize;
    let _49: [u32; 7];
    let _50: [u16; 2];
    let _51: (*const Adt19, (u8,), isize);
    let _52: char;
    let _53: f32;
    let _54: u128;
    let _55: i8;
    let _56: f64;
    let _57: &'static u16;
    let _58: bool;
    let _59: *const u32;
    let _60: *const &'static *mut &'static *mut f32;
    let _61: Adt19;
    let _62: [u64; 6];
    let _63: u32;
    let _64: u128;
    let _65: isize;
    let _66: bool;
    let _67: *const isize;
    let _68: f32;
    let _69: char;
    let _70: (i16, &'static mut *const usize, *mut *mut u128);
    let _71: Adt77;
    let _72: *const &'static *mut &'static *mut f32;
    let _73: [bool; 7];
    let _74: &'static *const u32;
    let _75: i32;
    let _76: &'static u16;
    let _77: u16;
    let _78: &'static mut u32;
    let _79: *const (u16, char, u16, char);
    let _80: *mut *mut u128;
    let _81: *const &'static *mut &'static *mut f32;
    let _82: (*mut i8, f32);
    let _83: &'static mut *const usize;
    let _84: f32;
    let _85: (*mut &'static *mut f32, Adt19, usize);
    let _86: *mut &'static mut i128;
    let _87: [u64; 3];
    let _88: Adt27;
    let _89: u16;
    let _90: ();
    let _91: ();
    {
    _3 = _11;
    RET = _4 - _4;
    Call(_7 = fn18(Move(_2), _3, Move(_1), Move(_6), _9, RET, _11, _8, _10), ReturnTo(bb1), UnwindUnreachable())
    }
    bb1 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb2 = {
    _18 = core::ptr::addr_of!(_16);
    (*_6) = _1.1 - _10;
    (*_18) = 2159146540949227507_i64 as isize;
    (*_18) = _8;
    _18 = core::ptr::addr_of!((*_18));
    (*_18) = !_7;
    (*_6) = -_9;
    (*_18) = _8 - _7;
    (*_18) = 18417376336186477090_u64 as isize;
    _18 = core::ptr::addr_of!(_8);
    (*_6) = _9 + _3;
    (*_18) = _7;
    _15.3 = 7373_u16 & 13291_u16;
    _19 = _16;
    (*_6) = 20414069440770649064391168309833898421_u128 as f32;
    (*_6) = -_11;
    _15.2 = (*_6) * (*_6);
    (*_6) = _10 + _9;
    (*_18) = _7 ^ _16;
    (*_6) = _1.1 + _15.2;
    _1.0 = core::ptr::addr_of_mut!(RET);
    Goto(bb3)
    }
    bb3 = {
    _15.2 = (*_6) + (*_6);
    (*_6) = _15.2 - _10;
    Call(RET = core::intrinsics::transmute(_4), ReturnTo(bb4), UnwindUnreachable())
    }
    bb4 = {
    _2 = Move(_1.0);
    (*_18) = _19;
    _3 = (*_6) - (*_6);
    (*_6) = _3 + _3;
    RET = _4;
    (*_18) = !_7;
    _22 = !true;
    (*_6) = _10 - _15.2;
    _5 = -_10;
    _5 = _15.2;
    _3 = -(*_6);
    (*_6) = -_10;
    _24 = !_22;
    (*_6) = 1573711409_i32 as f32;
    _26 = !12969772690273302769_u64;
    _15.0 = Adt38 { fld0: _22,fld1: 150_u8 };
    match _15.0.fld1 {
    0 => bb1,
    1 => bb3,
    2 => bb5,
    3 => bb6,
    4 => bb7,
    5 => bb8,
    150 => bb10,
    _ => bb9
    }
    }
    bb5 = {
    _15.2 = (*_6) + (*_6);
    (*_6) = _15.2 - _10;
    Call(RET = core::intrinsics::transmute(_4), ReturnTo(bb4), UnwindUnreachable())
    }
    bb6 = {
    _18 = core::ptr::addr_of!(_16);
    (*_6) = _1.1 - _10;
    (*_18) = 2159146540949227507_i64 as isize;
    (*_18) = _8;
    _18 = core::ptr::addr_of!((*_18));
    (*_18) = !_7;
    (*_6) = -_9;
    (*_18) = _8 - _7;
    (*_18) = 18417376336186477090_u64 as isize;
    _18 = core::ptr::addr_of!(_8);
    (*_6) = _9 + _3;
    (*_18) = _7;
    _15.3 = 7373_u16 & 13291_u16;
    _19 = _16;
    (*_6) = 20414069440770649064391168309833898421_u128 as f32;
    (*_6) = -_11;
    _15.2 = (*_6) * (*_6);
    (*_6) = _10 + _9;
    (*_18) = _7 ^ _16;
    (*_6) = _1.1 + _15.2;
    _1.0 = core::ptr::addr_of_mut!(RET);
    Goto(bb3)
    }
    bb7 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb8 = {
    Return()
    }
    bb9 = {
    Return()
    }
    bb10 = {
    _9 = _3;
    _1.0 = core::ptr::addr_of_mut!(RET);
    _27 = !(-1826171323_i32);
    _26 = 8411265864310005263_u64 + 1262614110224048616_u64;
    _15.2 = _3 - _9;
    RET = '\u{27d6c}' as i8;
    _15.1 = Move(_2);
    _31.3 = &_6;
    _7 = (*_18);
    (*_18) = _26 as isize;
    _12 = 157236115354611875979434078485247500095_i128 as f64;
    _31.1 = core::ptr::addr_of_mut!(_4);
    _15.1 = core::ptr::addr_of_mut!(_4);
    _1 = (Move(_15.1), (*_6));
    _15.2 = (*_6) + _9;
    (*_18) = 308608208170086427387140615139376930729_u128 as isize;
    _17 = _15.0.fld1 as isize;
    (*_18) = _16 + _7;
    _20 = -_9;
    (*_6) = (-18238195321080707135682470721901445269_i128) as f32;
    match _15.0.fld1 {
    0 => bb6,
    1 => bb11,
    2 => bb12,
    3 => bb13,
    4 => bb14,
    5 => bb15,
    150 => bb17,
    _ => bb16
    }
    }
    bb11 = {
    _18 = core::ptr::addr_of!(_16);
    (*_6) = _1.1 - _10;
    (*_18) = 2159146540949227507_i64 as isize;
    (*_18) = _8;
    _18 = core::ptr::addr_of!((*_18));
    (*_18) = !_7;
    (*_6) = -_9;
    (*_18) = _8 - _7;
    (*_18) = 18417376336186477090_u64 as isize;
    _18 = core::ptr::addr_of!(_8);
    (*_6) = _9 + _3;
    (*_18) = _7;
    _15.3 = 7373_u16 & 13291_u16;
    _19 = _16;
    (*_6) = 20414069440770649064391168309833898421_u128 as f32;
    (*_6) = -_11;
    _15.2 = (*_6) * (*_6);
    (*_6) = _10 + _9;
    (*_18) = _7 ^ _16;
    (*_6) = _1.1 + _15.2;
    _1.0 = core::ptr::addr_of_mut!(RET);
    Goto(bb3)
    }
    bb12 = {
    _15.2 = (*_6) + (*_6);
    (*_6) = _15.2 - _10;
    Call(RET = core::intrinsics::transmute(_4), ReturnTo(bb4), UnwindUnreachable())
    }
    bb13 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb14 = {
    _18 = core::ptr::addr_of!(_16);
    (*_6) = _1.1 - _10;
    (*_18) = 2159146540949227507_i64 as isize;
    (*_18) = _8;
    _18 = core::ptr::addr_of!((*_18));
    (*_18) = !_7;
    (*_6) = -_9;
    (*_18) = _8 - _7;
    (*_18) = 18417376336186477090_u64 as isize;
    _18 = core::ptr::addr_of!(_8);
    (*_6) = _9 + _3;
    (*_18) = _7;
    _15.3 = 7373_u16 & 13291_u16;
    _19 = _16;
    (*_6) = 20414069440770649064391168309833898421_u128 as f32;
    (*_6) = -_11;
    _15.2 = (*_6) * (*_6);
    (*_6) = _10 + _9;
    (*_18) = _7 ^ _16;
    (*_6) = _1.1 + _15.2;
    _1.0 = core::ptr::addr_of_mut!(RET);
    Goto(bb3)
    }
    bb15 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb16 = {
    _2 = Move(_1.0);
    (*_18) = _19;
    _3 = (*_6) - (*_6);
    (*_6) = _3 + _3;
    RET = _4;
    (*_18) = !_7;
    _22 = !true;
    (*_6) = _10 - _15.2;
    _5 = -_10;
    _5 = _15.2;
    _3 = -(*_6);
    (*_6) = -_10;
    _24 = !_22;
    (*_6) = 1573711409_i32 as f32;
    _26 = !12969772690273302769_u64;
    _15.0 = Adt38 { fld0: _22,fld1: 150_u8 };
    match _15.0.fld1 {
    0 => bb1,
    1 => bb3,
    2 => bb5,
    3 => bb6,
    4 => bb7,
    5 => bb8,
    150 => bb10,
    _ => bb9
    }
    }
    bb17 = {
    (*_18) = _7;
    _23 = [16370035527505476246_usize,4_usize,10321265497025254167_usize,8645949567768149300_usize,375700681640708006_usize,18199710116957063715_usize];
    (*_18) = _17 & _17;
    _32 = (*_18) & (*_18);
    (*_6) = -_9;
    (*_18) = _17 + _32;
    _1 = (Move(_31.1), (*_6));
    (*_18) = _16;
    (*_6) = _20 + _1.1;
    (*_6) = 7_usize as f32;
    (*_6) = _1.1;
    match _15.0.fld1 {
    150 => bb19,
    _ => bb18
    }
    }
    bb18 = {
    _2 = Move(_1.0);
    (*_18) = _19;
    _3 = (*_6) - (*_6);
    (*_6) = _3 + _3;
    RET = _4;
    (*_18) = !_7;
    _22 = !true;
    (*_6) = _10 - _15.2;
    _5 = -_10;
    _5 = _15.2;
    _3 = -(*_6);
    (*_6) = -_10;
    _24 = !_22;
    (*_6) = 1573711409_i32 as f32;
    _26 = !12969772690273302769_u64;
    _15.0 = Adt38 { fld0: _22,fld1: 150_u8 };
    match _15.0.fld1 {
    0 => bb1,
    1 => bb3,
    2 => bb5,
    3 => bb6,
    4 => bb7,
    5 => bb8,
    150 => bb10,
    _ => bb9
    }
    }
    bb19 = {
    _26 = 13290672985508982901_u64 & 9654358423855078239_u64;
    (*_6) = 1280672248_u32 as f32;
    _22 = _15.0.fld0;
    _35.0.fld1 = 2171184389_u32 as usize;
    _17 = (*_18) + (*_18);
    (*_6) = _15.2 - _10;
    _35.0.fld2 = [_26,_26,_26,_26,_26,_26];
    _19 = (*_18);
    _6 = core::ptr::addr_of_mut!((*_6));
    _35.0.fld0 = (-615354211377158649_i64) ^ (-1909618651038398674_i64);
    _15.3 = 18498_u16;
    _35.3.2 = -(*_6);
    (*_6) = -_20;
    (*_6) = _15.2 * _10;
    (*_18) = _32 * _7;
    (*_18) = !_32;
    _20 = _35.0.fld0 as f32;
    (*_18) = _32;
    _16 = (*_18);
    _27 = 847906159_i32;
    _15.3 = !26500_u16;
    _3 = -(*_6);
    _15.1 = core::ptr::addr_of_mut!(_4);
    (*_18) = -_16;
    match _27 {
    0 => bb20,
    847906159 => bb22,
    _ => bb21
    }
    }
    bb20 = {
    _18 = core::ptr::addr_of!(_16);
    (*_6) = _1.1 - _10;
    (*_18) = 2159146540949227507_i64 as isize;
    (*_18) = _8;
    _18 = core::ptr::addr_of!((*_18));
    (*_18) = !_7;
    (*_6) = -_9;
    (*_18) = _8 - _7;
    (*_18) = 18417376336186477090_u64 as isize;
    _18 = core::ptr::addr_of!(_8);
    (*_6) = _9 + _3;
    (*_18) = _7;
    _15.3 = 7373_u16 & 13291_u16;
    _19 = _16;
    (*_6) = 20414069440770649064391168309833898421_u128 as f32;
    (*_6) = -_11;
    _15.2 = (*_6) * (*_6);
    (*_6) = _10 + _9;
    (*_18) = _7 ^ _16;
    (*_6) = _1.1 + _15.2;
    _1.0 = core::ptr::addr_of_mut!(RET);
    Goto(bb3)
    }
    bb21 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb22 = {
    (*_6) = _15.2 - _15.2;
    (*_18) = _16;
    _18 = core::ptr::addr_of!((*_18));
    (*_6) = _1.1;
    _35.1 = Adt19::Variant1 { fld0: _35.0.fld0,fld1: _15.3 };
    (*_6) = 211263793179599337539273334658429693804_u128 as f32;
    _35.3.0.fld0 = _1.1 > _3;
    _35.2.fld2 = _35.0.fld2;
    (*_18) = _32 - _16;
    _17 = (*_18);
    _37.1 = _3 + _15.2;
    Goto(bb23)
    }
    bb23 = {
    _2 = Move(_1.0);
    _37.0 = core::ptr::addr_of_mut!(RET);
    _37.0 = core::ptr::addr_of_mut!(RET);
    _38 = ['\u{2b09f}','\u{2a45f}','\u{8b3c6}'];
    _35.2.fld0 = _35.0.fld0 * _35.0.fld0;
    _35.3.0 = _15.0;
    _35.2.fld1 = _35.0.fld1;
    _15.1 = Move(_37.0);
    (*_6) = _10 * _15.2;
    _1.1 = -(*_6);
    (*_18) = -_17;
    _16 = !(*_18);
    _45 = [(-5162_i16)];
    _36 = [Field::<u16>(Variant(_35.1, 1), 1),Field::<u16>(Variant(_35.1, 1), 1)];
    (*_6) = _37.1 * _1.1;
    (*_18) = _17;
    match _27 {
    0 => bb19,
    1 => bb9,
    847906159 => bb24,
    _ => bb7
    }
    }
    bb24 = {
    (*_6) = (*_18) as f32;
    _37.0 = core::ptr::addr_of_mut!(_4);
    _40 = _9;
    _35.2.fld0 = _17 as i64;
    _35.0.fld3 = core::ptr::addr_of!(_31.0);
    (*_6) = _3;
    _20 = -(*_6);
    (*_6) = _37.1;
    _7 = '\u{f1b53}' as isize;
    (*_18) = _17 - _16;
    _15.0.fld0 = _24;
    _8 = _17 << _16;
    _40 = _35.3.2;
    match _35.3.0.fld1 {
    150 => bb26,
    _ => bb25
    }
    }
    bb25 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb26 = {
    _31.0 = !523229660_u32;
    _51.0 = core::ptr::addr_of!(_46);
    (*_6) = -_40;
    _35.2.fld2 = [_26,_26,_26,_26,_26,_26];
    _35.2.fld3 = core::ptr::addr_of!(_31.0);
    _12 = _35.3.0.fld1 as f64;
    _56 = -_12;
    (*_6) = _1.1;
    _15.1 = Move(_2);
    _39.0 = _35.2.fld0 - Field::<i64>(Variant(_35.1, 1), 0);
    _15.3 = Field::<u16>(Variant(_35.1, 1), 1) | Field::<u16>(Variant(_35.1, 1), 1);
    _33 = (*_6) <= _15.2;
    _31.1 = Move(_15.1);
    _35.1 = Adt19::Variant0 { fld0: _9 };
    _35.3.3 = _15.3 + _15.3;
    _43 = '\u{2549a}';
    (*_18) = -_32;
    _15.0.fld0 = !_33;
    _22 = Field::<f32>(Variant(_35.1, 0), 0) != (*_6);
    _39.1 = _31.0 as i8;
    _40 = (*_6) + _1.1;
    match _35.3.0.fld1 {
    0 => bb13,
    150 => bb27,
    _ => bb22
    }
    }
    bb27 = {
    _47.0 = (-28272_i16);
    _44 = _43;
    _55 = _39.0 as i8;
    _35.2.fld3 = core::ptr::addr_of!(_31.0);
    _52 = _43;
    _1 = (Move(_37.0), _5);
    (*_18) = _17 | _17;
    Goto(bb28)
    }
    bb28 = {
    _54 = 297848483311346658270234764354465460734_u128 << _35.2.fld0;
    _39.2 = &mut _31.0;
    _46 = Adt19::Variant0 { fld0: _5 };
    _5 = _15.2 - _37.1;
    _3 = _35.3.0.fld1 as f32;
    (*_18) = _55 as isize;
    Goto(bb29)
    }
    bb29 = {
    _37.1 = (*_6) - (*_6);
    _49 = [3758830395_u32,1968049561_u32,720441735_u32,1640046549_u32,767626887_u32,1231771082_u32,2448380104_u32];
    _48 = -_17;
    (*_6) = -_9;
    _35.3.1 = Move(_1.0);
    _42 = core::ptr::addr_of_mut!(_28);
    _6 = core::ptr::addr_of_mut!((*_6));
    _37.0 = Move(_35.3.1);
    _36 = [_35.3.3,_15.3];
    (*_6) = _35.3.2;
    _35.3.1 = core::ptr::addr_of_mut!(_4);
    _32 = (*_18) | (*_18);
    (*_6) = _37.1 * _35.3.2;
    (*_18) = _16 - _32;
    _61 = Adt19::Variant1 { fld0: _35.2.fld0,fld1: _15.3 };
    _39.1 = -_55;
    (*_6) = -_1.1;
    _51.2 = (*_18);
    _2 = core::ptr::addr_of_mut!(_39.1);
    _50 = [_15.3,Field::<u16>(Variant(_61, 1), 1)];
    (*_6) = -Field::<f32>(Variant(_46, 0), 0);
    _59 = core::ptr::addr_of!(_63);
    match _47.0 {
    0 => bb30,
    1 => bb31,
    2 => bb32,
    340282366920938463463374607431768183184 => bb34,
    _ => bb33
    }
    }
    bb30 = {
    _15.2 = (*_6) + (*_6);
    (*_6) = _15.2 - _10;
    Call(RET = core::intrinsics::transmute(_4), ReturnTo(bb4), UnwindUnreachable())
    }
    bb31 = {
    Return()
    }
    bb32 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb33 = {
    _18 = core::ptr::addr_of!(_16);
    (*_6) = _1.1 - _10;
    (*_18) = 2159146540949227507_i64 as isize;
    (*_18) = _8;
    _18 = core::ptr::addr_of!((*_18));
    (*_18) = !_7;
    (*_6) = -_9;
    (*_18) = _8 - _7;
    (*_18) = 18417376336186477090_u64 as isize;
    _18 = core::ptr::addr_of!(_8);
    (*_6) = _9 + _3;
    (*_18) = _7;
    _15.3 = 7373_u16 & 13291_u16;
    _19 = _16;
    (*_6) = 20414069440770649064391168309833898421_u128 as f32;
    (*_6) = -_11;
    _15.2 = (*_6) * (*_6);
    (*_6) = _10 + _9;
    (*_18) = _7 ^ _16;
    (*_6) = _1.1 + _15.2;
    _1.0 = core::ptr::addr_of_mut!(RET);
    Goto(bb3)
    }
    bb34 = {
    _17 = _43 as isize;
    (*_59) = !3172256353_u32;
    (*_2) = _55 >> (*_18);
    _15.1 = Move(_35.3.1);
    (*_2) = _55 | _55;
    place!(Field::<i64>(Variant(_61, 1), 0)) = _56 as i64;
    _36 = [_15.3,_35.3.3];
    (*_2) = _55 - _55;
    (*_6) = _1.1 - _15.2;
    Goto(bb35)
    }
    bb35 = {
    _8 = _16 * _32;
    _9 = _40 * (*_6);
    (*_6) = _9 + _37.1;
    (*_2) = _55 >> (*_18);
    _51.1.0 = _35.3.0.fld1 % _35.3.0.fld1;
    Goto(bb36)
    }
    bb36 = {
    _35.3 = Move(_15);
    _35.1 = Adt19::Variant1 { fld0: _39.0,fld1: _35.3.3 };
    _19 = !(*_18);
    Goto(bb37)
    }
    bb37 = {
    _25 = &mut (*_59);
    (*_6) = Field::<f32>(Variant(_46, 0), 0);
    (*_2) = _55 | _55;
    _66 = (*_18) <= (*_18);
    (*_18) = _19;
    (*_6) = _1.1;
    _51.0 = core::ptr::addr_of!(_35.1);
    (*_25) = !933649560_u32;
    _40 = (*_6);
    _56 = _35.2.fld0 as f64;
    (*_2) = RET ^ _55;
    _65 = (*_25) as isize;
    match _27 {
    0 => bb25,
    1 => bb26,
    2 => bb35,
    3 => bb17,
    4 => bb28,
    5 => bb38,
    847906159 => bb40,
    _ => bb39
    }
    }
    bb38 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb39 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb40 = {
    _71 = Adt77::Variant1 { fld0: _45,fld1: Move(_2),fld2: _50 };
    _70.0 = _47.0 + _47.0;
    (*_6) = _40;
    (*_18) = -_19;
    _18 = core::ptr::addr_of!(_19);
    _42 = core::ptr::addr_of_mut!((*_42));
    (*_25) = !1230352774_u32;
    place!(Field::<*mut i8>(Variant(_71, 1), 1)) = core::ptr::addr_of_mut!(_39.1);
    _35.2.fld3 = Move(_35.0.fld3);
    _26 = 10279651711679782147_u64;
    (*_25) = 1676562078_u32 + 1908491896_u32;
    (*_6) = _26 as f32;
    _65 = (*_18) | (*_18);
    place!(Field::<*mut i8>(Variant(_71, 1), 1)) = Move(_35.3.1);
    _35.2.fld3 = Move(_59);
    _44 = _43;
    _51.1.0 = _35.3.0.fld1 << (*_18);
    _65 = (*_18);
    (*_6) = -_40;
    _2 = core::ptr::addr_of_mut!(_4);
    _48 = (*_18) & _8;
    _44 = _52;
    match _47.0 {
    0 => bb34,
    340282366920938463463374607431768183184 => bb41,
    _ => bb3
    }
    }
    bb41 = {
    _40 = (*_6) * (*_6);
    (*_18) = _65;
    _35.3.2 = (*_6);
    _19 = !_51.2;
    (*_25) = 1610276623_u32;
    (*_6) = _35.3.2 * _37.1;
    _35.2.fld0 = _56 as i64;
    (*_25) = 40174877_u32;
    (*_6) = _40 + _35.3.2;
    Goto(bb42)
    }
    bb42 = {
    (*_2) = _39.1 & _39.1;
    _64 = _54;
    (*_2) = _39.1 >> _32;
    (*_18) = _48 & _48;
    (*_25) = _27 as u32;
    _38 = [_52,_43,_44];
    _21 = &_35.3.3;
    (*_2) = _39.1 << (*_18);
    _26 = 4860093386063193714_u64 + 11706951585906662206_u64;
    Goto(bb43)
    }
    bb43 = {
    place!(Field::<f32>(Variant(_46, 0), 0)) = -(*_6);
    (*_18) = _48 ^ _48;
    _76 = &(*_21);
    (*_2) = (-35686213745917088684411585252305026032_i128) as i8;
    _6 = core::ptr::addr_of_mut!((*_6));
    _74 = &_35.2.fld3;
    _1.1 = -_9;
    _69 = _44;
    _36 = [(*_76),(*_21)];
    _59 = core::ptr::addr_of!((*_25));
    (*_6) = _40 + _37.1;
    _77 = 13163751985079836495723062963464285450_i128 as u16;
    _62 = [_26,_26,_26,_26,_26,_26];
    _35.1 = Move(_46);
    _35.3.0.fld1 = _51.1.0 ^ _51.1.0;
    _73 = [_35.3.0.fld0,_33,_33,_22,_66,_66,_33];
    _15.0.fld0 = _22 | _66;
    (*_25) = 1581033262_u32 | 3862626062_u32;
    _41 = [_26,_26,_26];
    Goto(bb44)
    }
    bb44 = {
    (*_25) = 2694009108_u32 - 490975129_u32;
    _25 = Move(_39.2);
    (*_6) = _35.3.2 * _1.1;
    _3 = (-169988829964147714041486052718546525870_i128) as f32;
    (*_2) = _55 | _39.1;
    (*_6) = _1.1 + _9;
    Goto(bb45)
    }
    bb45 = {
    (*_2) = _55 + _39.1;
    _6 = core::ptr::addr_of_mut!((*_6));
    place!(Field::<u16>(Variant(_61, 1), 1)) = (*_76) ^ (*_76);
    (*_2) = 626742592_u32 as i8;
    _26 = _43 as u64;
    (*_2) = !_39.1;
    _21 = Move(_76);
    _68 = (*_6) + (*_6);
    Goto(bb46)
    }
    bb46 = {
    (*_2) = _35.3.0.fld1 as i8;
    (*_6) = _40;
    _22 = !_35.3.0.fld0;
    _13 = _56 - _56;
    match _27 {
    0 => bb7,
    1 => bb31,
    847906159 => bb48,
    _ => bb47
    }
    }
    bb47 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb48 = {
    (*_2) = _55 & _39.1;
    _32 = (*_18);
    _35.0.fld3 = Move(_35.2.fld3);
    (*_2) = _55 >> (*_18);
    _11 = (*_2) as f32;
    (*_18) = _32;
    _11 = -(*_6);
    _35.1 = Adt19::Variant0 { fld0: (*_6) };
    _19 = _35.0.fld1 as isize;
    _33 = (*_2) < (*_2);
    _37.0 = core::ptr::addr_of_mut!((*_2));
    _35.2 = Move(_35.0);
    place!(Field::<[i16; 1]>(Variant(_71, 1), 0)) = [_70.0];
    _2 = core::ptr::addr_of_mut!((*_2));
    _23 = [_35.2.fld1,_35.2.fld1,_35.2.fld1,_35.2.fld1,_35.2.fld1,_35.2.fld1];
    _19 = _8 & _32;
    _57 = &_35.3.3;
    (*_6) = _1.1;
    (*_6) = _11 - _40;
    _11 = _5 * (*_6);
    _15.3 = (*_57) * (*_57);
    place!(Field::<[i16; 1]>(Variant(_71, 1), 0)) = _45;
    _66 = (*_6) > (*_6);
    _85.1 = Adt19::Variant0 { fld0: _5 };
    _85.2 = _35.2.fld1 ^ _35.2.fld1;
    _35.3.2 = -(*_6);
    match _47.0 {
    0 => bb33,
    1 => bb16,
    2 => bb38,
    3 => bb20,
    4 => bb45,
    5 => bb26,
    340282366920938463463374607431768183184 => bb50,
    _ => bb49
    }
    }
    bb49 = {
    RET = _7 as i8;
    _1.1 = (-152462798229092885725754658766121658198_i128) as f32;
    _1.1 = -_11;
    _4 = -RET;
    _9 = -_3;
    _6 = core::ptr::addr_of_mut!(_5);
    Goto(bb2)
    }
    bb50 = {
    _39.1 = _85.2 as i8;
    _35.0 = Adt73 { fld0: _39.0,fld1: _85.2,fld2: _35.2.fld2,fld3: Move(_59) };
    _75 = _27;
    _66 = (*_2) <= (*_2);
    _39.1 = (*_2);
    _84 = -Field::<f32>(Variant(_85.1, 0), 0);
    (*_2) = !_39.1;
    place!(Field::<u16>(Variant(_61, 1), 1)) = (*_57) + (*_57);
    _49 = [186717302_u32,1018886058_u32,869283522_u32,1874473255_u32,2379936914_u32,2984482045_u32,3270662502_u32];
    _47.0 = _70.0 << (*_18);
    (*_2) = (-27115401901939267512599338886277312553_i128) as i8;
    (*_2) = -_39.1;
    _37.1 = (*_6) + _5;
    Goto(bb51)
    }
    bb51 = {
    Call(_90 = dump_var(17_usize, 63_usize, Move(_63), 23_usize, Move(_23), 26_usize, Move(_26), 54_usize, Move(_54)), ReturnTo(bb52), UnwindUnreachable())
    }
    bb52 = {
    Call(_90 = dump_var(17_usize, 50_usize, Move(_50), 75_usize, Move(_75), 45_usize, Move(_45), 43_usize, Move(_43)), ReturnTo(bb53), UnwindUnreachable())
    }
    bb53 = {
    Call(_90 = dump_var(17_usize, 77_usize, Move(_77), 24_usize, Move(_24), 66_usize, Move(_66), 55_usize, Move(_55)), ReturnTo(bb54), UnwindUnreachable())
    }
    bb54 = {
    Call(_90 = dump_var(17_usize, 36_usize, Move(_36), 49_usize, Move(_49), 19_usize, Move(_19), 38_usize, Move(_38)), ReturnTo(bb55), UnwindUnreachable())
    }
    bb55 = {
    Call(_90 = dump_var(17_usize, 8_usize, Move(_8), 91_usize, _91, 91_usize, _91, 91_usize, _91), ReturnTo(bb56), UnwindUnreachable())
    }
    bb56 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn18(
    mut _1: *mut i8,
    mut _2: f32,
    mut _3: (*mut i8, f32),
    mut _4: *mut f32,
    mut _5: f32,
    mut _6: i8,
    mut _7: f32,
    mut _8: isize,
    mut _9: f32,
) -> isize {
    mir! {
    type RET = isize;
    let _10: u32;
    let _11: isize;
    let _12: i128;
    let _13: i8;
    let _14: [char; 3];
    let _15: &'static i32;
    let _16: f64;
    let _17: isize;
    let _18: ((Adt27, [u64; 3]), ((char, i64, u64),), *mut &'static mut i128, [char; 3]);
    let _19: [i8; 3];
    let _20: bool;
    let _21: [u32; 4];
    let _22: u16;
    let _23: bool;
    let _24: &'static *mut f32;
    let _25: *const u32;
    let _26: *mut &'static u16;
    let _27: i128;
    let _28: *mut u128;
    let _29: f32;
    let _30: &'static *mut &'static *mut f32;
    let _31: char;
    let _32: &'static i32;
    let _33: i16;
    let _34: Adt31;
    let _35: [u32; 3];
    let _36: u8;
    let _37: *const u32;
    let _38: isize;
    let _39: char;
    let _40: (i64, i8, &'static mut u32);
    let _41: Adt77;
    let _42: i64;
    let _43: &'static *const u32;
    let _44: (u8,);
    let _45: &'static mut [u32; 7];
    let _46: *const usize;
    let _47: usize;
    let _48: *mut (Adt27, [u64; 3]);
    let _49: f32;
    let _50: &'static mut *const usize;
    let _51: u32;
    let _52: *mut (*mut i8, f32);
    let _53: [u32; 4];
    let _54: bool;
    let _55: isize;
    let _56: [usize; 6];
    let _57: [bool; 7];
    let _58: f64;
    let _59: char;
    let _60: i8;
    let _61: *mut (Adt27, [u64; 3]);
    let _62: f32;
    let _63: *mut i8;
    let _64: f32;
    let _65: *const Adt19;
    let _66: bool;
    let _67: isize;
    let _68: &'static Adt31;
    let _69: u64;
    let _70: &'static *const u32;
    let _71: [i128; 3];
    let _72: Adt73;
    let _73: *mut u128;
    let _74: [u16; 2];
    let _75: *mut (*mut i8, f32);
    let _76: Adt69;
    let _77: *mut f32;
    let _78: f64;
    let _79: &'static *mut f32;
    let _80: f64;
    let _81: isize;
    let _82: f64;
    let _83: isize;
    let _84: char;
    let _85: *const u32;
    let _86: bool;
    let _87: ();
    let _88: ();
    {
    _9 = _8 as f32;
    _7 = -_5;
    _2 = _3.1 * _5;
    _4 = core::ptr::addr_of_mut!(_7);
    (*_4) = _3.1 + _2;
    (*_4) = _2 - _5;
    _3.1 = (*_4);
    RET = !_8;
    (*_4) = _3.1 - _3.1;
    (*_4) = _3.1 + _3.1;
    (*_4) = 16346370003186964784_u64 as f32;
    (*_4) = 42753_u16 as f32;
    (*_4) = 44945726140872909827160991597509990657_i128 as f32;
    _3 = (Move(_1), _2);
    _3.0 = core::ptr::addr_of_mut!(_6);
    (*_4) = 48655_u16 as f32;
    (*_4) = -_2;
    _3.0 = core::ptr::addr_of_mut!(_6);
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_4) = _5 * _3.1;
    RET = !_8;
    (*_4) = -_5;
    _13 = _6 - _6;
    RET = _8;
    Goto(bb1)
    }
    bb1 = {
    (*_4) = _3.1;
    _9 = 106942619526242138695757811819490041597_u128 as f32;
    (*_4) = 1650248394_u32 as f32;
    _3.1 = -_5;
    _10 = !2198448961_u32;
    _3.0 = core::ptr::addr_of_mut!(_6);
    (*_4) = _2 * _5;
    _9 = (*_4) * (*_4);
    (*_4) = (-8010117587552830988_i64) as f32;
    _14 = ['\u{ec485}','\u{9937}','\u{dd80b}'];
    _1 = core::ptr::addr_of_mut!(_13);
    _14 = ['\u{10c929}','\u{7ef7b}','\u{1648}'];
    (*_1) = _6 | _6;
    (*_1) = _6;
    Goto(bb2)
    }
    bb2 = {
    _3 = (Move(_1), _9);
    (*_4) = RET as f32;
    (*_4) = _9 * _3.1;
    _5 = -(*_4);
    _3.0 = core::ptr::addr_of_mut!(_6);
    (*_4) = _5 + _5;
    _6 = _13 + _13;
    (*_4) = -_9;
    (*_4) = _5 - _2;
    (*_4) = _6 as f32;
    (*_4) = -_5;
    (*_4) = _9 * _9;
    _11 = RET;
    _10 = 769583609_u32;
    (*_4) = _9 + _9;
    _5 = (*_4) - (*_4);
    (*_4) = _9 + _9;
    (*_4) = _3.1 * _5;
    _13 = _6;
    (*_4) = _5 - _5;
    _3.0 = core::ptr::addr_of_mut!(_13);
    Goto(bb3)
    }
    bb3 = {
    _12 = -(-132062645073475794934181056285581809672_i128);
    (*_4) = _10 as f32;
    _20 = _2 <= _5;
    (*_4) = _5;
    _9 = (*_4);
    _1 = core::ptr::addr_of_mut!(_6);
    _23 = _20;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _22 = 29020_u16;
    (*_1) = _13 & _13;
    (*_1) = 97_u8 as i8;
    _23 = (*_4) > (*_4);
    _20 = (*_4) > (*_4);
    (*_1) = _13 >> _13;
    _18.1.0.0 = '\u{fe964}';
    (*_4) = 1991054052_i32 as f32;
    (*_1) = !_13;
    (*_4) = _5 - _9;
    _7 = _9 + _3.1;
    _23 = _20 & _20;
    (*_1) = _13 | _13;
    _18.1.0.1 = !(-5323143766284793727_i64);
    Goto(bb4)
    }
    bb4 = {
    _22 = 30523_u16;
    (*_1) = _13 >> _13;
    (*_1) = 11453_i16 as i8;
    _16 = 7_usize as f64;
    _16 = 599042710730372950_usize as f64;
    Goto(bb5)
    }
    bb5 = {
    (*_1) = -_13;
    (*_1) = _13;
    (*_1) = !_13;
    (*_4) = _3.1;
    _27 = _12 * _12;
    _21 = [_10,_10,_10,_10];
    _14 = [_18.1.0.0,_18.1.0.0,_18.1.0.0];
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_1) = !_13;
    _24 = &_4;
    (*_1) = _13;
    _3.0 = core::ptr::addr_of_mut!((*_1));
    _25 = core::ptr::addr_of!(_10);
    _9 = _5;
    (*_4) = _9 + _9;
    (*_4) = 9_u8 as f32;
    (*_4) = -_3.1;
    (*_1) = _27 as i8;
    Goto(bb6)
    }
    bb6 = {
    _11 = !_8;
    _21 = [(*_25),(*_25),(*_25),(*_25)];
    (*_4) = -_5;
    (*_25) = !3871422067_u32;
    _3.0 = Move(_1);
    _12 = _8 as i128;
    (*_25) = (-559495429_i32) as u32;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _13 = _18.1.0.0 as i8;
    (*_25) = 3580907902_u32 << _27;
    (*_4) = _18.1.0.1 as f32;
    _18.0.1 = [1716872160875770618_u64,12607481303685687759_u64,6513043146387506030_u64];
    (*_4) = 10402371348522587875_u64 as f32;
    _1 = core::ptr::addr_of_mut!(_13);
    (*_4) = _22 as f32;
    _17 = RET - RET;
    (*_4) = _5;
    (*_25) = !411688101_u32;
    _18.0.1 = [2716135754798326258_u64,2363652630163359433_u64,4736022101985835411_u64];
    (*_1) = _6;
    _18.0.1 = [11625766932555505873_u64,2047415979578616349_u64,10985258190706152872_u64];
    (*_4) = _9 - _5;
    _5 = -(*_4);
    Goto(bb7)
    }
    bb7 = {
    (*_25) = 3691928928_u32;
    _36 = !128_u8;
    (*_25) = 1976567357_u32 & 2599976411_u32;
    (*_1) = _18.1.0.1 as i8;
    (*_1) = _27 as i8;
    _3.1 = (*_4);
    _35 = [(*_25),(*_25),(*_25)];
    (*_4) = _3.1 - _5;
    (*_25) = !549161584_u32;
    (*_4) = _3.1 * _9;
    _20 = !_23;
    (*_1) = _6;
    _17 = _8 - _11;
    _5 = (*_1) as f32;
    (*_1) = _20 as i8;
    _2 = (*_4);
    match _22 {
    0 => bb8,
    1 => bb9,
    2 => bb10,
    3 => bb11,
    4 => bb12,
    30523 => bb14,
    _ => bb13
    }
    }
    bb8 = {
    _11 = !_8;
    _21 = [(*_25),(*_25),(*_25),(*_25)];
    (*_4) = -_5;
    (*_25) = !3871422067_u32;
    _3.0 = Move(_1);
    _12 = _8 as i128;
    (*_25) = (-559495429_i32) as u32;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _13 = _18.1.0.0 as i8;
    (*_25) = 3580907902_u32 << _27;
    (*_4) = _18.1.0.1 as f32;
    _18.0.1 = [1716872160875770618_u64,12607481303685687759_u64,6513043146387506030_u64];
    (*_4) = 10402371348522587875_u64 as f32;
    _1 = core::ptr::addr_of_mut!(_13);
    (*_4) = _22 as f32;
    _17 = RET - RET;
    (*_4) = _5;
    (*_25) = !411688101_u32;
    _18.0.1 = [2716135754798326258_u64,2363652630163359433_u64,4736022101985835411_u64];
    (*_1) = _6;
    _18.0.1 = [11625766932555505873_u64,2047415979578616349_u64,10985258190706152872_u64];
    (*_4) = _9 - _5;
    _5 = -(*_4);
    Goto(bb7)
    }
    bb9 = {
    (*_1) = -_13;
    (*_1) = _13;
    (*_1) = !_13;
    (*_4) = _3.1;
    _27 = _12 * _12;
    _21 = [_10,_10,_10,_10];
    _14 = [_18.1.0.0,_18.1.0.0,_18.1.0.0];
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_1) = !_13;
    _24 = &_4;
    (*_1) = _13;
    _3.0 = core::ptr::addr_of_mut!((*_1));
    _25 = core::ptr::addr_of!(_10);
    _9 = _5;
    (*_4) = _9 + _9;
    (*_4) = 9_u8 as f32;
    (*_4) = -_3.1;
    (*_1) = _27 as i8;
    Goto(bb6)
    }
    bb10 = {
    _22 = 30523_u16;
    (*_1) = _13 >> _13;
    (*_1) = 11453_i16 as i8;
    _16 = 7_usize as f64;
    _16 = 599042710730372950_usize as f64;
    Goto(bb5)
    }
    bb11 = {
    _12 = -(-132062645073475794934181056285581809672_i128);
    (*_4) = _10 as f32;
    _20 = _2 <= _5;
    (*_4) = _5;
    _9 = (*_4);
    _1 = core::ptr::addr_of_mut!(_6);
    _23 = _20;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _22 = 29020_u16;
    (*_1) = _13 & _13;
    (*_1) = 97_u8 as i8;
    _23 = (*_4) > (*_4);
    _20 = (*_4) > (*_4);
    (*_1) = _13 >> _13;
    _18.1.0.0 = '\u{fe964}';
    (*_4) = 1991054052_i32 as f32;
    (*_1) = !_13;
    (*_4) = _5 - _9;
    _7 = _9 + _3.1;
    _23 = _20 & _20;
    (*_1) = _13 | _13;
    _18.1.0.1 = !(-5323143766284793727_i64);
    Goto(bb4)
    }
    bb12 = {
    _3 = (Move(_1), _9);
    (*_4) = RET as f32;
    (*_4) = _9 * _3.1;
    _5 = -(*_4);
    _3.0 = core::ptr::addr_of_mut!(_6);
    (*_4) = _5 + _5;
    _6 = _13 + _13;
    (*_4) = -_9;
    (*_4) = _5 - _2;
    (*_4) = _6 as f32;
    (*_4) = -_5;
    (*_4) = _9 * _9;
    _11 = RET;
    _10 = 769583609_u32;
    (*_4) = _9 + _9;
    _5 = (*_4) - (*_4);
    (*_4) = _9 + _9;
    (*_4) = _3.1 * _5;
    _13 = _6;
    (*_4) = _5 - _5;
    _3.0 = core::ptr::addr_of_mut!(_13);
    Goto(bb3)
    }
    bb13 = {
    (*_4) = _3.1;
    _9 = 106942619526242138695757811819490041597_u128 as f32;
    (*_4) = 1650248394_u32 as f32;
    _3.1 = -_5;
    _10 = !2198448961_u32;
    _3.0 = core::ptr::addr_of_mut!(_6);
    (*_4) = _2 * _5;
    _9 = (*_4) * (*_4);
    (*_4) = (-8010117587552830988_i64) as f32;
    _14 = ['\u{ec485}','\u{9937}','\u{dd80b}'];
    _1 = core::ptr::addr_of_mut!(_13);
    _14 = ['\u{10c929}','\u{7ef7b}','\u{1648}'];
    (*_1) = _6 | _6;
    (*_1) = _6;
    Goto(bb2)
    }
    bb14 = {
    (*_25) = 699846803_u32 << (*_1);
    _13 = !_6;
    _1 = core::ptr::addr_of_mut!((*_1));
    _18.1.0.1 = (-3203431244244553752_i64) + (-2822698591541631538_i64);
    (*_1) = _6 | _6;
    (*_1) = (*_25) as i8;
    (*_25) = !3568050035_u32;
    _13 = _6 + _6;
    _33 = 12052_i16 - (-23896_i16);
    _21 = [(*_25),(*_25),(*_25),(*_25)];
    _23 = _20;
    (*_25) = 4179856823_u32;
    (*_25) = 543418615_u32 & 4273214333_u32;
    _29 = -(*_4);
    (*_4) = _29;
    (*_4) = _2 * _9;
    (*_25) = 1117960871_u32 >> (*_1);
    (*_4) = _9;
    (*_25) = 793197778_u32 & 3095327305_u32;
    _7 = _29 - _9;
    _11 = _17 + _8;
    _38 = _11 & _17;
    (*_4) = _9 * _29;
    (*_25) = 3767377581_u32;
    _8 = _38 + _11;
    Goto(bb15)
    }
    bb15 = {
    _3 = (Move(_1), (*_4));
    _4 = core::ptr::addr_of_mut!(_3.1);
    _7 = (*_4) * (*_4);
    _20 = !_23;
    _19 = [_13,_6,_13];
    (*_25) = !2532973277_u32;
    _19 = [_13,_13,_13];
    _8 = _38;
    _43 = &_25;
    (*_25) = 726998200_u32 << _36;
    (*_25) = !1979853968_u32;
    (*_4) = _2;
    Goto(bb16)
    }
    bb16 = {
    (*_4) = _5 + _29;
    _38 = _8 << _11;
    _29 = -(*_4);
    _18.3 = _14;
    (*_25) = 3625277381_u32;
    _11 = _38 & _8;
    _29 = _9 * (*_4);
    _18.1.0.2 = 14081484513427773740_u64 * 5882013838042229305_u64;
    _39 = _18.1.0.0;
    _18.1.0 = (_39, (-8793275630416729357_i64), 6787037708389032388_u64);
    (*_4) = _29;
    _40.2 = &mut _10;
    _5 = (*_4) + (*_4);
    (*_4) = -_29;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _19 = [_6,_13,_13];
    _36 = 172_u8;
    (*_4) = _2 + _7;
    _18.3 = _14;
    _8 = _22 as isize;
    Call(_40.1 = core::intrinsics::bswap(_13), ReturnTo(bb17), UnwindUnreachable())
    }
    bb17 = {
    _13 = _6 | _6;
    _44.0 = _36;
    (*_4) = _29 + _5;
    _16 = _22 as f64;
    (*_4) = _9 - _5;
    _40.1 = !_6;
    _11 = !_38;
    _38 = _8 - _11;
    _37 = Move(_25);
    match _44.0 {
    0 => bb6,
    172 => bb19,
    _ => bb18
    }
    }
    bb18 = {
    (*_1) = -_13;
    (*_1) = _13;
    (*_1) = !_13;
    (*_4) = _3.1;
    _27 = _12 * _12;
    _21 = [_10,_10,_10,_10];
    _14 = [_18.1.0.0,_18.1.0.0,_18.1.0.0];
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_1) = !_13;
    _24 = &_4;
    (*_1) = _13;
    _3.0 = core::ptr::addr_of_mut!((*_1));
    _25 = core::ptr::addr_of!(_10);
    _9 = _5;
    (*_4) = _9 + _9;
    (*_4) = 9_u8 as f32;
    (*_4) = -_3.1;
    (*_1) = _27 as i8;
    Goto(bb6)
    }
    bb19 = {
    _18.1.0 = (_39, 3268050829902123887_i64, 17159790083314846243_u64);
    _9 = -(*_4);
    _18.1.0 = (_39, 2266633583189348966_i64, 8156601740272708474_u64);
    _44.0 = !_36;
    _12 = _27 ^ _27;
    _23 = !_20;
    (*_4) = _2 + _29;
    _18.3 = _14;
    _18.1.0 = (_39, 5309542799167797719_i64, 17995335342901882434_u64);
    _38 = -_8;
    _42 = !_18.1.0.1;
    _18.0.0 = Adt27::Variant2 { fld0: _44,fld1: _18.0.1,fld2: _22,fld3: _19,fld4: _18.1.0.2,fld5: _27,fld6: _42 };
    _18.3 = [_39,_39,_39];
    _16 = Field::<u16>(Variant(_18.0.0, 2), 2) as f64;
    _3.0 = core::ptr::addr_of_mut!(_6);
    _18.3 = [_18.1.0.0,_39,_18.1.0.0];
    _31 = _39;
    _29 = (*_4) * (*_4);
    _4 = core::ptr::addr_of_mut!(_49);
    _47 = 1357387742011475754_usize;
    (*_4) = _29 * _5;
    (*_4) = Field::<u16>(Variant(_18.0.0, 2), 2) as f32;
    (*_4) = _3.1 + _9;
    (*_4) = _33 as f32;
    _42 = Field::<i64>(Variant(_18.0.0, 2), 6);
    Call(_40.0 = core::intrinsics::bswap(Field::<i64>(Variant(_18.0.0, 2), 6)), ReturnTo(bb20), UnwindUnreachable())
    }
    bb20 = {
    (*_4) = -_7;
    _44 = (Field::<(u8,)>(Variant(_18.0.0, 2), 0).0,);
    _54 = !_20;
    _51 = 1538098196_u32;
    _56 = [_47,_47,_47,_47,_47,_47];
    _3.1 = (*_4) - (*_4);
    _13 = _40.1 * _40.1;
    _13 = -_40.1;
    _7 = _29 - _5;
    (*_4) = _3.1;
    _18.1.0.0 = _31;
    _46 = core::ptr::addr_of!(_47);
    _17 = !_11;
    (*_46) = _36 as usize;
    _57 = [_20,_20,_23,_23,_54,_23,_23];
    (*_4) = _7;
    (*_46) = !1_usize;
    place!(Field::<i64>(Variant(_18.0.0, 2), 6)) = _18.1.0.1;
    (*_4) = _33 as f32;
    _55 = _17;
    _48 = core::ptr::addr_of_mut!(_18.0);
    (*_48).1 = Field::<[u64; 3]>(Variant((*_48).0, 2), 1);
    place!(Field::<[u64; 3]>(Variant((*_48).0, 2), 1)) = [Field::<u64>(Variant((*_48).0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4)];
    place!(Field::<(u8,)>(Variant((*_48).0, 2), 0)).0 = _36 % _36;
    match Field::<i64>(Variant((*_48).0, 2), 6) {
    0 => bb21,
    1 => bb22,
    2 => bb23,
    3 => bb24,
    4 => bb25,
    5309542799167797719 => bb27,
    _ => bb26
    }
    }
    bb21 = {
    _18.1.0 = (_39, 3268050829902123887_i64, 17159790083314846243_u64);
    _9 = -(*_4);
    _18.1.0 = (_39, 2266633583189348966_i64, 8156601740272708474_u64);
    _44.0 = !_36;
    _12 = _27 ^ _27;
    _23 = !_20;
    (*_4) = _2 + _29;
    _18.3 = _14;
    _18.1.0 = (_39, 5309542799167797719_i64, 17995335342901882434_u64);
    _38 = -_8;
    _42 = !_18.1.0.1;
    _18.0.0 = Adt27::Variant2 { fld0: _44,fld1: _18.0.1,fld2: _22,fld3: _19,fld4: _18.1.0.2,fld5: _27,fld6: _42 };
    _18.3 = [_39,_39,_39];
    _16 = Field::<u16>(Variant(_18.0.0, 2), 2) as f64;
    _3.0 = core::ptr::addr_of_mut!(_6);
    _18.3 = [_18.1.0.0,_39,_18.1.0.0];
    _31 = _39;
    _29 = (*_4) * (*_4);
    _4 = core::ptr::addr_of_mut!(_49);
    _47 = 1357387742011475754_usize;
    (*_4) = _29 * _5;
    (*_4) = Field::<u16>(Variant(_18.0.0, 2), 2) as f32;
    (*_4) = _3.1 + _9;
    (*_4) = _33 as f32;
    _42 = Field::<i64>(Variant(_18.0.0, 2), 6);
    Call(_40.0 = core::intrinsics::bswap(Field::<i64>(Variant(_18.0.0, 2), 6)), ReturnTo(bb20), UnwindUnreachable())
    }
    bb22 = {
    _22 = 30523_u16;
    (*_1) = _13 >> _13;
    (*_1) = 11453_i16 as i8;
    _16 = 7_usize as f64;
    _16 = 599042710730372950_usize as f64;
    Goto(bb5)
    }
    bb23 = {
    _11 = !_8;
    _21 = [(*_25),(*_25),(*_25),(*_25)];
    (*_4) = -_5;
    (*_25) = !3871422067_u32;
    _3.0 = Move(_1);
    _12 = _8 as i128;
    (*_25) = (-559495429_i32) as u32;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _13 = _18.1.0.0 as i8;
    (*_25) = 3580907902_u32 << _27;
    (*_4) = _18.1.0.1 as f32;
    _18.0.1 = [1716872160875770618_u64,12607481303685687759_u64,6513043146387506030_u64];
    (*_4) = 10402371348522587875_u64 as f32;
    _1 = core::ptr::addr_of_mut!(_13);
    (*_4) = _22 as f32;
    _17 = RET - RET;
    (*_4) = _5;
    (*_25) = !411688101_u32;
    _18.0.1 = [2716135754798326258_u64,2363652630163359433_u64,4736022101985835411_u64];
    (*_1) = _6;
    _18.0.1 = [11625766932555505873_u64,2047415979578616349_u64,10985258190706152872_u64];
    (*_4) = _9 - _5;
    _5 = -(*_4);
    Goto(bb7)
    }
    bb24 = {
    (*_4) = _5 + _29;
    _38 = _8 << _11;
    _29 = -(*_4);
    _18.3 = _14;
    (*_25) = 3625277381_u32;
    _11 = _38 & _8;
    _29 = _9 * (*_4);
    _18.1.0.2 = 14081484513427773740_u64 * 5882013838042229305_u64;
    _39 = _18.1.0.0;
    _18.1.0 = (_39, (-8793275630416729357_i64), 6787037708389032388_u64);
    (*_4) = _29;
    _40.2 = &mut _10;
    _5 = (*_4) + (*_4);
    (*_4) = -_29;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _19 = [_6,_13,_13];
    _36 = 172_u8;
    (*_4) = _2 + _7;
    _18.3 = _14;
    _8 = _22 as isize;
    Call(_40.1 = core::intrinsics::bswap(_13), ReturnTo(bb17), UnwindUnreachable())
    }
    bb25 = {
    _3 = (Move(_1), (*_4));
    _4 = core::ptr::addr_of_mut!(_3.1);
    _7 = (*_4) * (*_4);
    _20 = !_23;
    _19 = [_13,_6,_13];
    (*_25) = !2532973277_u32;
    _19 = [_13,_13,_13];
    _8 = _38;
    _43 = &_25;
    (*_25) = 726998200_u32 << _36;
    (*_25) = !1979853968_u32;
    (*_4) = _2;
    Goto(bb16)
    }
    bb26 = {
    (*_25) = 699846803_u32 << (*_1);
    _13 = !_6;
    _1 = core::ptr::addr_of_mut!((*_1));
    _18.1.0.1 = (-3203431244244553752_i64) + (-2822698591541631538_i64);
    (*_1) = _6 | _6;
    (*_1) = (*_25) as i8;
    (*_25) = !3568050035_u32;
    _13 = _6 + _6;
    _33 = 12052_i16 - (-23896_i16);
    _21 = [(*_25),(*_25),(*_25),(*_25)];
    _23 = _20;
    (*_25) = 4179856823_u32;
    (*_25) = 543418615_u32 & 4273214333_u32;
    _29 = -(*_4);
    (*_4) = _29;
    (*_4) = _2 * _9;
    (*_25) = 1117960871_u32 >> (*_1);
    (*_4) = _9;
    (*_25) = 793197778_u32 & 3095327305_u32;
    _7 = _29 - _9;
    _11 = _17 + _8;
    _38 = _11 & _17;
    (*_4) = _9 * _29;
    (*_25) = 3767377581_u32;
    _8 = _38 + _11;
    Goto(bb15)
    }
    bb27 = {
    (*_4) = _2 - _29;
    place!(Field::<u16>(Variant((*_48).0, 2), 2)) = _22 + _22;
    place!(Field::<(u8,)>(Variant((*_48).0, 2), 0)).0 = _44.0;
    place!(Field::<(u8,)>(Variant((*_48).0, 2), 0)).0 = _44.0;
    Call(_2 = core::intrinsics::transmute(_51), ReturnTo(bb28), UnwindUnreachable())
    }
    bb28 = {
    place!(Field::<u16>(Variant((*_48).0, 2), 2)) = !_22;
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = _12;
    place!(Field::<[i8; 3]>(Variant(_18.0.0, 2), 3)) = [_40.1,_40.1,_6];
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = -_27;
    (*_48).1 = [Field::<u64>(Variant(_18.0.0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4)];
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = _12 & _12;
    (*_46) = 0_usize | 3_usize;
    _23 = (*_4) <= (*_4);
    _63 = core::ptr::addr_of_mut!(_60);
    _21 = [_51,_51,_51,_51];
    place!(Field::<u64>(Variant((*_48).0, 2), 4)) = _18.1.0.2;
    place!(Field::<u64>(Variant((*_48).0, 2), 4)) = _18.1.0.2 << Field::<i128>(Variant((*_48).0, 2), 5);
    (*_48).0 = Adt27::Variant2 { fld0: _44,fld1: (*_48).1,fld2: _22,fld3: _19,fld4: _18.1.0.2,fld5: _12,fld6: _18.1.0.1 };
    place!(Field::<i64>(Variant((*_48).0, 2), 6)) = _42 * _18.1.0.1;
    (*_48).0 = Adt27::Variant1 { fld0: _12,fld1: Move(_3.0),fld2: _33,fld3: _44 };
    place!(Field::<(u8,)>(Variant((*_48).0, 1), 3)).0 = _18.1.0.2 as u8;
    (*_4) = _9;
    Call((*_46) = core::intrinsics::transmute(_8), ReturnTo(bb29), UnwindUnreachable())
    }
    bb29 = {
    _61 = Move(_48);
    _13 = _40.1 - _6;
    _21 = [_51,_51,_51,_51];
    _17 = _55;
    _69 = !_18.1.0.2;
    (*_46) = Field::<i128>(Variant(_18.0.0, 1), 0) as usize;
    _64 = 175389112771321563408578380937504989713_u128 as f32;
    _39 = _18.1.0.0;
    _14 = [_31,_18.1.0.0,_39];
    _14 = _18.3;
    (*_46) = 5046803641245033932_usize | 5_usize;
    match _22 {
    0 => bb30,
    1 => bb31,
    2 => bb32,
    30523 => bb34,
    _ => bb33
    }
    }
    bb30 = {
    place!(Field::<u16>(Variant((*_48).0, 2), 2)) = !_22;
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = _12;
    place!(Field::<[i8; 3]>(Variant(_18.0.0, 2), 3)) = [_40.1,_40.1,_6];
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = -_27;
    (*_48).1 = [Field::<u64>(Variant(_18.0.0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4)];
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = _12 & _12;
    (*_46) = 0_usize | 3_usize;
    _23 = (*_4) <= (*_4);
    _63 = core::ptr::addr_of_mut!(_60);
    _21 = [_51,_51,_51,_51];
    place!(Field::<u64>(Variant((*_48).0, 2), 4)) = _18.1.0.2;
    place!(Field::<u64>(Variant((*_48).0, 2), 4)) = _18.1.0.2 << Field::<i128>(Variant((*_48).0, 2), 5);
    (*_48).0 = Adt27::Variant2 { fld0: _44,fld1: (*_48).1,fld2: _22,fld3: _19,fld4: _18.1.0.2,fld5: _12,fld6: _18.1.0.1 };
    place!(Field::<i64>(Variant((*_48).0, 2), 6)) = _42 * _18.1.0.1;
    (*_48).0 = Adt27::Variant1 { fld0: _12,fld1: Move(_3.0),fld2: _33,fld3: _44 };
    place!(Field::<(u8,)>(Variant((*_48).0, 1), 3)).0 = _18.1.0.2 as u8;
    (*_4) = _9;
    Call((*_46) = core::intrinsics::transmute(_8), ReturnTo(bb29), UnwindUnreachable())
    }
    bb31 = {
    _11 = !_8;
    _21 = [(*_25),(*_25),(*_25),(*_25)];
    (*_4) = -_5;
    (*_25) = !3871422067_u32;
    _3.0 = Move(_1);
    _12 = _8 as i128;
    (*_25) = (-559495429_i32) as u32;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _13 = _18.1.0.0 as i8;
    (*_25) = 3580907902_u32 << _27;
    (*_4) = _18.1.0.1 as f32;
    _18.0.1 = [1716872160875770618_u64,12607481303685687759_u64,6513043146387506030_u64];
    (*_4) = 10402371348522587875_u64 as f32;
    _1 = core::ptr::addr_of_mut!(_13);
    (*_4) = _22 as f32;
    _17 = RET - RET;
    (*_4) = _5;
    (*_25) = !411688101_u32;
    _18.0.1 = [2716135754798326258_u64,2363652630163359433_u64,4736022101985835411_u64];
    (*_1) = _6;
    _18.0.1 = [11625766932555505873_u64,2047415979578616349_u64,10985258190706152872_u64];
    (*_4) = _9 - _5;
    _5 = -(*_4);
    Goto(bb7)
    }
    bb32 = {
    _11 = !_8;
    _21 = [(*_25),(*_25),(*_25),(*_25)];
    (*_4) = -_5;
    (*_25) = !3871422067_u32;
    _3.0 = Move(_1);
    _12 = _8 as i128;
    (*_25) = (-559495429_i32) as u32;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _13 = _18.1.0.0 as i8;
    (*_25) = 3580907902_u32 << _27;
    (*_4) = _18.1.0.1 as f32;
    _18.0.1 = [1716872160875770618_u64,12607481303685687759_u64,6513043146387506030_u64];
    (*_4) = 10402371348522587875_u64 as f32;
    _1 = core::ptr::addr_of_mut!(_13);
    (*_4) = _22 as f32;
    _17 = RET - RET;
    (*_4) = _5;
    (*_25) = !411688101_u32;
    _18.0.1 = [2716135754798326258_u64,2363652630163359433_u64,4736022101985835411_u64];
    (*_1) = _6;
    _18.0.1 = [11625766932555505873_u64,2047415979578616349_u64,10985258190706152872_u64];
    (*_4) = _9 - _5;
    _5 = -(*_4);
    Goto(bb7)
    }
    bb33 = {
    (*_1) = -_13;
    (*_1) = _13;
    (*_1) = !_13;
    (*_4) = _3.1;
    _27 = _12 * _12;
    _21 = [_10,_10,_10,_10];
    _14 = [_18.1.0.0,_18.1.0.0,_18.1.0.0];
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_1) = !_13;
    _24 = &_4;
    (*_1) = _13;
    _3.0 = core::ptr::addr_of_mut!((*_1));
    _25 = core::ptr::addr_of!(_10);
    _9 = _5;
    (*_4) = _9 + _9;
    (*_4) = 9_u8 as f32;
    (*_4) = -_3.1;
    (*_1) = _27 as i8;
    Goto(bb6)
    }
    bb34 = {
    _55 = -_11;
    (*_63) = _40.1 << (*_46);
    (*_63) = _22 as i8;
    (*_46) = _27 as usize;
    (*_46) = 0_usize + 17336254158168556931_usize;
    (*_4) = _7;
    (*_46) = !14259577278478061385_usize;
    (*_4) = -_3.1;
    _11 = _17;
    (*_46) = 7_usize << _17;
    _18.1.0.0 = _39;
    match _18.1.0.1 {
    0 => bb25,
    1 => bb8,
    2 => bb22,
    3 => bb35,
    4 => bb36,
    5309542799167797719 => bb38,
    _ => bb37
    }
    }
    bb35 = {
    _3 = (Move(_1), (*_4));
    _4 = core::ptr::addr_of_mut!(_3.1);
    _7 = (*_4) * (*_4);
    _20 = !_23;
    _19 = [_13,_6,_13];
    (*_25) = !2532973277_u32;
    _19 = [_13,_13,_13];
    _8 = _38;
    _43 = &_25;
    (*_25) = 726998200_u32 << _36;
    (*_25) = !1979853968_u32;
    (*_4) = _2;
    Goto(bb16)
    }
    bb36 = {
    (*_1) = -_13;
    (*_1) = _13;
    (*_1) = !_13;
    (*_4) = _3.1;
    _27 = _12 * _12;
    _21 = [_10,_10,_10,_10];
    _14 = [_18.1.0.0,_18.1.0.0,_18.1.0.0];
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_1) = !_13;
    _24 = &_4;
    (*_1) = _13;
    _3.0 = core::ptr::addr_of_mut!((*_1));
    _25 = core::ptr::addr_of!(_10);
    _9 = _5;
    (*_4) = _9 + _9;
    (*_4) = 9_u8 as f32;
    (*_4) = -_3.1;
    (*_1) = _27 as i8;
    Goto(bb6)
    }
    bb37 = {
    _12 = -(-132062645073475794934181056285581809672_i128);
    (*_4) = _10 as f32;
    _20 = _2 <= _5;
    (*_4) = _5;
    _9 = (*_4);
    _1 = core::ptr::addr_of_mut!(_6);
    _23 = _20;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _22 = 29020_u16;
    (*_1) = _13 & _13;
    (*_1) = 97_u8 as i8;
    _23 = (*_4) > (*_4);
    _20 = (*_4) > (*_4);
    (*_1) = _13 >> _13;
    _18.1.0.0 = '\u{fe964}';
    (*_4) = 1991054052_i32 as f32;
    (*_1) = !_13;
    (*_4) = _5 - _9;
    _7 = _9 + _3.1;
    _23 = _20 & _20;
    (*_1) = _13 | _13;
    _18.1.0.1 = !(-5323143766284793727_i64);
    Goto(bb4)
    }
    bb38 = {
    _18.1.0.0 = _31;
    _12 = Field::<i128>(Variant(_18.0.0, 1), 0) & Field::<i128>(Variant(_18.0.0, 1), 0);
    _36 = Field::<(u8,)>(Variant(_18.0.0, 1), 3).0 + Field::<(u8,)>(Variant(_18.0.0, 1), 3).0;
    (*_46) = (*_4) as usize;
    (*_63) = !_13;
    (*_4) = _3.1 + _7;
    _46 = core::ptr::addr_of!((*_46));
    _72.fld3 = core::ptr::addr_of!(_51);
    (*_4) = _7 * _29;
    (*_63) = _6 + _6;
    _3 = (Move(_63), (*_4));
    (*_4) = _29 - _7;
    (*_4) = -_3.1;
    _12 = !Field::<i128>(Variant(_18.0.0, 1), 0);
    _38 = _11 >> (*_46);
    match _18.1.0.1 {
    0 => bb34,
    5309542799167797719 => bb40,
    _ => bb39
    }
    }
    bb39 = {
    _55 = -_11;
    (*_63) = _40.1 << (*_46);
    (*_63) = _22 as i8;
    (*_46) = _27 as usize;
    (*_46) = 0_usize + 17336254158168556931_usize;
    (*_4) = _7;
    (*_46) = !14259577278478061385_usize;
    (*_4) = -_3.1;
    _11 = _17;
    (*_46) = 7_usize << _17;
    _18.1.0.0 = _39;
    match _18.1.0.1 {
    0 => bb25,
    1 => bb8,
    2 => bb22,
    3 => bb35,
    4 => bb36,
    5309542799167797719 => bb38,
    _ => bb37
    }
    }
    bb40 = {
    _66 = !_20;
    (*_4) = _9;
    (*_46) = 2_usize >> _17;
    _25 = core::ptr::addr_of!(_51);
    match (*_25) {
    0 => bb2,
    1 => bb41,
    2 => bb42,
    1538098196 => bb44,
    _ => bb43
    }
    }
    bb41 = {
    _61 = Move(_48);
    _13 = _40.1 - _6;
    _21 = [_51,_51,_51,_51];
    _17 = _55;
    _69 = !_18.1.0.2;
    (*_46) = Field::<i128>(Variant(_18.0.0, 1), 0) as usize;
    _64 = 175389112771321563408578380937504989713_u128 as f32;
    _39 = _18.1.0.0;
    _14 = [_31,_18.1.0.0,_39];
    _14 = _18.3;
    (*_46) = 5046803641245033932_usize | 5_usize;
    match _22 {
    0 => bb30,
    1 => bb31,
    2 => bb32,
    30523 => bb34,
    _ => bb33
    }
    }
    bb42 = {
    (*_1) = -_13;
    (*_1) = _13;
    (*_1) = !_13;
    (*_4) = _3.1;
    _27 = _12 * _12;
    _21 = [_10,_10,_10,_10];
    _14 = [_18.1.0.0,_18.1.0.0,_18.1.0.0];
    _4 = core::ptr::addr_of_mut!((*_4));
    (*_1) = !_13;
    _24 = &_4;
    (*_1) = _13;
    _3.0 = core::ptr::addr_of_mut!((*_1));
    _25 = core::ptr::addr_of!(_10);
    _9 = _5;
    (*_4) = _9 + _9;
    (*_4) = 9_u8 as f32;
    (*_4) = -_3.1;
    (*_1) = _27 as i8;
    Goto(bb6)
    }
    bb43 = {
    (*_4) = _5 + _29;
    _38 = _8 << _11;
    _29 = -(*_4);
    _18.3 = _14;
    (*_25) = 3625277381_u32;
    _11 = _38 & _8;
    _29 = _9 * (*_4);
    _18.1.0.2 = 14081484513427773740_u64 * 5882013838042229305_u64;
    _39 = _18.1.0.0;
    _18.1.0 = (_39, (-8793275630416729357_i64), 6787037708389032388_u64);
    (*_4) = _29;
    _40.2 = &mut _10;
    _5 = (*_4) + (*_4);
    (*_4) = -_29;
    _3.0 = core::ptr::addr_of_mut!(_13);
    _19 = [_6,_13,_13];
    _36 = 172_u8;
    (*_4) = _2 + _7;
    _18.3 = _14;
    _8 = _22 as isize;
    Call(_40.1 = core::intrinsics::bswap(_13), ReturnTo(bb17), UnwindUnreachable())
    }
    bb44 = {
    (*_25) = 460863459_u32 ^ 597070014_u32;
    _58 = _16;
    (*_25) = 3839898383_u32 * 3493600833_u32;
    (*_25) = 1725850750_u32;
    _18.1.0.2 = _38 as u64;
    _67 = _38;
    _49 = -_9;
    (*_4) = _9;
    _18.1.0 = (_31, _42, _69);
    (*_25) = 103819072_u32 << (*_46);
    (*_4) = _5;
    (*_4) = _3.1;
    Call((*_4) = fn19(Move(_3), (*_46), Move(_40.2), Move(_24), Move(_37), _55), ReturnTo(bb45), UnwindUnreachable())
    }
    bb45 = {
    _62 = (*_4) * (*_4);
    _3.1 = -(*_4);
    _51 = 36017656_u32 ^ 3841495416_u32;
    (*_4) = _62;
    _76 = Adt69 { fld0: _14 };
    (*_46) = 1_usize;
    place!(Field::<(u8,)>(Variant(_18.0.0, 1), 3)).0 = _36 << _38;
    _50 = &mut _46;
    _64 = (*_4) + (*_4);
    (*_50) = core::ptr::addr_of!(_47);
    _48 = core::ptr::addr_of_mut!(_18.0);
    match _22 {
    0 => bb43,
    30523 => bb47,
    _ => bb46
    }
    }
    bb46 = {
    place!(Field::<u16>(Variant((*_48).0, 2), 2)) = !_22;
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = _12;
    place!(Field::<[i8; 3]>(Variant(_18.0.0, 2), 3)) = [_40.1,_40.1,_6];
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = -_27;
    (*_48).1 = [Field::<u64>(Variant(_18.0.0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4)];
    place!(Field::<i128>(Variant((*_48).0, 2), 5)) = _12 & _12;
    (*_46) = 0_usize | 3_usize;
    _23 = (*_4) <= (*_4);
    _63 = core::ptr::addr_of_mut!(_60);
    _21 = [_51,_51,_51,_51];
    place!(Field::<u64>(Variant((*_48).0, 2), 4)) = _18.1.0.2;
    place!(Field::<u64>(Variant((*_48).0, 2), 4)) = _18.1.0.2 << Field::<i128>(Variant((*_48).0, 2), 5);
    (*_48).0 = Adt27::Variant2 { fld0: _44,fld1: (*_48).1,fld2: _22,fld3: _19,fld4: _18.1.0.2,fld5: _12,fld6: _18.1.0.1 };
    place!(Field::<i64>(Variant((*_48).0, 2), 6)) = _42 * _18.1.0.1;
    (*_48).0 = Adt27::Variant1 { fld0: _12,fld1: Move(_3.0),fld2: _33,fld3: _44 };
    place!(Field::<(u8,)>(Variant((*_48).0, 1), 3)).0 = _18.1.0.2 as u8;
    (*_4) = _9;
    Call((*_46) = core::intrinsics::transmute(_8), ReturnTo(bb29), UnwindUnreachable())
    }
    bb47 = {
    _63 = core::ptr::addr_of_mut!(_13);
    _40.2 = &mut (*_25);
    (*_50) = core::ptr::addr_of!(_56[_47]);
    _74[_47] = _22 | _22;
    _72.fld1 = !_47;
    match _21[_47] {
    0 => bb23,
    1538098196 => bb49,
    _ => bb48
    }
    }
    bb48 = {
    (*_4) = -_7;
    _44 = (Field::<(u8,)>(Variant(_18.0.0, 2), 0).0,);
    _54 = !_20;
    _51 = 1538098196_u32;
    _56 = [_47,_47,_47,_47,_47,_47];
    _3.1 = (*_4) - (*_4);
    _13 = _40.1 * _40.1;
    _13 = -_40.1;
    _7 = _29 - _5;
    (*_4) = _3.1;
    _18.1.0.0 = _31;
    _46 = core::ptr::addr_of!(_47);
    _17 = !_11;
    (*_46) = _36 as usize;
    _57 = [_20,_20,_23,_23,_54,_23,_23];
    (*_4) = _7;
    (*_46) = !1_usize;
    place!(Field::<i64>(Variant(_18.0.0, 2), 6)) = _18.1.0.1;
    (*_4) = _33 as f32;
    _55 = _17;
    _48 = core::ptr::addr_of_mut!(_18.0);
    (*_48).1 = Field::<[u64; 3]>(Variant((*_48).0, 2), 1);
    place!(Field::<[u64; 3]>(Variant((*_48).0, 2), 1)) = [Field::<u64>(Variant((*_48).0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4),Field::<u64>(Variant((*_48).0, 2), 4)];
    place!(Field::<(u8,)>(Variant((*_48).0, 2), 0)).0 = _36 % _36;
    match Field::<i64>(Variant((*_48).0, 2), 6) {
    0 => bb21,
    1 => bb22,
    2 => bb23,
    3 => bb24,
    4 => bb25,
    5309542799167797719 => bb27,
    _ => bb26
    }
    }
    bb49 = {
    _71[_47] = Field::<i128>(Variant((*_48).0, 1), 0) >> Field::<(u8,)>(Variant((*_48).0, 1), 3).0;
    place!(Field::<(u8,)>(Variant((*_48).0, 1), 3)).0 = _36 * _36;
    (*_4) = _7;
    _3.0 = core::ptr::addr_of_mut!(_6);
    _12 = _14[_47] as i128;
    _12 = _71[_47];
    (*_48).1 = [_69,_69,_69];
    _9 = (*_4) + _7;
    _39 = _31;
    _40.1 = (*_63);
    (*_48).0 = Adt27::Variant3 { fld0: Move(_3),fld1: 1991025851_i32 };
    _52 = core::ptr::addr_of_mut!(place!(Field::<(*mut i8, f32)>(Variant((*_48).0, 3), 0)));
    _18.1.0.2 = (*_48).1[_47] - (*_48).1[_47];
    (*_52) = (Move(_63), (*_4));
    (*_48).1[_47] = _18.1.0.2 << _71[_47];
    _72.fld2[_47] = (*_48).1[_47] | _69;
    (*_50) = core::ptr::addr_of!(_47);
    _7 = Field::<(*mut i8, f32)>(Variant((*_48).0, 3), 0).1 + (*_4);
    _72.fld2[_47] = _16 as u64;
    place!(Field::<i32>(Variant((*_48).0, 3), 1)) = _36 as i32;
    place!(Field::<(*mut i8, f32)>(Variant(_18.0.0, 3), 0)).1 = _67 as f32;
    (*_48).1 = [_18.1.0.2,_72.fld2[_47],_18.1.0.2];
    place!(Field::<(*mut i8, f32)>(Variant((*_48).0, 3), 0)).0 = core::ptr::addr_of_mut!(_6);
    Goto(bb50)
    }
    bb50 = {
    Call(_87 = dump_var(18_usize, 69_usize, Move(_69), 23_usize, Move(_23), 42_usize, Move(_42), 21_usize, Move(_21)), ReturnTo(bb51), UnwindUnreachable())
    }
    bb51 = {
    Call(_87 = dump_var(18_usize, 55_usize, Move(_55), 33_usize, Move(_33), 31_usize, Move(_31), 56_usize, Move(_56)), ReturnTo(bb52), UnwindUnreachable())
    }
    bb52 = {
    Call(_87 = dump_var(18_usize, 57_usize, Move(_57), 10_usize, Move(_10), 44_usize, Move(_44), 6_usize, Move(_6)), ReturnTo(bb53), UnwindUnreachable())
    }
    bb53 = {
    Call(_87 = dump_var(18_usize, 51_usize, Move(_51), 39_usize, Move(_39), 66_usize, Move(_66), 54_usize, Move(_54)), ReturnTo(bb54), UnwindUnreachable())
    }
    bb54 = {
    Return()
    }

    }
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn19(
    mut _1: (*mut i8, f32),
    mut _2: usize,
    mut _3: &'static mut u32,
    mut _4: &'static *mut f32,
    mut _5: *const u32,
    mut _6: isize,
) -> f32 {
    mir! {
    type RET = f32;
    let _7: char;
    let _8: &'static mut i128;
    let _9: *mut f32;
    let _10: i64;
    let _11: u128;
    let _12: char;
    let _13: i32;
    let _14: f64;
    let _15: u8;
    let _16: (char, i64, u64);
    let _17: &'static mut u32;
    let _18: &'static Adt31;
    let _19: &'static *mut f32;
    let _20: ();
    let _21: ();
    {
    Goto(bb1)
    }
    bb1 = {
    _7 = '\u{5a196}';
    _7 = '\u{1100c}';
    _1.1 = 24411_u16 as f32;
    RET = (-57_i8) as f32;
    _6 = !(-9223372036854775808_isize);
    _6 = 9223372036854775807_isize;
    _10 = (-5433611859593201153_i64);
    _10 = 4615198782791853242_i64 ^ 6032880471875493589_i64;
    RET = _1.1 - _1.1;
    _7 = '\u{df5a9}';
    _9 = core::ptr::addr_of_mut!(RET);
    match _6 {
    0 => bb2,
    1 => bb3,
    2 => bb4,
    3 => bb5,
    4 => bb6,
    5 => bb7,
    6 => bb8,
    9223372036854775807 => bb10,
    _ => bb9
    }
    }
    bb2 = {
    Return()
    }
    bb3 = {
    Return()
    }
    bb4 = {
    Return()
    }
    bb5 = {
    Return()
    }
    bb6 = {
    Return()
    }
    bb7 = {
    Return()
    }
    bb8 = {
    Return()
    }
    bb9 = {
    Return()
    }
    bb10 = {
    _2 = 15933226378896361239_usize & 785068630627220276_usize;
    (*_9) = _1.1;
    _10 = _6 as i64;
    (*_9) = _1.1;
    _7 = '\u{37985}';
    _11 = 4011799404704369982436126993608441309_u128 & 43879410539955604631198003828923582667_u128;
    (*_9) = _1.1 - _1.1;
    _6 = 115_isize << _11;
    _1.1 = 3130002502_u32 as f32;
    (*_9) = _1.1 - _1.1;
    _12 = _7;
    _6 = (-9223372036854775808_isize) - 9223372036854775807_isize;
    _9 = core::ptr::addr_of_mut!((*_9));
    Goto(bb11)
    }
    bb11 = {
    _13 = (-1319347678_i32);
    (*_9) = 7764390388292211959_u64 as f32;
    (*_9) = _1.1 - _1.1;
    (*_9) = _1.1 - _1.1;
    _1.1 = -(*_9);
    _2 = false as usize;
    (*_9) = -_1.1;
    _4 = &_9;
    (*_9) = _1.1;
    (*_9) = _1.1 + _1.1;
    _15 = !96_u8;
    (*_9) = _1.1;
    (*_9) = -_1.1;
    _12 = _7;
    _16.2 = 4923593454355547456_u64 << _6;
    (*_9) = _1.1 * _1.1;
    _7 = _12;
    _14 = _11 as f64;
    (*_9) = -_1.1;
    (*_9) = _1.1;
    (*_9) = _1.1 * _1.1;
    match _13 {
    0 => bb12,
    1 => bb13,
    2 => bb14,
    340282366920938463463374607430448863778 => bb16,
    _ => bb15
    }
    }
    bb12 = {
    Return()
    }
    bb13 = {
    Return()
    }
    bb14 = {
    Return()
    }
    bb15 = {
    Return()
    }
    bb16 = {
    _1.1 = (*_9) + (*_9);
    (*_9) = _1.1;
    _7 = _12;
    _14 = 20436_i16 as f64;
    _1.1 = (*_9) * (*_9);
    _16 = (_7, _10, 14801951264193695994_u64);
    (*_9) = _1.1 * _1.1;
    _15 = 97_u8 ^ 107_u8;
    _16.0 = _7;
    (*_9) = _1.1 - _1.1;
    _14 = 113466078173347198432630092573999521199_i128 as f64;
    (*_9) = _1.1 + _1.1;
    (*_9) = _1.1 - _1.1;
    (*_9) = _1.1 - _1.1;
    _19 = &(*_4);
    _15 = !157_u8;
    (*_9) = _1.1 * _1.1;
    Goto(bb17)
    }
    bb17 = {
    Call(_20 = dump_var(19_usize, 16_usize, Move(_16), 2_usize, Move(_2), 7_usize, Move(_7), 15_usize, Move(_15)), ReturnTo(bb18), UnwindUnreachable())
    }
    bb18 = {
    Return()
    }

    }
}
pub fn main() {
    fn0(
        std::hint::black_box(true),
        std::hint::black_box('\u{10ebef}'),
        std::hint::black_box(3125710407_u32),
        std::hint::black_box((-31_i8)),
        std::hint::black_box((-20643_i16)),
        std::hint::black_box(597372240_i32),
        std::hint::black_box(6630875623603933953_u64),
        std::hint::black_box(88385379200907167168816002794425816667_i128),
        std::hint::black_box(6077590283005072736_usize),
        std::hint::black_box(77_u8),
    );
}
#[derive(Debug)]
pub enum Adt19 {
    Variant0 { fld0: f32 },
    Variant1 { fld0: i64, fld1: u16 },
}
#[derive(Debug)]
pub enum Adt27 {
    Variant0 {
        fld0: bool,
        fld1: *mut u128,
        fld2: i32,
        fld3: i128,
        fld4: *mut i8,
    },
    Variant1 {
        fld0: i128,
        fld1: *mut i8,
        fld2: i16,
        fld3: (u8,),
    },
    Variant2 {
        fld0: (u8,),
        fld1: [u64; 3],
        fld2: u16,
        fld3: [i8; 3],
        fld4: u64,
        fld5: i128,
        fld6: i64,
    },
    Variant3 {
        fld0: (*mut i8, f32),
        fld1: i32,
    },
}
#[derive(Debug)]
pub enum Adt31 {
    Variant0 {
        fld0: u32,
        fld1: u128,
        fld2: [char; 3],
        fld3: [i8; 3],
        fld4: *mut u128,
        fld5: [u64; 3],
    },
    Variant1 {
        fld0: bool,
        fld1: (u16, char, u16, char),
        fld2: isize,
        fld3: [u64; 3],
        fld4: u128,
        fld5: u32,
        fld6: *const usize,
        fld7: i128,
    },
    Variant2 {
        fld0: Adt19,
        fld1: f64,
        fld2: (u8,),
        fld3: [u64; 3],
    },
    Variant3 {
        fld0: (u8,),
        fld1: u8,
        fld2: isize,
    },
}
#[derive(Debug, Copy, Clone)]
pub struct Adt38 {
    fld0: bool,
    fld1: u8,
}
#[derive(Debug, Copy, Clone)]
pub struct Adt69 {
    fld0: [char; 3],
}
#[derive(Debug)]
pub struct Adt73 {
    fld0: i64,
    fld1: usize,
    fld2: [u64; 6],
    fld3: *const u32,
}
#[derive(Debug)]
pub enum Adt77 {
    Variant0 {
        fld0: bool,
        fld1: *mut (Adt27, [u64; 3]),
        fld2: (f32, Adt19, u64),
        fld3: Adt73,
        fld4: [u32; 7],
        fld5: i32,
    },
    Variant1 {
        fld0: [i16; 1],
        fld1: *mut i8,
        fld2: [u16; 2],
    },
    Variant2 {
        fld0: ((char, i64, u64),),
        fld1: Adt73,
        fld2: isize,
        fld3: *mut *const (u16, char, u16, char),
        fld4: (u8,),
        fld5: u16,
        fld6: [u64; 6],
    },
}
#[derive(Debug)]
pub enum Adt80 {
    Variant0 {
        fld0: Adt38,
        fld1: u16,
        fld2: *mut (*mut i8, f32),
    },
    Variant1 {
        fld0: *const Adt19,
        fld1: i16,
        fld2: ((char, i64, u64),),
        fld3: *const f64,
    },
    Variant2 {
        fld0: Adt77,
        fld1: *mut (Adt27, [u64; 3]),
        fld2: isize,
        fld3: (u16, char, u16, char),
    },
    Variant3 {
        fld0: (u16, char, u16, char),
        fld1: [i8; 3],
        fld2: isize,
        fld3: Adt77,
        fld4: usize,
        fld5: *mut f32,
        fld6: [u32; 3],
        fld7: i128,
    },
}
