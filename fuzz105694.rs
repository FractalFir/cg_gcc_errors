#![recursion_limit = "1024"]
    #![feature(custom_mir, core_intrinsics, lazy_get)]
    #![allow(unused_parens, unused_assignments, overflowing_literals)]
    extern crate core;
    use core::intrinsics::mir::*;

    use std::collections::hash_map::DefaultHasher;
    use std::hash::{Hash, Hasher};
    use std::sync::LazyLock;

    static mut H: LazyLock<DefaultHasher> = LazyLock::new(|| DefaultHasher::new());

    #[inline(never)]
    fn dump_var(
        val0: impl Hash,
        val1: impl Hash,
        val2: impl Hash,
        val3: impl Hash,
    ) {
        unsafe {
            val0.hash(LazyLock::force_mut(&mut H));
            val1.hash(LazyLock::force_mut(&mut H));
            val2.hash(LazyLock::force_mut(&mut H));
            val3.hash(LazyLock::force_mut(&mut H));
        }
    }
    #[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn0(mut _1: bool,mut _2: u16,mut _3: u64,mut _4: i64,mut _5: usize,mut _6: i32) -> [i64; 6] {
mir! {
type RET = [i64; 6];
let _7: f64;
let _8: i16;
let _9: isize;
let _10: f64;
let _11: (*mut f32, char);
let _12: &'static *const u128;
let _13: &'static mut f64;
let _14: i16;
let _15: bool;
let _16: [bool; 3];
let _17: i64;
let _18: bool;
let _19: char;
let _20: &'static mut u128;
let _21: &'static mut [i128; 7];
let _22: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _23: bool;
let _24: f64;
let _25: isize;
let _26: char;
let _27: bool;
let _28: i64;
let _29: &'static *mut [i128; 7];
let _30: Adt37;
let _31: [isize; 3];
let _32: isize;
let _33: usize;
let _34: i64;
let _35: ((*const u128, char),);
let _36: [i8; 6];
let _37: ((*mut f32, char),);
let _38: f64;
let _39: *mut u128;
let _40: f64;
let _41: f64;
let _42: isize;
let _43: char;
let _44: *const u128;
let _45: u16;
let _46: &'static mut [i128; 7];
let _47: Adt69;
let _48: *mut ([i32; 4],);
let _49: (Adt37, (i8, u32, [usize; 1], Adt47));
let _50: f64;
let _51: bool;
let _52: ([i32; 4],);
let _53: [i128; 7];
let _54: usize;
let _55: *const isize;
let _56: *mut u128;
let _57: char;
let _58: f32;
let _59: [u16; 5];
let _60: &'static (Adt58, u128);
let _61: u128;
let _62: &'static u64;
let _63: *mut u128;
let _64: [i16; 6];
let _65: u128;
let _66: f32;
let _67: *mut ([i32; 4],);
let _68: [bool; 8];
let _69: *mut f32;
let _70: (Adt18, [usize; 1]);
let _71: *mut ([i32; 4],);
let _72: ();
let _73: ();
{
_4 = 4619377689393651675_i64;
_3 = 5688870088241099742_u64;
_1 = true | false;
_5 = 2908432088282014519_usize + 14109720774709265428_usize;
_2 = !36905_u16;
_2 = 73938297_u32 as u16;
_1 = _3 != _3;
_6 = (-1846843582_i32);
_2 = 52985_u16;
RET = [_4,_4,_4,_4,_4,_4];
_5 = 1374423855588928535_usize * 3945078497607562797_usize;
_2 = 36337_u16;
_1 = _5 >= _5;
_7 = 28146079976028244617371003844072611323_u128 as f64;
Goto(bb1)
}
bb1 = {
_4 = !8056687907095590643_i64;
_2 = !58683_u16;
RET = [_4,_4,_4,_4,_4,_4];
Goto(bb2)
}
bb2 = {
_4 = (-5035933687077844083_i64) & (-7944130377766614454_i64);
_8 = 11616_i16 - (-17243_i16);
_7 = 248_u8 as f64;
RET = [_4,_4,_4,_4,_4,_4];
match _6 {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
340282366920938463463374607429921367874 => bb8,
_ => bb7
}
}
bb3 = {
_4 = !8056687907095590643_i64;
_2 = !58683_u16;
RET = [_4,_4,_4,_4,_4,_4];
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_4 = (-206487408976792804_i64) >> _5;
_7 = 2422781651_u32 as f64;
Goto(bb9)
}
bb9 = {
_1 = true | false;
_6 = !1493838214_i32;
_1 = !false;
_4 = _7 as i64;
Call(_1 = fn1(RET, _8, _8, _2, _4, _2), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_7 = (-106_isize) as f64;
_9 = '\u{7610c}' as isize;
_9 = 14_isize + 9223372036854775807_isize;
_6 = (-1135073222_i32) << _3;
Call(_1 = fn2(_3, _6, _2), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
_10 = -_7;
_8 = _9 as i16;
_10 = _7 + _7;
Goto(bb12)
}
bb12 = {
_3 = 12957764293253869686_u64 + 12986520415177223885_u64;
_13 = &mut _7;
(*_13) = 113702078823441876307888445996145773340_i128 as f64;
_11.1 = '\u{e7c23}';
_11.1 = '\u{b7af3}';
(*_13) = _10 + _10;
(*_13) = -_10;
(*_13) = _10 - _10;
(*_13) = -_10;
_15 = _1 & _1;
(*_13) = _10 + _10;
(*_13) = _10 * _10;
_16 = [_1,_1,_15];
_9 = !(-9223372036854775808_isize);
_16 = [_15,_1,_1];
_2 = _9 as u16;
(*_13) = -_10;
_18 = _1 >= _1;
(*_13) = _10 - _10;
(*_13) = _10 + _10;
_1 = _18 & _18;
_8 = 11942_i16;
_1 = _18 < _18;
Goto(bb13)
}
bb13 = {
(*_13) = _10 + _10;
_3 = 17302990567252599777_u64;
(*_13) = -_10;
_2 = 15270_u16;
_10 = (*_13) * (*_13);
(*_13) = _10;
match _2 {
0 => bb4,
1 => bb14,
15270 => bb16,
_ => bb15
}
}
bb14 = {
Return()
}
bb15 = {
_10 = -_7;
_8 = _9 as i16;
_10 = _7 + _7;
Goto(bb12)
}
bb16 = {
_17 = _4 * _4;
(*_13) = _10;
_5 = 23184211380567804529956352039925569516_i128 as usize;
(*_13) = _10;
_14 = _8 >> _8;
_15 = _18;
RET = [_17,_17,_17,_17,_4,_17];
_13 = &mut _10;
(*_13) = 40763656463227009988812570767289892210_i128 as f64;
(*_13) = _6 as f64;
(*_13) = _5 as f64;
_16 = [_15,_18,_15];
(*_13) = _8 as f64;
_18 = !_1;
_2 = !16180_u16;
_4 = _2 as i64;
(*_13) = _2 as f64;
_19 = _11.1;
(*_13) = _5 as f64;
_3 = 18000978957498166218_u64 * 8473913241476311530_u64;
(*_13) = (-56_i8) as f64;
(*_13) = 112315981766893135613785135504648066434_u128 as f64;
_3 = 12235270976593165054_u64 - 4393607864220183737_u64;
(*_13) = _17 as f64;
(*_13) = _3 as f64;
Call((*_13) = core::intrinsics::transmute(_3), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
(*_13) = _9 as f64;
(*_13) = 41594554873460665237637163077492436675_u128 as f64;
(*_13) = _17 as f64;
(*_13) = _6 as f64;
_23 = _15;
(*_13) = _5 as f64;
Goto(bb18)
}
bb18 = {
(*_13) = _2 as f64;
(*_13) = _2 as f64;
_5 = 2_usize << _6;
match _8 {
0 => bb7,
1 => bb2,
11942 => bb20,
_ => bb19
}
}
bb19 = {
(*_13) = _10 + _10;
_3 = 17302990567252599777_u64;
(*_13) = -_10;
_2 = 15270_u16;
_10 = (*_13) * (*_13);
(*_13) = _10;
match _2 {
0 => bb4,
1 => bb14,
15270 => bb16,
_ => bb15
}
}
bb20 = {
(*_13) = _3 as f64;
_14 = _8 | _8;
(*_13) = 342593050_u32 as f64;
_11.1 = _19;
_14 = _8;
_2 = 59965_u16;
_2 = (-109_i8) as u16;
_2 = 54838_u16 ^ 40814_u16;
_16 = [_1,_18,_23];
_23 = _18 == _1;
Goto(bb21)
}
bb21 = {
(*_13) = _6 as f64;
(*_13) = 741217221_u32 as f64;
(*_13) = _8 as f64;
(*_13) = 21224760816202581869313037096537524692_u128 as f64;
(*_13) = _6 as f64;
_31 = [_9,_9,_9];
_4 = _17 << _5;
(*_13) = _5 as f64;
_24 = (*_13) * (*_13);
match _8 {
0 => bb11,
1 => bb8,
2 => bb22,
11942 => bb24,
_ => bb23
}
}
bb22 = {
(*_13) = _2 as f64;
(*_13) = _2 as f64;
_5 = 2_usize << _6;
match _8 {
0 => bb7,
1 => bb2,
11942 => bb20,
_ => bb19
}
}
bb23 = {
_17 = _4 * _4;
(*_13) = _10;
_5 = 23184211380567804529956352039925569516_i128 as usize;
(*_13) = _10;
_14 = _8 >> _8;
_15 = _18;
RET = [_17,_17,_17,_17,_4,_17];
_13 = &mut _10;
(*_13) = 40763656463227009988812570767289892210_i128 as f64;
(*_13) = _6 as f64;
(*_13) = _5 as f64;
_16 = [_15,_18,_15];
(*_13) = _8 as f64;
_18 = !_1;
_2 = !16180_u16;
_4 = _2 as i64;
(*_13) = _2 as f64;
_19 = _11.1;
(*_13) = _5 as f64;
_3 = 18000978957498166218_u64 * 8473913241476311530_u64;
(*_13) = (-56_i8) as f64;
(*_13) = 112315981766893135613785135504648066434_u128 as f64;
_3 = 12235270976593165054_u64 - 4393607864220183737_u64;
(*_13) = _17 as f64;
(*_13) = _3 as f64;
Call((*_13) = core::intrinsics::transmute(_3), ReturnTo(bb17), UnwindUnreachable())
}
bb24 = {
_26 = _11.1;
RET = [_17,_4,_17,_4,_4,_17];
_28 = _4 + _17;
(*_13) = _24 - _24;
_33 = _23 as usize;
_1 = _23 != _18;
_4 = _28 & _28;
_23 = _1;
_16 = [_1,_18,_23];
(*_13) = _24 * _24;
_32 = (-46_i8) as isize;
_13 = &mut _24;
(*_13) = 101_u8 as f64;
(*_13) = 771756359_u32 as f64;
Goto(bb25)
}
bb25 = {
_31 = [_32,_32,_32];
(*_13) = _6 as f64;
_2 = _9 as u16;
_15 = _23 >= _23;
_18 = !_23;
_35.0.1 = _11.1;
_19 = _35.0.1;
(*_13) = _3 as f64;
(*_13) = 256209739610508560800373195348533079647_u128 as f64;
(*_13) = _6 as f64;
_8 = _14 * _14;
_11.1 = _19;
(*_13) = 187_u8 as f64;
(*_13) = _6 as f64;
Goto(bb26)
}
bb26 = {
_11.1 = _26;
_40 = _6 as f64;
(*_13) = _40 * _40;
_33 = _5 - _5;
_27 = !_23;
_6 = -597195992_i32;
(*_13) = -_40;
_25 = -_9;
(*_13) = -_40;
(*_13) = _5 as f64;
(*_13) = _40;
_41 = (*_13);
_34 = _3 as i64;
_38 = (*_13) + (*_13);
_8 = _14 ^ _14;
_35.0.1 = _19;
_28 = 99220145223812255248628156860127450280_u128 as i64;
_18 = _23;
_1 = _15 | _18;
_9 = _15 as isize;
_31 = [_9,_9,_9];
(*_13) = _14 as f64;
_33 = !_5;
(*_13) = _38 + _41;
(*_13) = _38 * _40;
(*_13) = _40;
_4 = 142051047295087321490395932770129747930_u128 as i64;
_37.0.1 = _26;
(*_13) = _38;
match _14 {
0 => bb18,
1 => bb13,
11942 => bb28,
_ => bb27
}
}
bb27 = {
Return()
}
bb28 = {
(*_13) = _40;
(*_13) = _38 + _38;
match _14 {
0 => bb9,
1 => bb17,
2 => bb29,
3 => bb30,
4 => bb31,
11942 => bb33,
_ => bb32
}
}
bb29 = {
Return()
}
bb30 = {
Return()
}
bb31 = {
(*_13) = _9 as f64;
(*_13) = 41594554873460665237637163077492436675_u128 as f64;
(*_13) = _17 as f64;
(*_13) = _6 as f64;
_23 = _15;
(*_13) = _5 as f64;
Goto(bb18)
}
bb32 = {
_10 = -_7;
_8 = _9 as i16;
_10 = _7 + _7;
Goto(bb12)
}
bb33 = {
_43 = _11.1;
(*_13) = _40;
_9 = _32 - _25;
_35.0.1 = _11.1;
_18 = _1 ^ _1;
(*_13) = _32 as f64;
_25 = !_9;
_2 = _5 as u16;
RET = [_4,_34,_34,_17,_34,_17];
_43 = _37.0.1;
_47.fld2 = _32 - _9;
(*_13) = _40 - _40;
_6 = !(-1391806724_i32);
(*_13) = _6 as f64;
Goto(bb34)
}
bb34 = {
(*_13) = _38 + _38;
(*_13) = -_38;
RET = [_4,_4,_28,_34,_4,_4];
(*_13) = _40;
_38 = (*_13);
_32 = _9 * _9;
_13 = &mut _41;
_47.fld5 = _2 as f64;
_26 = _37.0.1;
(*_13) = _17 as f64;
(*_13) = -_40;
_42 = _32 - _47.fld2;
_45 = _2 * _2;
_47.fld0 = !_18;
(*_13) = _38;
(*_13) = _47.fld5 * _38;
_43 = _11.1;
_11.1 = _35.0.1;
(*_13) = _40 + _38;
(*_13) = _17 as f64;
_19 = _35.0.1;
_25 = _32 & _42;
_47.fld0 = !_18;
(*_13) = _38 * _47.fld5;
_49.1.2 = [_33];
_49.1.1 = 1088776326_u32;
(*_13) = _38 * _47.fld5;
_27 = _18 != _23;
_49.1.0 = 11_i8 >> _9;
Goto(bb35)
}
bb35 = {
(*_13) = _6 as f64;
_18 = _23 >= _27;
_47.fld3 = _49.1.0 | _49.1.0;
_37.0.1 = _35.0.1;
_36 = [_47.fld3,_47.fld3,_47.fld3,_47.fld3,_47.fld3,_47.fld3];
_8 = (*_13) as i16;
_26 = _43;
_5 = _33;
_52.0 = [_6,_6,_6,_6];
(*_13) = -_40;
_1 = _23 >= _18;
_51 = !_1;
(*_13) = _38 + _47.fld5;
_11.1 = _26;
_1 = _27 <= _47.fld0;
_3 = !15065538641582477318_u64;
_27 = !_47.fld0;
_48 = core::ptr::addr_of_mut!(_52);
_53 = [169344526963170814955620895317931256476_i128,99601187177257532619655677944446695196_i128,150243047168926551151030416133769775883_i128,149420251100805261307882178216534009696_i128,(-137716069642846004853767786797480124585_i128),(-24314600923135156567551587582181061346_i128),112258447805719181215173722731041295996_i128];
_4 = _28 & _34;
_52.0 = [_6,_6,_6,_6];
(*_13) = _45 as f64;
_54 = _5 - _33;
Call((*_13) = core::intrinsics::fmaf64(_38, _38, _47.fld5), ReturnTo(bb36), UnwindUnreachable())
}
bb36 = {
_55 = core::ptr::addr_of!(_42);
(*_55) = _25;
_49.1.2 = [_54];
(*_55) = _25 + _25;
_5 = _33 | _33;
_5 = _54 * _33;
_47.fld6.1 = Adt18::Variant2 { fld0: _45,fld1: _26,fld2: _49.1.1 };
_37.0.1 = _26;
(*_13) = _47.fld5 - _47.fld5;
_36 = [_47.fld3,_47.fld3,_49.1.0,_49.1.0,_47.fld3,_49.1.0];
(*_55) = _25;
_44 = core::ptr::addr_of!(_61);
(*_13) = _47.fld5 - _40;
_36 = [_49.1.0,_49.1.0,_47.fld3,_49.1.0,_47.fld3,_47.fld3];
_37.0.0 = core::ptr::addr_of_mut!(_58);
Goto(bb37)
}
bb37 = {
_8 = 155342448838004362826184890851910887209_i128 as i16;
(*_48).0 = [_6,_6,_6,_6];
(*_55) = _32 >> _25;
(*_44) = !48545210041662065061544662916309944556_u128;
_56 = core::ptr::addr_of_mut!((*_44));
_31 = [(*_55),(*_55),(*_55)];
(*_48).0 = [_6,_6,_6,_6];
(*_48).0 = [_6,_6,_6,_6];
(*_55) = _32 * _47.fld2;
(*_55) = _4 as isize;
_23 = _15;
match _49.1.1 {
0 => bb26,
1 => bb38,
2 => bb39,
3 => bb40,
1088776326 => bb42,
_ => bb41
}
}
bb38 = {
_4 = !8056687907095590643_i64;
_2 = !58683_u16;
RET = [_4,_4,_4,_4,_4,_4];
Goto(bb2)
}
bb39 = {
(*_13) = _40;
(*_13) = _38 + _38;
match _14 {
0 => bb9,
1 => bb17,
2 => bb29,
3 => bb30,
4 => bb31,
11942 => bb33,
_ => bb32
}
}
bb40 = {
(*_13) = _6 as f64;
(*_13) = 741217221_u32 as f64;
(*_13) = _8 as f64;
(*_13) = 21224760816202581869313037096537524692_u128 as f64;
(*_13) = _6 as f64;
_31 = [_9,_9,_9];
_4 = _17 << _5;
(*_13) = _5 as f64;
_24 = (*_13) * (*_13);
match _8 {
0 => bb11,
1 => bb8,
2 => bb22,
11942 => bb24,
_ => bb23
}
}
bb41 = {
_26 = _11.1;
RET = [_17,_4,_17,_4,_4,_17];
_28 = _4 + _17;
(*_13) = _24 - _24;
_33 = _23 as usize;
_1 = _23 != _18;
_4 = _28 & _28;
_23 = _1;
_16 = [_1,_18,_23];
(*_13) = _24 * _24;
_32 = (-46_i8) as isize;
_13 = &mut _24;
(*_13) = 101_u8 as f64;
(*_13) = 771756359_u32 as f64;
Goto(bb25)
}
bb42 = {
(*_44) = !257278736860966050227022296787496836112_u128;
_47.fld7 = Adt18::Variant0 { fld0: _49.1.0,fld1: _19,fld2: (*_55) };
(*_13) = -_38;
(*_13) = -_38;
(*_13) = 31_u8 as f64;
_58 = 188_u8 as f32;
(*_44) = 57321319746852804859464561450510505270_u128 * 288612460598629464015150906591006289527_u128;
(*_48).0 = [_6,_6,_6,_6];
_14 = !_8;
(*_55) = !_25;
_47.fld2 = Field::<u16>(Variant(_47.fld6.1, 2), 0) as isize;
_65 = !(*_44);
_58 = (*_13) as f32;
_47.fld6 = (_19, _47.fld7);
(*_55) = _25;
(*_13) = Field::<i8>(Variant(_47.fld6.1, 0), 0) as f64;
_37.0.1 = _43;
(*_55) = _6 as isize;
_16 = [_47.fld0,_23,_1];
_47.fld2 = _42;
(*_55) = _25;
(*_48).0 = [_6,_6,_6,_6];
(*_55) = _5 as isize;
Goto(bb43)
}
bb43 = {
_37.0.1 = _35.0.1;
_65 = !(*_44);
(*_13) = _47.fld5 * _47.fld5;
_4 = _17 ^ _28;
_1 = _47.fld0 | _23;
_11.0 = Move(_37.0.0);
(*_48).0 = [_6,_6,_6,_6];
(*_48).0 = [_6,_6,_6,_6];
(*_55) = Field::<i8>(Variant(_47.fld7, 0), 0) as isize;
(*_48).0 = [_6,_6,_6,_6];
(*_13) = _40 + _40;
(*_44) = 94_u8 as u128;
Goto(bb44)
}
bb44 = {
(*_44) = !_65;
_67 = core::ptr::addr_of_mut!((*_48));
_63 = core::ptr::addr_of_mut!((*_44));
_1 = _23 | _15;
_35.0 = (Move(_44), _43);
_49.1.1 = 3311496524_u32;
place!(Field::<i8>(Variant(_47.fld6.1, 0), 0)) = Field::<i8>(Variant(_47.fld7, 0), 0) & Field::<i8>(Variant(_47.fld7, 0), 0);
_19 = _35.0.1;
(*_55) = _25;
(*_13) = _38;
(*_55) = _9 >> _2;
(*_55) = _32 | _25;
_67 = core::ptr::addr_of_mut!((*_48));
Goto(bb45)
}
bb45 = {
_16 = [_1,_51,_15];
_34 = _17 << (*_55);
(*_63) = _65 & _65;
(*_67).0 = [_6,_6,_6,_6];
(*_67).0 = [_6,_6,_6,_6];
_11.1 = Field::<char>(Variant(_47.fld7, 0), 1);
(*_67).0 = [_6,_6,_6,_6];
(*_67).0 = [_6,_6,_6,_6];
_63 = core::ptr::addr_of_mut!((*_63));
_39 = core::ptr::addr_of_mut!((*_63));
_47.fld6 = (_43, _47.fld7);
(*_48).0 = [_6,_6,_6,_6];
(*_63) = _65 + _65;
(*_55) = _25 ^ _25;
(*_13) = _5 as f64;
RET = [_17,_34,_34,_34,_34,_4];
(*_13) = -_40;
_69 = core::ptr::addr_of_mut!(_58);
(*_13) = -_47.fld5;
_50 = (*_13);
Goto(bb46)
}
bb46 = {
Call(_72 = dump_var(Move(_23), Move(_25), Move(_18), Move(_1)), ReturnTo(bb47), UnwindUnreachable())
}
bb47 = {
Call(_72 = dump_var(Move(_4), Move(_16), Move(_43), Move(_26)), ReturnTo(bb48), UnwindUnreachable())
}
bb48 = {
Call(_72 = dump_var(Move(_15), Move(_32), Move(_54), Move(_53)), ReturnTo(bb49), UnwindUnreachable())
}
bb49 = {
Call(_72 = dump_var(Move(_8), Move(_36), Move(_31), Move(_19)), ReturnTo(bb50), UnwindUnreachable())
}
bb50 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn1(mut _1: [i64; 6],mut _2: i16,mut _3: i16,mut _4: u16,mut _5: i64,mut _6: u16) -> bool {
mir! {
type RET = bool;
let _7: char;
let _8: ((*mut f32, char),);
let _9: isize;
let _10: &'static [usize; 1];
let _11: Adt41;
let _12: char;
let _13: ();
let _14: ();
{
RET = !true;
_6 = _4 - _4;
_5 = (-8824353579475404171_i64) - 6402563871271821215_i64;
_4 = !_6;
_2 = _3;
_3 = _2;
_4 = !_6;
_6 = _4;
_4 = !_6;
RET = _5 != _5;
_4 = _6 - _6;
_1 = [_5,_5,_5,_5,_5,_5];
_6 = _4 & _4;
_3 = !_2;
_6 = _4 | _4;
_3 = _2 ^ _2;
_5 = 2008939205302542151_i64 << _4;
RET = !false;
_6 = 641461403_u32 as u16;
_2 = _3;
_1 = [_5,_5,_5,_5,_5,_5];
_6 = _4 * _4;
_1 = [_5,_5,_5,_5,_5,_5];
_5 = (-3519323688831291954_i64) | 2532954422915606961_i64;
_4 = _6 + _6;
Goto(bb1)
}
bb1 = {
_4 = RET as u16;
_7 = '\u{73811}';
_9 = 11873580039787648929_usize as isize;
_5 = 6280675398975057114_i64;
_1 = [_5,_5,_5,_5,_5,_5];
_1 = [_5,_5,_5,_5,_5,_5];
match _5 {
0 => bb2,
1 => bb3,
2 => bb4,
6280675398975057114 => bb6,
_ => bb5
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
_9 = 10_isize;
_6 = !_4;
_8.0.1 = _7;
_2 = _3 * _3;
_4 = !_6;
_2 = _3 & _3;
_4 = _6 & _6;
_9 = 9223372036854775807_isize * 9223372036854775807_isize;
_5 = (-634378762792984397_i64);
_9 = 7293187751152931417_u64 as isize;
_12 = _7;
_5 = 617228288961210616_i64;
_5 = 6408701113296596370_i64 | (-736427460639503774_i64);
_5 = 379022034_u32 as i64;
_5 = -(-7753842759304961008_i64);
RET = _2 != _2;
Goto(bb7)
}
bb7 = {
Call(_13 = dump_var(Move(_9), Move(_3), Move(_12), Move(_4)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn2(mut _1: u64,mut _2: i32,mut _3: u16) -> bool {
mir! {
type RET = bool;
let _4: isize;
let _5: &'static mut (Adt18, [usize; 1]);
let _6: [char; 2];
let _7: &'static *mut f32;
let _8: &'static mut [i128; 7];
let _9: usize;
let _10: (Adt58, u128);
let _11: *mut u128;
let _12: Adt58;
let _13: f32;
let _14: &'static mut isize;
let _15: &'static *mut f32;
let _16: isize;
let _17: (i8, u32, [usize; 1], Adt47);
let _18: i128;
let _19: char;
let _20: [i128; 7];
let _21: isize;
let _22: u16;
let _23: f64;
let _24: f64;
let _25: Adt47;
let _26: i16;
let _27: i8;
let _28: char;
let _29: (usize, usize);
let _30: char;
let _31: &'static *mut f32;
let _32: bool;
let _33: [bool; 3];
let _34: *const isize;
let _35: isize;
let _36: &'static [i32; 4];
let _37: isize;
let _38: f32;
let _39: isize;
let _40: isize;
let _41: u16;
let _42: f64;
let _43: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _44: Adt56;
let _45: [i64; 8];
let _46: isize;
let _47: ();
let _48: ();
{
RET = false;
_2 = 14057_i16 as i32;
RET = false;
_4 = 9223372036854775807_isize >> _2;
_1 = 17350793004386997471_u64 - 3365012644674652537_u64;
_4 = (-28_isize) & 9223372036854775807_isize;
_4 = 9223372036854775807_isize ^ (-101_isize);
Goto(bb1)
}
bb1 = {
_3 = !62833_u16;
_1 = 16897463782737590725_u64 ^ 12191091768567586947_u64;
_6 = ['\u{4128a}','\u{98f15}'];
_4 = (-9223372036854775808_isize);
_6 = ['\u{10c22}','\u{1eafb}'];
RET = _3 != _3;
_1 = 17379520424782925872_u64 << _4;
_1 = 4661649536192814446_u64 + 12371290200776865495_u64;
_1 = 4577043525230719874_u64;
_4 = 9223372036854775807_isize;
_9 = (-30909_i16) as usize;
match _4 {
0 => bb2,
1 => bb3,
2 => bb4,
3 => bb5,
4 => bb6,
5 => bb7,
6 => bb8,
9223372036854775807 => bb10,
_ => bb9
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
RET = true;
_4 = -9223372036854775807_isize;
_3 = !46131_u16;
_1 = 14816443864406158325_u64 ^ 7529292200480909529_u64;
_6 = ['\u{1dc17}','\u{9002d}'];
_1 = 8453235718387617591_u64 >> _4;
_2 = 1624564724_i32 * (-766897480_i32);
_9 = _4 as usize;
RET = true;
RET = _1 < _1;
_9 = 7_usize * 1_usize;
_11 = core::ptr::addr_of_mut!(_10.1);
(*_11) = 158994593303933200462962405854918687509_u128;
_9 = 9996967514574300476_usize * 5_usize;
_13 = 1789626309_u32 as f32;
_2 = 93242427_i32 << (*_11);
_1 = 247_u8 as u64;
RET = true & true;
match (*_11) {
0 => bb9,
1 => bb4,
2 => bb6,
158994593303933200462962405854918687509 => bb12,
_ => bb11
}
}
bb11 = {
Return()
}
bb12 = {
(*_11) = !127070084714161865404228119683124535733_u128;
(*_11) = 220556996648941044440237304149945538194_u128;
(*_11) = !141549268084636678811919604957837702254_u128;
_6 = ['\u{f7a57}','\u{e8e0d}'];
_4 = (-9223372036854775808_isize);
RET = true ^ false;
(*_11) = 310528569355088928734798367361716230419_u128 + 131175481030516138997662884422900207030_u128;
(*_11) = 148799146552760201792238397350541362139_u128 | 234301394036238454163258415048380360149_u128;
(*_11) = 33362179073052973765676762668931185149_u128 | 183191592268185017949775308867836974190_u128;
(*_11) = 138717597855504495373415531772438155857_i128 as u128;
_6 = ['\u{1a2df}','\u{10c2cd}'];
(*_11) = !52792368769838369556107502046363610000_u128;
_14 = &mut _4;
(*_11) = (-124_i8) as u128;
Call((*_14) = fn3(RET, (*_11), _10.1, (*_11), Move(_11), (*_11), _2), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
(*_14) = !72_isize;
(*_14) = !9223372036854775807_isize;
_3 = 39107_u16 - 17729_u16;
_1 = 728275235997922231_u64 * 14967492360615785853_u64;
(*_14) = (-119_isize) >> _3;
_17.0 = (-91_i8) >> (*_14);
(*_14) = 9223372036854775807_isize | (-9223372036854775808_isize);
(*_14) = (-31_isize);
_9 = _1 as usize;
_17.2 = [_9];
_11 = core::ptr::addr_of_mut!(_10.1);
(*_14) = 9223372036854775807_isize >> _17.0;
(*_14) = (-4564496689263980111_i64) as isize;
_10.1 = 129318486144743436043230703844079873481_u128 << (*_14);
(*_14) = 9223372036854775807_isize;
_3 = 29845_u16 | 27187_u16;
(*_11) = !118397159011285221744025421514271723041_u128;
(*_11) = !89213473416071216354842563404706531205_u128;
_10.1 = !176980296938042268624535337170751956659_u128;
(*_14) = 9223372036854775807_isize * (-9223372036854775808_isize);
(*_11) = !59469408557870686916687502218718253104_u128;
(*_11) = 82970054138163132323475338853283275070_u128 >> _17.0;
Goto(bb14)
}
bb14 = {
(*_14) = 8657630334715522322_i64 as isize;
_9 = !15161817642927768673_usize;
(*_14) = 9223372036854775807_isize - 10_isize;
(*_14) = (-63_isize) | (-15_isize);
(*_11) = 305470735017784587533758046578580126594_u128 ^ 280762141839104434329576996339574077603_u128;
_19 = '\u{bb5be}';
(*_11) = RET as u128;
(*_14) = 9223372036854775807_isize - 9223372036854775807_isize;
_20 = [(-97675220394712021284177927669912269514_i128),(-35112440045070903687455149263855059760_i128),153487090583598590120415170797158954824_i128,114625204375751399740457253833148482118_i128,(-15833216217849246194998714481478608439_i128),(-84877261344681731504004963402901942219_i128),151503515067732716896788941045154760954_i128];
(*_11) = 21352976541186862230877238926696076109_u128 >> (*_14);
(*_11) = 94081449587707633958329610703169867399_u128 ^ 104392136645569767279470357361829236519_u128;
_8 = &mut _20;
(*_14) = (-9223372036854775808_isize) >> (*_11);
(*_14) = -9223372036854775807_isize;
_17.1 = 3466128538_u32 - 1803676465_u32;
Goto(bb15)
}
bb15 = {
(*_11) = 232822178865561502276400095532312426778_u128 << (*_14);
(*_8) = [100656365171995916723379108918217261105_i128,107985867805167046645307569746602009546_i128,(-67842078541463034137885356764456412474_i128),(-151220845443071370893133276912378270781_i128),153401393086387413094394824082096796968_i128,(-136661930918410047349760132026788548256_i128),79414762505252037622758173971322493533_i128];
Goto(bb16)
}
bb16 = {
(*_14) = 237_u8 as isize;
_23 = 1144441896463475780_i64 as f64;
(*_14) = 9223372036854775807_isize;
(*_11) = 267752524118868920300192970588722000503_u128 * 79539533976152489575125993632825002961_u128;
(*_11) = (-67935016764409476592152465784237243971_i128) as u128;
(*_14) = (-9223372036854775808_isize) & 9223372036854775807_isize;
(*_11) = 137026377127956183986045832314815014619_u128 - 206656403759165146608347665491795203485_u128;
(*_11) = 145790787447736920256433902671014125876_u128;
(*_14) = 9223372036854775807_isize + 9223372036854775807_isize;
_24 = _23 * _23;
_13 = (*_11) as f32;
_1 = 5976446417691058548_u64 | 13603398137050715358_u64;
Goto(bb17)
}
bb17 = {
_1 = 4496311739065849990_u64;
_26 = -29154_i16;
(*_14) = (-9223372036854775808_isize) ^ 9223372036854775807_isize;
Goto(bb18)
}
bb18 = {
(*_11) = 64516680996493089498762003444988753705_u128 & 39874610481926004851811038743239408575_u128;
(*_8) = [(-153482531596743087384800159261693931073_i128),(-16564540124936337688998071074228317986_i128),7584661095568096581340044848820475343_i128,126299814423770364098767348937339503082_i128,119962016267606840194678084209440984487_i128,(-46694620759316624978550535744956358944_i128),62661538908594634765132299372137806187_i128];
_21 = (*_14) & (*_14);
(*_11) = 203180897633597944292065475543509113944_u128 | 73268690689647957239645439471992179895_u128;
(*_11) = 98283463009318357045252320225280885097_u128 | 87496915775806961736929635199404136165_u128;
(*_14) = _21;
(*_8) = [(-11259194630133383066248952385256861046_i128),6768516294600389825412403234523622315_i128,55469920817699528466160980894716077316_i128,108597570700565491235196976953435567774_i128,60420103548474231257842921315930362972_i128,21104514555327742190838322571510736736_i128,(-4495218817273046637944050619813025078_i128)];
_6 = [_19,_19];
(*_8) = [94791309408170308120494074382026719548_i128,127327943122523684056700465375414462881_i128,128186397327356873184220418712095109286_i128,(-123071312935552333098108918170836487342_i128),(-138698371478268628209854809117907796084_i128),149261831410526026530610429812584433790_i128,(-19015088402238485652648023568821327717_i128)];
(*_8) = [(-82901477794403492687603789319280523373_i128),(-125286551179144539685403033144936324298_i128),108248451680287881809227727061341601233_i128,20660533324455770628834254112606999210_i128,(-15494818224270761481892566025505689428_i128),(-35098095447915503369574278156721402344_i128),162563611284142056510783967264042047339_i128];
(*_11) = _17.0 as u128;
Goto(bb19)
}
bb19 = {
_17.2 = [_9];
(*_11) = 56768197088002953771147150910669493998_u128;
(*_14) = _21 | _21;
(*_14) = _1 as isize;
RET = false;
(*_14) = _21 >> (*_11);
(*_8) = [(-112205791080644703220888003879544042773_i128),(-98570959061108066988930251708106918319_i128),(-47928871551649182735152313411987290115_i128),149229852889222744251592283155015844565_i128,(-80291194876566922329869058117037154907_i128),(-42677391710534289503012539797475827575_i128),(-40685850568991108659416905864281413370_i128)];
(*_11) = 55858473904486954649255979721019650365_u128;
_21 = (*_14);
(*_8) = [(-115662241477233252790975904793142235553_i128),49878218345802431596660553862236583925_i128,(-159598705849825697006131558900775418661_i128),(-100991562639726245290517826346238701858_i128),(-53737795792361692398026444246881062308_i128),156774589379031816354383834944304278637_i128,(-107416526696119801116454492217430593644_i128)];
(*_8) = [(-23200458078928807048695390622255148702_i128),(-3920876120685661555810484141821145210_i128),(-152709710305673304486969751788726166485_i128),7032622053680060930196013498161073619_i128,43400931955619994907465026449687261925_i128,66016325132790175475651900024726429360_i128,152615786290646819344474795566107133700_i128];
(*_14) = _21 + _21;
(*_8) = [(-113828355540256688063617035971907808818_i128),123085751008865370216342486128440106531_i128,(-61726549407861119133814851426218586429_i128),81501641599832920221189424439892851639_i128,110871273712861663860085406076666020933_i128,28803790404344350557319875454688603690_i128,60018819433511657220523188780036762713_i128];
(*_14) = _21 & _21;
_28 = _19;
_13 = _26 as f32;
(*_8) = [(-69381082080922782221990724872890012529_i128),(-59795673157013837418490339142965912348_i128),27631685736935059332692313066825263521_i128,(-15726793681087178206319977254133048508_i128),139492152405798684970274146443927944856_i128,(-81066080821913158904706190404017747515_i128),(-98671610352490482809005530743814158445_i128)];
_13 = 187_u8 as f32;
(*_8) = [(-2250671038654895692787371554813142572_i128),117917007199930917377184556115793590447_i128,147285883955498696781471124738476219445_i128,(-88301481289241931076215938728843422513_i128),30216895330113537122843277461460154536_i128,(-27788929214859729240262053332010675885_i128),(-19712289783037843948122701420704071336_i128)];
_11 = core::ptr::addr_of_mut!((*_11));
(*_8) = [62806220640129668611479822219726478288_i128,139306542246978242808932167355885214527_i128,128048648809501887235723933252138551866_i128,(-33534380094366390270523425506177039789_i128),(-119895235908823521400147737580205421776_i128),56642938810964233659184510069851826028_i128,(-121951432799001131706168376584260695226_i128)];
(*_8) = [73841346634060093788841943434375268606_i128,(-100928961716759292287763934889811307645_i128),(-14534542279680285604413652928635873567_i128),(-54906571310740260998890376916984439374_i128),(-17048602856658839564822060975410850419_i128),(-95127603968769175761729516299472954976_i128),152519011936840071697840574063052285911_i128];
(*_8) = [72761046407799459663519698355220600859_i128,(-74334114120713256835951557429417423935_i128),16011383931296013320263730908526617684_i128,115066777995123702016810609253894643888_i128,47223665369490070991789503223225738832_i128,(-125947949341618067774386427685422607660_i128),107369290758524284980677044653882008377_i128];
Goto(bb20)
}
bb20 = {
(*_14) = _21;
(*_11) = 301622602254269794322749979454375958546_u128;
(*_8) = [34682892482863195857689153898072825766_i128,(-101118190262484243917709745750574649911_i128),(-74963863234472865578289130735686629701_i128),81117756163343400471498010308147175673_i128,103177778001041583089963952218956186853_i128,26978376327537304929465692000056513926_i128,(-75042162367907629924604853115158317832_i128)];
_10.1 = _2 as u128;
_18 = !32621113659485154173356733284367935971_i128;
(*_11) = 237194246279378505880663264401493062241_u128;
(*_14) = _21;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
(*_11) = !257117550388063562139626822090939375967_u128;
_24 = _23 - _23;
(*_14) = _21 >> _10.1;
(*_11) = 249169671603982622815686801696862488046_u128 + 135378571930678167493466957654449615738_u128;
_1 = 5162425286303235657_u64 ^ 5233159667161702662_u64;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
_6 = [_28,_28];
(*_14) = _21 & _21;
(*_14) = _21 + _21;
_29 = (_9, _9);
(*_11) = (*_14) as u128;
_22 = !_3;
(*_11) = 188500661243639326492574746774832043218_u128;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
Goto(bb21)
}
bb21 = {
(*_11) = _2 as u128;
_33 = [RET,RET,RET];
(*_11) = _26 as u128;
(*_14) = _21;
(*_14) = -_21;
(*_11) = 144899090070083216059527051530217360871_u128;
_24 = _23 * _23;
match (*_11) {
0 => bb1,
144899090070083216059527051530217360871 => bb22,
_ => bb7
}
}
bb22 = {
(*_11) = !147149504781571217989650291362274384420_u128;
(*_14) = RET as isize;
RET = false ^ true;
(*_14) = _1 as isize;
(*_11) = (*_14) as u128;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
_30 = _28;
_29.0 = _29.1 ^ _29.1;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
_27 = _2 as i8;
(*_14) = _21 * _21;
Goto(bb23)
}
bb23 = {
(*_11) = 242949838177208151540342913072640699930_u128 >> (*_14);
_21 = (*_14) >> (*_11);
(*_14) = -_21;
_11 = core::ptr::addr_of_mut!((*_11));
(*_11) = 85086704985267881928279041224130176345_u128;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
(*_11) = 197245253240822162017531455502353871835_u128 ^ 38396322280721894675057015020910843486_u128;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
(*_11) = 30988802498338960794081506821343120165_u128 & 146612486294734010090942888402253774907_u128;
_37 = !(*_14);
(*_11) = !41894030489496853822343839837082094464_u128;
(*_11) = 120269909195834374946546200257301211787_u128 + 56360008834370301297077251521912676388_u128;
_10.1 = 312642936621934756532693698465936288574_u128 * 195580424424158388719808670600712927281_u128;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
_30 = _28;
(*_14) = _37 - _21;
(*_14) = _13 as isize;
_23 = -_24;
_35 = _37 & (*_14);
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
(*_11) = !333858035531373191161109488061076551792_u128;
_19 = _28;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
_34 = core::ptr::addr_of!((*_14));
Goto(bb24)
}
bb24 = {
(*_14) = _37 + _21;
(*_14) = _21 << _37;
(*_11) = _1 as u128;
(*_11) = 80933503845512992872583020983689248471_u128 - 146056450755424573847912526882179584741_u128;
(*_11) = RET as u128;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
(*_11) = 143105656193285400592719064524863031213_u128 >> (*_14);
_24 = _26 as f64;
(*_14) = _21 ^ _21;
(*_14) = _21;
(*_8) = [_18,_18,_18,_18,_18,_18,_18];
_44.fld0 = (*_11) != (*_11);
(*_11) = 175915437127291216697751972432973928482_u128 & 186300539125346010832941125930678147895_u128;
(*_11) = 14579967727523779816239754609978625959_u128 & 313973371972460251091823950032501899221_u128;
RET = !_44.fld0;
_44.fld4.0 = _24;
_26 = 4826_i16 | 7159_i16;
Goto(bb25)
}
bb25 = {
Call(_47 = dump_var(Move(_6), Move(_21), Move(_22), Move(_19)), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
Call(_47 = dump_var(Move(_33), Move(_4), Move(_1), Move(_26)), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
Call(_47 = dump_var(Move(_9), _48, _48, _48), ReturnTo(bb28), UnwindUnreachable())
}
bb28 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn3(mut _1: bool,mut _2: u128,mut _3: u128,mut _4: u128,mut _5: *mut u128,mut _6: u128,mut _7: i32) -> isize {
mir! {
type RET = isize;
let _8: &'static (Adt58, u128);
let _9: bool;
let _10: *mut f32;
let _11: Adt63;
let _12: u8;
let _13: &'static i32;
let _14: [i64; 6];
let _15: &'static (Adt58, u128);
let _16: *mut [usize; 1];
let _17: *const isize;
let _18: *mut [usize; 1];
let _19: (u8, &'static mut [isize; 3], i64, f64);
let _20: isize;
let _21: u8;
let _22: u32;
let _23: i8;
let _24: u64;
let _25: isize;
let _26: &'static mut isize;
let _27: bool;
let _28: (u8, &'static mut [isize; 3], i64, f64);
let _29: bool;
let _30: i64;
let _31: f64;
let _32: ([i32; 4],);
let _33: isize;
let _34: u128;
let _35: f32;
let _36: i16;
let _37: isize;
let _38: ();
let _39: ();
{
RET = 5480129921454564493_u64 as isize;
_3 = !_6;
_6 = !_4;
_6 = 30_u8 as u128;
_3 = !_4;
_3 = _6;
RET = !9223372036854775807_isize;
_5 = core::ptr::addr_of_mut!(_3);
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = _4;
(*_5) = _6;
(*_5) = _4 & _4;
(*_5) = _2 * _4;
(*_5) = _6 * _4;
(*_5) = _4 & _4;
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = _6 >> _4;
_6 = (*_5);
RET = 9223372036854775807_isize >> (*_5);
(*_5) = _6 * _2;
(*_5) = !_6;
(*_5) = _6;
(*_5) = !_4;
(*_5) = _6 + _6;
Call(_3 = fn4(Move(_5), RET, RET, _2, _4, _7, _7, RET, _6, _1, RET, RET), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_6 = _3;
Goto(bb2)
}
bb2 = {
RET = 37_isize;
_9 = !_1;
_9 = !_1;
_7 = 1683614906_i32 << _3;
RET = 1_u8 as isize;
_6 = _3 & _3;
_6 = RET as u128;
_3 = _4 * _6;
_6 = _1 as u128;
_5 = core::ptr::addr_of_mut!(_6);
_9 = !_1;
(*_5) = _4;
(*_5) = _3;
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = _3 * _2;
_3 = 2781795807_u32 as u128;
Goto(bb3)
}
bb3 = {
_4 = 7433757205996756807_i64 as u128;
Call((*_5) = core::intrinsics::transmute(_3), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
(*_5) = 38649_u16 as u128;
(*_5) = _2 * _4;
(*_5) = !_4;
_7 = 275467687_i32 & 1798461448_i32;
_6 = !_4;
(*_5) = _9 as u128;
_6 = 5096540360146618065_i64 as u128;
(*_5) = _3 + _2;
(*_5) = !_4;
(*_5) = 12_i8 as u128;
(*_5) = !_4;
_6 = _3 - _4;
(*_5) = _2 + _4;
(*_5) = !_2;
_13 = &_7;
_3 = (*_5) * (*_5);
_7 = -1366566666_i32;
_7 = 1412278823_i32;
(*_5) = _2 | _4;
(*_5) = _3 * _2;
(*_5) = _3;
_4 = (*_5);
Goto(bb5)
}
bb5 = {
(*_5) = RET as u128;
match _7 {
0 => bb1,
1 => bb2,
2 => bb4,
3 => bb6,
4 => bb7,
1412278823 => bb9,
_ => bb8
}
}
bb6 = {
(*_5) = 38649_u16 as u128;
(*_5) = _2 * _4;
(*_5) = !_4;
_7 = 275467687_i32 & 1798461448_i32;
_6 = !_4;
(*_5) = _9 as u128;
_6 = 5096540360146618065_i64 as u128;
(*_5) = _3 + _2;
(*_5) = !_4;
(*_5) = 12_i8 as u128;
(*_5) = !_4;
_6 = _3 - _4;
(*_5) = _2 + _4;
(*_5) = !_2;
_13 = &_7;
_3 = (*_5) * (*_5);
_7 = -1366566666_i32;
_7 = 1412278823_i32;
(*_5) = _2 | _4;
(*_5) = _3 * _2;
(*_5) = _3;
_4 = (*_5);
Goto(bb5)
}
bb7 = {
_6 = _3;
Goto(bb2)
}
bb8 = {
RET = 37_isize;
_9 = !_1;
_9 = !_1;
_7 = 1683614906_i32 << _3;
RET = 1_u8 as isize;
_6 = _3 & _3;
_6 = RET as u128;
_3 = _4 * _6;
_6 = _1 as u128;
_5 = core::ptr::addr_of_mut!(_6);
_9 = !_1;
(*_5) = _4;
(*_5) = _3;
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = _3 * _2;
_3 = 2781795807_u32 as u128;
Goto(bb3)
}
bb9 = {
(*_5) = _4;
(*_5) = (-56897113108338672566582163466199666810_i128) as u128;
(*_5) = !_2;
(*_5) = _3 - _3;
_9 = !_1;
RET = 101_isize * (-9223372036854775808_isize);
_9 = (*_5) <= (*_5);
(*_5) = !_3;
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = !_3;
_6 = _4 & _4;
(*_5) = _2 | _4;
(*_5) = _2;
_9 = _1 < _1;
(*_5) = _9 as u128;
_12 = 90_u8;
(*_5) = !_3;
(*_5) = _2 | _4;
_17 = core::ptr::addr_of!(RET);
(*_17) = _7 as isize;
_9 = !_1;
_14 = [4012379971081130547_i64,7805681059659486519_i64,(-3902587321705490253_i64),(-1123975731293901318_i64),4986122879896702908_i64,(-7147045104636571799_i64)];
(*_5) = _4;
_19.2 = !6398465508377888453_i64;
Goto(bb10)
}
bb10 = {
(*_17) = 9223372036854775807_isize << (*_5);
(*_5) = _4 ^ _2;
_19.0 = _12 | _12;
(*_17) = (-96_i8) as isize;
_19.2 = (-3997630982219433080_i64) | 4168637953485900765_i64;
(*_5) = _4 - _4;
(*_5) = !_2;
(*_17) = 1_usize as isize;
(*_17) = _1 as isize;
(*_5) = _9 as u128;
(*_5) = _4;
(*_17) = 9223372036854775807_isize & (-4_isize);
(*_5) = (*_17) as u128;
(*_17) = -9223372036854775807_isize;
_12 = _19.0 | _19.0;
Goto(bb11)
}
bb11 = {
_25 = (*_17) - (*_17);
(*_5) = _2;
_2 = (*_5);
_7 = 1972775327_i32;
_22 = !1816013192_u32;
(*_5) = _4 << (*_17);
_14 = [_19.2,_19.2,_19.2,_19.2,_19.2,_19.2];
(*_5) = _12 as u128;
_27 = _1;
(*_5) = _3;
_9 = !_1;
(*_5) = _4 | _3;
_19.0 = _12 | _12;
(*_17) = _25 - _25;
RET = 99508252712518632626922371726363749488_i128 as isize;
(*_17) = _25;
(*_5) = !_3;
_19.3 = (*_5) as f64;
_29 = _27;
(*_5) = _2 ^ _3;
_19.2 = 8814550412392099037_i64;
Goto(bb12)
}
bb12 = {
_19.3 = (-126073812533829548399771393840860461632_i128) as f64;
(*_5) = _4 - _4;
(*_17) = _25;
(*_5) = _2 << (*_17);
_3 = !_6;
(*_5) = (-22560_i16) as u128;
(*_17) = _7 as isize;
(*_17) = _25;
match _19.2 {
0 => bb8,
1 => bb9,
2 => bb3,
8814550412392099037 => bb13,
_ => bb10
}
}
bb13 = {
_28.0 = !_19.0;
(*_17) = _25 & _25;
_21 = _19.3 as u8;
_23 = (-103_i8);
(*_17) = _25 | _25;
(*_5) = _3;
_28.0 = _19.0 << (*_5);
_14 = [_19.2,_19.2,_19.2,_19.2,_19.2,_19.2];
_28.0 = _12;
_14 = [_19.2,_19.2,_19.2,_19.2,_19.2,_19.2];
(*_5) = _3;
(*_17) = !_25;
Goto(bb14)
}
bb14 = {
_28.2 = !_19.2;
_28.3 = _19.3 + _19.3;
(*_17) = _25;
(*_17) = -_25;
(*_17) = _25 >> (*_5);
_6 = !_2;
_20 = (*_17) << (*_17);
(*_17) = _7 as isize;
_25 = _20 ^ _20;
_6 = _3 & _4;
_29 = (*_5) == _3;
_14 = [_19.2,_19.2,_28.2,_28.2,_19.2,_28.2];
(*_17) = _25 << (*_5);
_9 = !_27;
_19.2 = _28.2 & _28.2;
_33 = _29 as isize;
_33 = (*_17) | (*_17);
_2 = _22 as u128;
_4 = (*_5) ^ (*_5);
(*_5) = _3 ^ _4;
_7 = (-1823551573_i32);
_36 = !(-10028_i16);
_36 = -13233_i16;
_14 = [_19.2,_28.2,_28.2,_19.2,_19.2,_19.2];
_37 = (*_17);
(*_17) = !_37;
_22 = !423078080_u32;
Goto(bb15)
}
bb15 = {
Call(_38 = dump_var(Move(_36), Move(_29), Move(_37), Move(_6)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_38 = dump_var(Move(_33), Move(_21), Move(_27), Move(_2)), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Call(_38 = dump_var(Move(_22), _39, _39, _39), ReturnTo(bb18), UnwindUnreachable())
}
bb18 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn4(mut _1: *mut u128,mut _2: isize,mut _3: isize,mut _4: u128,mut _5: u128,mut _6: i32,mut _7: i32,mut _8: isize,mut _9: u128,mut _10: bool,mut _11: isize,mut _12: isize) -> u128 {
mir! {
type RET = u128;
let _13: &'static mut (Adt18, [usize; 1]);
let _14: (u16, bool, i128);
let _15: char;
let _16: char;
let _17: Adt41;
let _18: i128;
let _19: [i16; 6];
let _20: (i8, u32, [usize; 1], Adt47);
let _21: &'static *const u128;
let _22: f64;
let _23: char;
let _24: u32;
let _25: i16;
let _26: ([char; 2], Adt37);
let _27: bool;
let _28: &'static mut (Adt18, [usize; 1]);
let _29: Adt63;
let _30: isize;
let _31: *const isize;
let _32: ();
let _33: ();
{
_1 = core::ptr::addr_of_mut!(_5);
_11 = _12 + _12;
(*_1) = _4;
_1 = core::ptr::addr_of_mut!((*_1));
(*_1) = _9 >> _6;
(*_1) = _4 * _4;
_14 = (37350_u16, _10, (-125269379849192441656713328105760639515_i128));
_15 = '\u{c64df}';
_3 = _15 as isize;
_10 = _14.1 ^ _14.1;
(*_1) = _4;
RET = !(*_1);
match _14.2 {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
6 => bb7,
215012987071746021806661279326007571941 => bb9,
_ => bb8
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_9 = RET + (*_1);
(*_1) = _4 >> _7;
_14.2 = 22769516549091183794943323720852859710_i128 >> (*_1);
_8 = _7 as isize;
(*_1) = _14.2 as u128;
_18 = -_14.2;
(*_1) = _14.0 as u128;
_8 = _3 * _11;
(*_1) = _9 - _9;
_14.2 = -_18;
_18 = _14.2;
(*_1) = RET;
(*_1) = 206678997_u32 as u128;
Call(_16 = fn5(_9, Move(_1), _14.1, (*_1), _10, _4, (*_1)), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
_14 = (37862_u16, _10, _18);
match _14.0 {
37862 => bb11,
_ => bb7
}
}
bb11 = {
_14.2 = _18 & _18;
_1 = core::ptr::addr_of_mut!(RET);
(*_1) = 2702631644_u32 as u128;
(*_1) = _9 - _9;
(*_1) = !_9;
(*_1) = _9 + _5;
_4 = (*_1) & RET;
(*_1) = _14.2 as u128;
(*_1) = !_4;
(*_1) = _5 - _4;
(*_1) = 13_i8 as u128;
(*_1) = _9 << _2;
match _14.0 {
0 => bb3,
1 => bb12,
2 => bb13,
37862 => bb15,
_ => bb14
}
}
bb12 = {
_14 = (37862_u16, _10, _18);
match _14.0 {
37862 => bb11,
_ => bb7
}
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
_15 = _16;
_14.0 = 27_u8 as u16;
_9 = (*_1) + (*_1);
(*_1) = 28952_i16 as u128;
(*_1) = _9 | _9;
(*_1) = _4 & _4;
(*_1) = _9;
_19 = [(-18278_i16),(-16380_i16),5100_i16,(-27328_i16),18258_i16,13721_i16];
_18 = _14.2 << _12;
_14 = (26052_u16, _10, _18);
(*_1) = _14.0 as u128;
_20.0 = _14.0 as i8;
(*_1) = _4;
_16 = _15;
(*_1) = _14.1 as u128;
Call(RET = core::intrinsics::bswap(_9), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
(*_1) = _9 << _9;
(*_1) = _16 as u128;
_7 = !_6;
_20.1 = 3762969366_u32;
_1 = core::ptr::addr_of_mut!((*_1));
(*_1) = _9 - _9;
_22 = 10511_i16 as f64;
_18 = (*_1) as i128;
_14.2 = _18;
_23 = _16;
_20.1 = 2034919227_u32 * 1226141791_u32;
_20.2 = [674532463218716695_usize];
_22 = 32722_i16 as f64;
(*_1) = _9 | _9;
(*_1) = !_4;
(*_1) = _9 | _5;
_19 = [27035_i16,22079_i16,(-14843_i16),30102_i16,7455_i16,(-17362_i16)];
_14 = (52059_u16, _10, _18);
(*_1) = _9 ^ _9;
_19 = [(-29896_i16),(-13665_i16),(-10043_i16),8656_i16,(-27990_i16),8972_i16];
_7 = 2065969759205106986_i64 as i32;
_14.0 = 369_u16 << (*_1);
(*_1) = _20.1 as u128;
_14.2 = _11 as i128;
_19 = [(-25246_i16),27355_i16,22891_i16,7182_i16,5103_i16,24295_i16];
Call((*_1) = core::intrinsics::transmute(_18), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
(*_1) = _14.0 as u128;
_24 = _20.1 << (*_1);
RET = _14.0 as u128;
_14.1 = (*_1) >= (*_1);
_26.0 = [_16,_23];
(*_1) = 10831_i16 as u128;
_18 = _14.2 << _24;
(*_1) = _4 - _9;
_7 = _11 as i32;
_14 = (27439_u16, _10, _18);
_20.2 = [1_usize];
(*_1) = _9 & _4;
_15 = _16;
_27 = _14.1 ^ _10;
(*_1) = _9 + _4;
_7 = -_6;
Goto(bb18)
}
bb18 = {
Call(_32 = dump_var(Move(_23), Move(_8), Move(_10), Move(_4)), ReturnTo(bb19), UnwindUnreachable())
}
bb19 = {
Call(_32 = dump_var(Move(_12), Move(_5), Move(_18), Move(_15)), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
Call(_32 = dump_var(Move(_24), _33, _33, _33), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn5(mut _1: u128,mut _2: *mut u128,mut _3: bool,mut _4: u128,mut _5: bool,mut _6: u128,mut _7: u128) -> char {
mir! {
type RET = char;
let _8: i128;
let _9: *mut [i32; 4];
let _10: isize;
let _11: bool;
let _12: usize;
let _13: isize;
let _14: &'static mut [i128; 7];
let _15: isize;
let _16: Adt41;
let _17: (Adt37, (i8, u32, [usize; 1], Adt47));
let _18: [u16; 5];
let _19: i16;
let _20: i128;
let _21: &'static bool;
let _22: Adt56;
let _23: isize;
let _24: u128;
let _25: [isize; 3];
let _26: i128;
let _27: &'static mut u128;
let _28: i64;
let _29: u16;
let _30: [char; 2];
let _31: u16;
let _32: *const isize;
let _33: i64;
let _34: bool;
let _35: [u16; 5];
let _36: f64;
let _37: &'static mut [i128; 7];
let _38: f64;
let _39: &'static mut f64;
let _40: bool;
let _41: *mut ([i32; 4],);
let _42: [u16; 5];
let _43: i16;
let _44: [i64; 6];
let _45: char;
let _46: *mut [i128; 7];
let _47: *mut [usize; 1];
let _48: (u16, bool, i128);
let _49: (u16, bool, i128);
let _50: [isize; 3];
let _51: (*mut f32, char);
let _52: f32;
let _53: &'static mut [isize; 3];
let _54: bool;
let _55: *const isize;
let _56: (Adt58, u128);
let _57: char;
let _58: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _59: isize;
let _60: *const u128;
let _61: usize;
let _62: ([i32; 4],);
let _63: (*const u128, char);
let _64: i128;
let _65: &'static i32;
let _66: (u32, &'static bool, u128, [i64; 8]);
let _67: f64;
let _68: Adt56;
let _69: &'static mut f64;
let _70: &'static *mut [i128; 7];
let _71: ((*mut f32, char),);
let _72: *mut [usize; 1];
let _73: u32;
let _74: &'static [i32; 4];
let _75: bool;
let _76: (char, Adt18);
let _77: *mut u128;
let _78: isize;
let _79: char;
let _80: ([i32; 4],);
let _81: ([u64; 6], [char; 2], i16, *mut u128);
let _82: (Adt18, [usize; 1]);
let _83: (u32, &'static bool, u128, [i64; 8]);
let _84: u16;
let _85: i128;
let _86: f32;
let _87: [i128; 7];
let _88: &'static [usize; 1];
let _89: isize;
let _90: &'static *mut [i128; 7];
let _91: usize;
let _92: u32;
let _93: char;
let _94: bool;
let _95: ((*const u128, char),);
let _96: f64;
let _97: u32;
let _98: [i64; 8];
let _99: Adt47;
let _100: i16;
let _101: ();
let _102: ();
{
_8 = _3 as i128;
RET = '\u{828d}';
Goto(bb1)
}
bb1 = {
_7 = !_6;
_4 = _6 - _1;
_1 = _6 + _4;
_3 = _5 != _5;
_6 = _1 << _8;
_12 = !6_usize;
_6 = _1 + _1;
RET = '\u{d1b4}';
_1 = _4;
_7 = _4;
_10 = !112_isize;
_15 = _10;
_7 = 21103_u16 as u128;
RET = '\u{a2f5e}';
_7 = _6 | _6;
Goto(bb2)
}
bb2 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
(*_2) = !_4;
_4 = _7 << (*_2);
_18 = [58982_u16,47434_u16,27468_u16,21966_u16,9265_u16];
(*_2) = _5 as u128;
_15 = _13 >> _6;
(*_2) = _4;
_17.1.1 = 3174748369_u32;
_15 = (-1384974647_i32) as isize;
(*_2) = _7 - _4;
_11 = _3 ^ _3;
(*_2) = _4 >> _4;
(*_2) = _4;
(*_2) = _7;
_5 = (*_2) <= (*_2);
(*_2) = _3 as u128;
_17.1.2 = [_12];
(*_2) = _7 - _4;
Call(_8 = fn6(_5, _17.1.2, _5, _13, Move(_2), _3, (*_2), (*_2), (*_2), (*_2), _13), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
_2 = core::ptr::addr_of_mut!(_4);
(*_2) = _6 ^ _6;
(*_2) = _1 - _7;
_11 = _8 > _8;
(*_2) = _6 + _6;
(*_2) = 21006_u16 as u128;
_17.1.0 = -25_i8;
_6 = (*_2);
(*_2) = _7;
_22.fld2 = [(-2924664030528770186_i64),5114521469436997525_i64,(-7858216562123979151_i64),(-4458103622591948706_i64),(-6436964748731870672_i64),5600904398942107724_i64,4568520876598923710_i64,300764497325713367_i64];
_22.fld2 = [5223765622054699420_i64,(-5537979505306257189_i64),318827879709810236_i64,7750579077505907449_i64,1081285600946483488_i64,(-4730032376365516534_i64),5496816380464673210_i64,7446061369891977797_i64];
(*_2) = _7 ^ _6;
(*_2) = _7 & _7;
_3 = !_11;
_22.fld1 = RET as i64;
(*_2) = 1819367086005822018_u64 as u128;
(*_2) = !_1;
_6 = (*_2) ^ _7;
(*_2) = _1;
match _17.1.1 {
3174748369 => bb5,
_ => bb3
}
}
bb5 = {
(*_2) = _1 << _8;
_7 = !(*_2);
(*_2) = !_7;
(*_2) = _7 | _7;
_22.fld3 = _17.1.0;
_8 = 89374433857581495607446719992361956152_i128 >> (*_2);
(*_2) = _7 | _7;
(*_2) = (-1493920644_i32) as u128;
RET = '\u{37af9}';
(*_2) = !_6;
_8 = 121876140674204868032263085447398521311_i128;
_23 = RET as isize;
(*_2) = !_7;
(*_2) = !_7;
_17.1.2 = [_12];
_5 = (*_2) < (*_2);
_25 = [_13,_15,_10];
match _8 {
0 => bb3,
121876140674204868032263085447398521311 => bb6,
_ => bb4
}
}
bb6 = {
_7 = (*_2);
(*_2) = !_6;
_22.fld0 = _5;
_12 = 0_usize ^ 6_usize;
_13 = -_23;
(*_2) = 227_u8 as u128;
_22.fld4.1 = _8 + _8;
RET = '\u{43783}';
_19 = !(-17857_i16);
(*_2) = 10664_u16 as u128;
_22.fld4.0 = (-64873552_i32) as f64;
_20 = _8;
_8 = -_22.fld4.1;
_23 = _7 as isize;
_12 = 15383709310794348026_usize;
(*_2) = 154_u8 as u128;
(*_2) = _7 - _6;
_3 = _11 ^ _22.fld0;
match _17.1.1 {
3174748369 => bb7,
_ => bb1
}
}
bb7 = {
_18 = [41798_u16,26868_u16,866_u16,47364_u16,27673_u16];
_15 = _23 & _23;
(*_2) = !_7;
(*_2) = _7 ^ _7;
_22.fld4.0 = _4 as f64;
_22.fld5 = 2643_u16 as i128;
_30 = [RET,RET];
_22.fld3 = _17.1.0 ^ _17.1.0;
(*_2) = _7 >> _15;
_1 = (*_2);
_22.fld1 = 94_u8 as i64;
_4 = _7;
(*_2) = _1;
_3 = _11;
(*_2) = _1 ^ _1;
(*_2) = _17.1.1 as u128;
(*_2) = !_7;
(*_2) = _1 + _7;
match _12 {
0 => bb1,
1 => bb6,
2 => bb5,
3 => bb4,
15383709310794348026 => bb9,
_ => bb8
}
}
bb8 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb9 = {
_17.1.0 = 740149649_i32 as i8;
_7 = (*_2) >> (*_2);
(*_2) = _22.fld3 as u128;
_22.fld1 = (-5638487721108478909_i64) & (-271032586844084039_i64);
_29 = _22.fld4.1 as u16;
_10 = _15 * _15;
_33 = -_22.fld1;
_18 = [_29,_29,_29,_29,_29];
_25 = [_10,_15,_10];
match _12 {
0 => bb8,
1 => bb7,
2 => bb6,
3 => bb4,
15383709310794348026 => bb10,
_ => bb5
}
}
bb10 = {
(*_2) = !_6;
_36 = -_22.fld4.0;
_24 = (*_2) | _1;
_29 = !27284_u16;
_22.fld4.2 = Adt18::Variant3 { fld0: _11,fld1: RET,fld2: _15,fld3: _36,fld4: _17.1.1,fld5: 6998050076599958889_u64,fld6: 191_u8,fld7: _22.fld4.1 };
place!(Field::<u32>(Variant(_22.fld4.2, 3), 4)) = _29 as u32;
_15 = -_10;
(*_2) = _7;
_22.fld4.0 = _1 as f64;
(*_2) = !_1;
_34 = _11 | _5;
(*_2) = _6 ^ _24;
(*_2) = _1 & _1;
(*_2) = Field::<isize>(Variant(_22.fld4.2, 3), 2) as u128;
_38 = -Field::<f64>(Variant(_22.fld4.2, 3), 3);
_4 = 6062302345822781734_u64 as u128;
_22.fld4.0 = _38;
_22.fld5 = _22.fld4.1;
_1 = _36 as u128;
place!(Field::<u64>(Variant(_22.fld4.2, 3), 5)) = 7624620380386529805_u64 - 3975054094815073677_u64;
_22.fld4.1 = !_20;
Goto(bb11)
}
bb11 = {
_5 = _11;
_12 = 5_usize - 3_usize;
(*_2) = _1;
(*_2) = _7;
_26 = -Field::<i128>(Variant(_22.fld4.2, 3), 7);
_10 = _23 ^ _23;
place!(Field::<u8>(Variant(_22.fld4.2, 3), 6)) = Field::<u64>(Variant(_22.fld4.2, 3), 5) as u8;
_42 = [_29,_29,_29,_29,_29];
_22.fld0 = _5;
_22.fld2 = [_22.fld1,_22.fld1,_33,_33,_22.fld1,_22.fld1,_33,_33];
_31 = !_29;
_36 = -Field::<f64>(Variant(_22.fld4.2, 3), 3);
_40 = !Field::<bool>(Variant(_22.fld4.2, 3), 0);
_39 = &mut _36;
(*_2) = _24 << _1;
place!(Field::<isize>(Variant(_22.fld4.2, 3), 2)) = _15 ^ _23;
_3 = Field::<bool>(Variant(_22.fld4.2, 3), 0) & _11;
_25 = [Field::<isize>(Variant(_22.fld4.2, 3), 2),_15,_15];
(*_2) = _7 | _7;
_27 = &mut (*_2);
_35 = [_31,_29,_31,_29,_31];
_22.fld2 = [_33,_22.fld1,_33,_22.fld1,_22.fld1,_33,_22.fld1,_22.fld1];
Goto(bb12)
}
bb12 = {
(*_27) = _1 * _1;
(*_39) = _38 - _38;
(*_39) = _22.fld4.0 - _38;
match _17.1.1 {
0 => bb7,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
3174748369 => bb18,
_ => bb17
}
}
bb13 = {
_7 = (*_2);
(*_2) = !_6;
_22.fld0 = _5;
_12 = 0_usize ^ 6_usize;
_13 = -_23;
(*_2) = 227_u8 as u128;
_22.fld4.1 = _8 + _8;
RET = '\u{43783}';
_19 = !(-17857_i16);
(*_2) = 10664_u16 as u128;
_22.fld4.0 = (-64873552_i32) as f64;
_20 = _8;
_8 = -_22.fld4.1;
_23 = _7 as isize;
_12 = 15383709310794348026_usize;
(*_2) = 154_u8 as u128;
(*_2) = _7 - _6;
_3 = _11 ^ _22.fld0;
match _17.1.1 {
3174748369 => bb7,
_ => bb1
}
}
bb14 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb15 = {
(*_2) = _1 << _8;
_7 = !(*_2);
(*_2) = !_7;
(*_2) = _7 | _7;
_22.fld3 = _17.1.0;
_8 = 89374433857581495607446719992361956152_i128 >> (*_2);
(*_2) = _7 | _7;
(*_2) = (-1493920644_i32) as u128;
RET = '\u{37af9}';
(*_2) = !_6;
_8 = 121876140674204868032263085447398521311_i128;
_23 = RET as isize;
(*_2) = !_7;
(*_2) = !_7;
_17.1.2 = [_12];
_5 = (*_2) < (*_2);
_25 = [_13,_15,_10];
match _8 {
0 => bb3,
121876140674204868032263085447398521311 => bb6,
_ => bb4
}
}
bb16 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb17 = {
_18 = [41798_u16,26868_u16,866_u16,47364_u16,27673_u16];
_15 = _23 & _23;
(*_2) = !_7;
(*_2) = _7 ^ _7;
_22.fld4.0 = _4 as f64;
_22.fld5 = 2643_u16 as i128;
_30 = [RET,RET];
_22.fld3 = _17.1.0 ^ _17.1.0;
(*_2) = _7 >> _15;
_1 = (*_2);
_22.fld1 = 94_u8 as i64;
_4 = _7;
(*_2) = _1;
_3 = _11;
(*_2) = _1 ^ _1;
(*_2) = _17.1.1 as u128;
(*_2) = !_7;
(*_2) = _1 + _7;
match _12 {
0 => bb1,
1 => bb6,
2 => bb5,
3 => bb4,
15383709310794348026 => bb9,
_ => bb8
}
}
bb18 = {
_22.fld3 = !_17.1.0;
(*_39) = _38;
_28 = _22.fld1 | _33;
place!(Field::<f64>(Variant(_22.fld4.2, 3), 3)) = _17.1.0 as f64;
_32 = core::ptr::addr_of!(_23);
_44 = [_33,_28,_22.fld1,_22.fld1,_28,_22.fld1];
_26 = _31 as i128;
(*_27) = _31 as u128;
(*_32) = _15 - _15;
(*_27) = !_24;
_27 = &mut _24;
_22.fld0 = (*_27) != _7;
_35 = [_31,_31,_31,_31,_31];
(*_27) = _1 >> _7;
(*_39) = Field::<u8>(Variant(_22.fld4.2, 3), 6) as f64;
_47 = core::ptr::addr_of_mut!(_17.1.2);
_7 = Field::<char>(Variant(_22.fld4.2, 3), 1) as u128;
(*_47) = [_12];
_7 = _22.fld4.0 as u128;
_18 = [_31,_31,_31,_31,_31];
_17.1.0 = _22.fld3 | _22.fld3;
(*_27) = !_6;
(*_39) = _22.fld4.0 + _38;
place!(Field::<i128>(Variant(_22.fld4.2, 3), 7)) = Field::<u64>(Variant(_22.fld4.2, 3), 5) as i128;
(*_39) = _38;
(*_27) = !_7;
_27 = &mut _6;
match _20 {
0 => bb15,
1 => bb19,
2 => bb20,
121876140674204868032263085447398521311 => bb22,
_ => bb21
}
}
bb19 = {
_2 = core::ptr::addr_of_mut!(_4);
(*_2) = _6 ^ _6;
(*_2) = _1 - _7;
_11 = _8 > _8;
(*_2) = _6 + _6;
(*_2) = 21006_u16 as u128;
_17.1.0 = -25_i8;
_6 = (*_2);
(*_2) = _7;
_22.fld2 = [(-2924664030528770186_i64),5114521469436997525_i64,(-7858216562123979151_i64),(-4458103622591948706_i64),(-6436964748731870672_i64),5600904398942107724_i64,4568520876598923710_i64,300764497325713367_i64];
_22.fld2 = [5223765622054699420_i64,(-5537979505306257189_i64),318827879709810236_i64,7750579077505907449_i64,1081285600946483488_i64,(-4730032376365516534_i64),5496816380464673210_i64,7446061369891977797_i64];
(*_2) = _7 ^ _6;
(*_2) = _7 & _7;
_3 = !_11;
_22.fld1 = RET as i64;
(*_2) = 1819367086005822018_u64 as u128;
(*_2) = !_1;
_6 = (*_2) ^ _7;
(*_2) = _1;
match _17.1.1 {
3174748369 => bb5,
_ => bb3
}
}
bb20 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb21 = {
_7 = !_6;
_4 = _6 - _1;
_1 = _6 + _4;
_3 = _5 != _5;
_6 = _1 << _8;
_12 = !6_usize;
_6 = _1 + _1;
RET = '\u{d1b4}';
_1 = _4;
_7 = _4;
_10 = !112_isize;
_15 = _10;
_7 = 21103_u16 as u128;
RET = '\u{a2f5e}';
_7 = _6 | _6;
Goto(bb2)
}
bb22 = {
_19 = _1 as i16;
(*_47) = [_12];
_22.fld5 = Field::<i128>(Variant(_22.fld4.2, 3), 7) + _26;
(*_32) = Field::<isize>(Variant(_22.fld4.2, 3), 2) >> _7;
(*_27) = (*_39) as u128;
(*_47) = [_12];
(*_32) = (*_27) as isize;
place!(Field::<bool>(Variant(_22.fld4.2, 3), 0)) = (*_27) >= (*_27);
(*_32) = _10;
(*_47) = [_12];
(*_39) = -_38;
(*_27) = _1 << (*_32);
_42 = _18;
_22.fld1 = !_28;
_17.1.1 = _19 as u32;
(*_47) = [_12];
Goto(bb23)
}
bb23 = {
(*_39) = -_22.fld4.0;
_48.1 = _19 <= _19;
_49 = (_29, _22.fld0, _8);
(*_39) = _22.fld4.0;
(*_47) = [_12];
_22.fld2 = [_22.fld1,_22.fld1,_28,_28,_33,_28,_22.fld1,_33];
_31 = _49.0 - _29;
(*_32) = _17.1.1 as isize;
_16 = Adt41::Variant3 { fld0: _44,fld1: _17.1.1,fld2: Field::<u64>(Variant(_22.fld4.2, 3), 5),fld3: _28 };
(*_32) = _31 as isize;
place!(Field::<u64>(Variant(_16, 3), 2)) = Field::<char>(Variant(_22.fld4.2, 3), 1) as u64;
(*_47) = [_12];
_57 = Field::<char>(Variant(_22.fld4.2, 3), 1);
(*_32) = _19 as isize;
(*_27) = !_1;
_45 = _57;
(*_32) = Field::<isize>(Variant(_22.fld4.2, 3), 2);
(*_39) = _38 - _38;
_38 = (*_39) + (*_39);
(*_39) = _38;
_60 = core::ptr::addr_of!((*_27));
(*_60) = _7 * _1;
Goto(bb24)
}
bb24 = {
(*_39) = _22.fld4.0 + _38;
(*_39) = _22.fld4.0 + _38;
(*_39) = _38 * _22.fld4.0;
(*_32) = _10 << (*_27);
_22.fld4.1 = Field::<i128>(Variant(_22.fld4.2, 3), 7) - Field::<i128>(Variant(_22.fld4.2, 3), 7);
(*_39) = _22.fld4.0 + _22.fld4.0;
_17.1.0 = _22.fld3 & _22.fld3;
_17.0 = Adt37::Variant1 { fld0: Move(_47),fld1: _25,fld2: (*_47),fld3: _22.fld2,fld4: _22.fld4.2,fld5: (*_27),fld6: _28,fld7: _44 };
(*_60) = _7;
match _20 {
0 => bb19,
1 => bb12,
2 => bb3,
3 => bb21,
4 => bb5,
121876140674204868032263085447398521311 => bb25,
_ => bb16
}
}
bb25 = {
(*_27) = !_1;
_17.1.1 = Field::<u32>(Variant(_16, 3), 1) - Field::<u32>(Variant(_16, 3), 1);
place!(Field::<i128>(Variant(place!(Field::<Adt18>(Variant(_17.0, 1), 4)), 3), 7)) = _26;
_9 = core::ptr::addr_of_mut!(_62.0);
(*_27) = _1;
_22.fld4.2 = Adt18::Variant0 { fld0: _22.fld3,fld1: _45,fld2: (*_32) };
_50 = [(*_32),(*_32),(*_32)];
(*_9) = [(-544227834_i32),(-171800327_i32),1274026367_i32,(-676808061_i32)];
_56.1 = _19 as u128;
_1 = Field::<bool>(Variant(Field::<Adt18>(Variant(_17.0, 1), 4), 3), 0) as u128;
_57 = Field::<char>(Variant(_22.fld4.2, 0), 1);
(*_39) = -_22.fld4.0;
(*_27) = _56.1 * _56.1;
(*_32) = Field::<isize>(Variant(Field::<Adt18>(Variant(_17.0, 1), 4), 3), 2);
(*_9) = [(-257273551_i32),(-88616799_i32),(-1198798165_i32),1879320354_i32];
(*_27) = _7 & _56.1;
_23 = !_10;
(*_32) = !_10;
Goto(bb26)
}
bb26 = {
_54 = (*_32) <= (*_32);
_42 = [_31,_29,_31,_31,_49.0];
_51.1 = RET;
place!(Field::<[i64; 6]>(Variant(_17.0, 1), 7)) = _44;
_27 = &mut place!(Field::<u128>(Variant(_17.0, 1), 5));
_29 = _31 - _49.0;
_62.0 = [(-1785821333_i32),1184618733_i32,(-1103122487_i32),2056119430_i32];
_66.1 = &_34;
_59 = (*_32) >> (*_32);
(*_9) = [(-1382823158_i32),(-701635796_i32),1573695067_i32,(-131664837_i32)];
_56.0 = Adt58::Variant1 { fld0: 473758389_i32,fld1: _22.fld5,fld2: Move(_60) };
_51.1 = _57;
_51.1 = Field::<char>(Variant(_22.fld4.2, 0), 1);
place!(Field::<u32>(Variant(_16, 3), 1)) = 607956162_u32 >> (*_27);
(*_39) = _22.fld4.0 - _38;
_22.fld2 = [_22.fld1,_28,_33,Field::<i64>(Variant(_16, 3), 3),Field::<i64>(Variant(_16, 3), 3),_33,_28,_22.fld1];
(*_27) = _56.1 & _56.1;
_53 = &mut _25;
(*_27) = _26 as u128;
(*_9) = [986306640_i32,(-998395824_i32),745476064_i32,(-610839094_i32)];
_67 = -(*_39);
match _20 {
0 => bb27,
121876140674204868032263085447398521311 => bb29,
_ => bb28
}
}
bb27 = {
(*_2) = _1 << _8;
_7 = !(*_2);
(*_2) = !_7;
(*_2) = _7 | _7;
_22.fld3 = _17.1.0;
_8 = 89374433857581495607446719992361956152_i128 >> (*_2);
(*_2) = _7 | _7;
(*_2) = (-1493920644_i32) as u128;
RET = '\u{37af9}';
(*_2) = !_6;
_8 = 121876140674204868032263085447398521311_i128;
_23 = RET as isize;
(*_2) = !_7;
(*_2) = !_7;
_17.1.2 = [_12];
_5 = (*_2) < (*_2);
_25 = [_13,_15,_10];
match _8 {
0 => bb3,
121876140674204868032263085447398521311 => bb6,
_ => bb4
}
}
bb28 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb29 = {
(*_39) = _38 * _38;
place!(Field::<i32>(Variant(_56.0, 1), 0)) = (-198489610_i32);
_66.0 = Field::<u32>(Variant(_16, 3), 1);
_63.1 = Field::<char>(Variant(_22.fld4.2, 0), 1);
_49 = (_29, _40, _20);
(*_53) = [(*_32),(*_32),(*_32)];
(*_9) = [Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0)];
(*_39) = _22.fld4.0 + _22.fld4.0;
_66.1 = &_22.fld0;
_48 = (_29, _34, Field::<i128>(Variant(_56.0, 1), 1));
_63.0 = Move(Field::<*const u128>(Variant(_56.0, 1), 2));
_68.fld3 = 50_u8 as i8;
_68.fld5 = _48.2 >> _66.0;
(*_39) = _22.fld4.0 * _38;
(*_39) = _12 as f64;
(*_27) = _56.1 - _56.1;
(*_39) = -_38;
(*_27) = !_7;
(*_9) = [Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0)];
_61 = _12 >> (*_32);
(*_27) = 62_u8 as u128;
(*_53) = [(*_32),(*_32),(*_32)];
place!(Field::<isize>(Variant(_22.fld4.2, 0), 2)) = -(*_32);
_22.fld4.1 = !_68.fld5;
_68.fld1 = Field::<i64>(Variant(_16, 3), 3);
(*_32) = _10 & _59;
_49.2 = _68.fld5 * _22.fld4.1;
_26 = _68.fld5 + _22.fld4.1;
Goto(bb30)
}
bb30 = {
_51.0 = core::ptr::addr_of_mut!(_52);
_7 = (*_32) as u128;
place!(Field::<i32>(Variant(_56.0, 1), 0)) = (-1026052440_i32);
(*_9) = [Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0),Field::<i32>(Variant(_56.0, 1), 0)];
_65 = &place!(Field::<i32>(Variant(_56.0, 1), 0));
_43 = -_19;
_68 = _22;
(*_32) = Field::<isize>(Variant(_22.fld4.2, 0), 2) >> _1;
place!(Field::<u64>(Variant(_16, 3), 2)) = 9359963031765479847_u64;
(*_27) = _56.1;
(*_32) = _61 as isize;
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
_48 = _49;
_56.1 = 90_u8 as u128;
_13 = (*_27) as isize;
_66.2 = (*_65) as u128;
Call((*_27) = core::intrinsics::bswap(_1), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
_22.fld4 = (_68.fld4.0, _49.2, _68.fld4.2);
(*_39) = _38;
(*_53) = _50;
_50 = [(*_32),_15,(*_32)];
(*_27) = (*_32) as u128;
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
_41 = core::ptr::addr_of_mut!(_62);
_49.0 = _48.0 + _48.0;
(*_53) = [(*_32),(*_32),(*_32)];
(*_27) = _43 as u128;
(*_41).0 = [Field::<i32>(Variant(_56.0, 1), 0),(*_65),(*_65),(*_65)];
match (*_65) {
0 => bb1,
1 => bb23,
2 => bb13,
3 => bb32,
340282366920938463463374607430742159016 => bb34,
_ => bb33
}
}
bb32 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb33 = {
_6 = !_7;
_2 = core::ptr::addr_of_mut!(_6);
_5 = (*_2) > (*_2);
(*_2) = _4 & _7;
_13 = _15 | _10;
_17.1.0 = 84_i8 >> (*_2);
(*_2) = _7 >> _7;
(*_2) = _1;
_3 = !_5;
_17.1.2 = [_12];
(*_2) = _4;
(*_2) = _7 & _7;
(*_2) = _4;
_17.1.1 = 43_u8 as u32;
_17.1.1 = 1263267463_u32 - 3191246415_u32;
_19 = (-4115_i16) ^ (-49_i16);
Call((*_2) = core::intrinsics::transmute(_4), ReturnTo(bb3), UnwindUnreachable())
}
bb34 = {
(*_32) = _15;
(*_41).0 = [(*_65),(*_65),(*_65),(*_65)];
(*_41).0 = [(*_65),(*_65),(*_65),(*_65)];
_22.fld4.0 = -(*_39);
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
(*_32) = -Field::<isize>(Variant(_22.fld4.2, 0), 2);
(*_32) = Field::<isize>(Variant(_22.fld4.2, 0), 2);
place!(Field::<isize>(Variant(_68.fld4.2, 0), 2)) = (*_32) << (*_27);
(*_39) = -_67;
place!(Field::<*const u128>(Variant(_56.0, 1), 2)) = core::ptr::addr_of!((*_27));
(*_39) = _67 - _22.fld4.0;
_69 = Move(_39);
_71.0.1 = Field::<char>(Variant(_22.fld4.2, 0), 1);
_44 = Field::<[i64; 6]>(Variant(_16, 3), 0);
_64 = _26;
_8 = _26;
_43 = -_19;
_60 = core::ptr::addr_of!((*_27));
_66.3 = [Field::<i64>(Variant(_16, 3), 3),_22.fld1,Field::<i64>(Variant(_16, 3), 3),_68.fld1,_28,_33,_28,_68.fld1];
(*_53) = _50;
_49.1 = (*_60) <= _7;
_66.3 = _68.fld2;
(*_27) = _7;
_45 = _71.0.1;
place!(Field::<i8>(Variant(_22.fld4.2, 0), 0)) = _22.fld3;
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
_21 = &_40;
RET = _45;
match (*_65) {
0 => bb20,
1 => bb30,
2 => bb4,
3 => bb35,
4 => bb36,
340282366920938463463374607430742159016 => bb38,
_ => bb37
}
}
bb35 = {
_2 = core::ptr::addr_of_mut!(_4);
(*_2) = _6 ^ _6;
(*_2) = _1 - _7;
_11 = _8 > _8;
(*_2) = _6 + _6;
(*_2) = 21006_u16 as u128;
_17.1.0 = -25_i8;
_6 = (*_2);
(*_2) = _7;
_22.fld2 = [(-2924664030528770186_i64),5114521469436997525_i64,(-7858216562123979151_i64),(-4458103622591948706_i64),(-6436964748731870672_i64),5600904398942107724_i64,4568520876598923710_i64,300764497325713367_i64];
_22.fld2 = [5223765622054699420_i64,(-5537979505306257189_i64),318827879709810236_i64,7750579077505907449_i64,1081285600946483488_i64,(-4730032376365516534_i64),5496816380464673210_i64,7446061369891977797_i64];
(*_2) = _7 ^ _6;
(*_2) = _7 & _7;
_3 = !_11;
_22.fld1 = RET as i64;
(*_2) = 1819367086005822018_u64 as u128;
(*_2) = !_1;
_6 = (*_2) ^ _7;
(*_2) = _1;
match _17.1.1 {
3174748369 => bb5,
_ => bb3
}
}
bb36 = {
_7 = !_6;
_4 = _6 - _1;
_1 = _6 + _4;
_3 = _5 != _5;
_6 = _1 << _8;
_12 = !6_usize;
_6 = _1 + _1;
RET = '\u{d1b4}';
_1 = _4;
_7 = _4;
_10 = !112_isize;
_15 = _10;
_7 = 21103_u16 as u128;
RET = '\u{a2f5e}';
_7 = _6 | _6;
Goto(bb2)
}
bb37 = {
(*_2) = _1 << _8;
_7 = !(*_2);
(*_2) = !_7;
(*_2) = _7 | _7;
_22.fld3 = _17.1.0;
_8 = 89374433857581495607446719992361956152_i128 >> (*_2);
(*_2) = _7 | _7;
(*_2) = (-1493920644_i32) as u128;
RET = '\u{37af9}';
(*_2) = !_6;
_8 = 121876140674204868032263085447398521311_i128;
_23 = RET as isize;
(*_2) = !_7;
(*_2) = !_7;
_17.1.2 = [_12];
_5 = (*_2) < (*_2);
_25 = [_13,_15,_10];
match _8 {
0 => bb3,
121876140674204868032263085447398521311 => bb6,
_ => bb4
}
}
bb38 = {
_68.fld4.0 = _22.fld4.0 * _67;
_67 = -_68.fld4.0;
_63.0 = core::ptr::addr_of!((*_27));
(*_53) = _50;
(*_32) = _15;
_22.fld3 = _68.fld3 >> _59;
_71 = (Move(_51),);
(*_27) = _7 ^ _1;
_15 = _63.1 as isize;
_26 = Field::<i64>(Variant(_16, 3), 3) as i128;
place!(Field::<i8>(Variant(_22.fld4.2, 0), 0)) = _22.fld3 * _22.fld3;
_63.0 = core::ptr::addr_of!((*_27));
(*_27) = _7 ^ _1;
match (*_65) {
0 => bb32,
1 => bb2,
2 => bb20,
3 => bb37,
4 => bb36,
5 => bb15,
6 => bb39,
340282366920938463463374607430742159016 => bb41,
_ => bb40
}
}
bb39 = {
_17.1.0 = 740149649_i32 as i8;
_7 = (*_2) >> (*_2);
(*_2) = _22.fld3 as u128;
_22.fld1 = (-5638487721108478909_i64) & (-271032586844084039_i64);
_29 = _22.fld4.1 as u16;
_10 = _15 * _15;
_33 = -_22.fld1;
_18 = [_29,_29,_29,_29,_29];
_25 = [_10,_15,_10];
match _12 {
0 => bb8,
1 => bb7,
2 => bb6,
3 => bb4,
15383709310794348026 => bb10,
_ => bb5
}
}
bb40 = {
(*_39) = -_22.fld4.0;
_48.1 = _19 <= _19;
_49 = (_29, _22.fld0, _8);
(*_39) = _22.fld4.0;
(*_47) = [_12];
_22.fld2 = [_22.fld1,_22.fld1,_28,_28,_33,_28,_22.fld1,_33];
_31 = _49.0 - _29;
(*_32) = _17.1.1 as isize;
_16 = Adt41::Variant3 { fld0: _44,fld1: _17.1.1,fld2: Field::<u64>(Variant(_22.fld4.2, 3), 5),fld3: _28 };
(*_32) = _31 as isize;
place!(Field::<u64>(Variant(_16, 3), 2)) = Field::<char>(Variant(_22.fld4.2, 3), 1) as u64;
(*_47) = [_12];
_57 = Field::<char>(Variant(_22.fld4.2, 3), 1);
(*_32) = _19 as isize;
(*_27) = !_1;
_45 = _57;
(*_32) = Field::<isize>(Variant(_22.fld4.2, 3), 2);
(*_39) = _38 - _38;
_38 = (*_39) + (*_39);
(*_39) = _38;
_60 = core::ptr::addr_of!((*_27));
(*_60) = _7 * _1;
Goto(bb24)
}
bb41 = {
_40 = _34;
_66 = (Field::<u32>(Variant(_16, 3), 1), Move(_21), (*_27), _68.fld2);
_74 = &(*_9);
(*_53) = _50;
_66.2 = !(*_27);
_78 = -(*_32);
_68.fld1 = Field::<i64>(Variant(_16, 3), 3);
_26 = -_20;
(*_27) = _67 as u128;
_75 = (*_32) < Field::<isize>(Variant(_68.fld4.2, 0), 2);
_51.0 = core::ptr::addr_of_mut!(_52);
_18 = _35;
(*_27) = _1 & _1;
(*_32) = 106_u8 as isize;
place!(Field::<i8>(Variant(_22.fld4.2, 0), 0)) = _22.fld3 ^ _22.fld3;
_49.1 = _22.fld3 < _22.fld3;
match (*_65) {
0 => bb2,
340282366920938463463374607430742159016 => bb43,
_ => bb42
}
}
bb42 = {
(*_2) = !_4;
_4 = _7 << (*_2);
_18 = [58982_u16,47434_u16,27468_u16,21966_u16,9265_u16];
(*_2) = _5 as u128;
_15 = _13 >> _6;
(*_2) = _4;
_17.1.1 = 3174748369_u32;
_15 = (-1384974647_i32) as isize;
(*_2) = _7 - _4;
_11 = _3 ^ _3;
(*_2) = _4 >> _4;
(*_2) = _4;
(*_2) = _7;
_5 = (*_2) <= (*_2);
(*_2) = _3 as u128;
_17.1.2 = [_12];
(*_2) = _7 - _4;
Call(_8 = fn6(_5, _17.1.2, _5, _13, Move(_2), _3, (*_2), (*_2), (*_2), (*_2), _13), ReturnTo(bb4), UnwindUnreachable())
}
bb43 = {
(*_9) = [(*_65),(*_65),Field::<i32>(Variant(_56.0, 1), 0),(*_65)];
_89 = _10 | _59;
(*_27) = _1 ^ _1;
(*_32) = _78 & _13;
_33 = _28;
_48 = (_49.0, _11, _68.fld5);
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
(*_32) = Field::<isize>(Variant(_68.fld4.2, 0), 2);
_49.0 = _48.0 >> (*_27);
(*_9) = [(*_65),(*_65),Field::<i32>(Variant(_56.0, 1), 0),(*_65)];
_68.fld4.0 = _67 + _67;
(*_27) = !_7;
_23 = !_89;
match Field::<i32>(Variant(_56.0, 1), 0) {
0 => bb42,
1 => bb19,
2 => bb44,
340282366920938463463374607430742159016 => bb46,
_ => bb45
}
}
bb44 = {
_7 = !_6;
_4 = _6 - _1;
_1 = _6 + _4;
_3 = _5 != _5;
_6 = _1 << _8;
_12 = !6_usize;
_6 = _1 + _1;
RET = '\u{d1b4}';
_1 = _4;
_7 = _4;
_10 = !112_isize;
_15 = _10;
_7 = 21103_u16 as u128;
RET = '\u{a2f5e}';
_7 = _6 | _6;
Goto(bb2)
}
bb45 = {
_2 = core::ptr::addr_of_mut!(_4);
(*_2) = _6 ^ _6;
(*_2) = _1 - _7;
_11 = _8 > _8;
(*_2) = _6 + _6;
(*_2) = 21006_u16 as u128;
_17.1.0 = -25_i8;
_6 = (*_2);
(*_2) = _7;
_22.fld2 = [(-2924664030528770186_i64),5114521469436997525_i64,(-7858216562123979151_i64),(-4458103622591948706_i64),(-6436964748731870672_i64),5600904398942107724_i64,4568520876598923710_i64,300764497325713367_i64];
_22.fld2 = [5223765622054699420_i64,(-5537979505306257189_i64),318827879709810236_i64,7750579077505907449_i64,1081285600946483488_i64,(-4730032376365516534_i64),5496816380464673210_i64,7446061369891977797_i64];
(*_2) = _7 ^ _6;
(*_2) = _7 & _7;
_3 = !_11;
_22.fld1 = RET as i64;
(*_2) = 1819367086005822018_u64 as u128;
(*_2) = !_1;
_6 = (*_2) ^ _7;
(*_2) = _1;
match _17.1.1 {
3174748369 => bb5,
_ => bb3
}
}
bb46 = {
(*_27) = _61 as u128;
_26 = _22.fld4.1;
_83.3 = _22.fld2;
place!(Field::<i8>(Variant(_22.fld4.2, 0), 0)) = _22.fld3 >> (*_27);
(*_32) = _49.0 as isize;
(*_32) = _89 << (*_27);
_76 = (_45, _68.fld4.2);
_71.0.0 = core::ptr::addr_of_mut!(_86);
_92 = _66.0 - _66.0;
_73 = !_66.0;
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
_89 = _59 >> (*_27);
_87 = [_49.2,_26,_68.fld4.1,_20,_49.2,_26,_22.fld4.1];
(*_9) = [(*_65),Field::<i32>(Variant(_56.0, 1), 0),(*_65),(*_65)];
(*_27) = _7;
place!(Field::<isize>(Variant(_68.fld4.2, 0), 2)) = (*_65) as isize;
_60 = core::ptr::addr_of!((*_27));
_81.0 = [Field::<u64>(Variant(_16, 3), 2),Field::<u64>(Variant(_16, 3), 2),Field::<u64>(Variant(_16, 3), 2),Field::<u64>(Variant(_16, 3), 2),Field::<u64>(Variant(_16, 3), 2),Field::<u64>(Variant(_16, 3), 2)];
_7 = (*_27) + (*_27);
_93 = Field::<char>(Variant(_22.fld4.2, 0), 1);
_80 = _62;
_95.0.0 = core::ptr::addr_of!((*_60));
_11 = _1 > (*_60);
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
place!(Field::<i8>(Variant(_22.fld4.2, 0), 0)) = _22.fld3;
_28 = -_68.fld1;
_68.fld5 = _49.2;
_95.0 = (Move(_60), _57);
_68.fld3 = _22.fld0 as i8;
match (*_65) {
0 => bb5,
1 => bb4,
2 => bb47,
3 => bb48,
340282366920938463463374607430742159016 => bb50,
_ => bb49
}
}
bb47 = {
_7 = (*_2);
(*_2) = !_6;
_22.fld0 = _5;
_12 = 0_usize ^ 6_usize;
_13 = -_23;
(*_2) = 227_u8 as u128;
_22.fld4.1 = _8 + _8;
RET = '\u{43783}';
_19 = !(-17857_i16);
(*_2) = 10664_u16 as u128;
_22.fld4.0 = (-64873552_i32) as f64;
_20 = _8;
_8 = -_22.fld4.1;
_23 = _7 as isize;
_12 = 15383709310794348026_usize;
(*_2) = 154_u8 as u128;
(*_2) = _7 - _6;
_3 = _11 ^ _22.fld0;
match _17.1.1 {
3174748369 => bb7,
_ => bb1
}
}
bb48 = {
_22.fld4 = (_68.fld4.0, _49.2, _68.fld4.2);
(*_39) = _38;
(*_53) = _50;
_50 = [(*_32),_15,(*_32)];
(*_27) = (*_32) as u128;
(*_9) = [(*_65),(*_65),(*_65),(*_65)];
_41 = core::ptr::addr_of_mut!(_62);
_49.0 = _48.0 + _48.0;
(*_53) = [(*_32),(*_32),(*_32)];
(*_27) = _43 as u128;
(*_41).0 = [Field::<i32>(Variant(_56.0, 1), 0),(*_65),(*_65),(*_65)];
match (*_65) {
0 => bb1,
1 => bb23,
2 => bb13,
3 => bb32,
340282366920938463463374607430742159016 => bb34,
_ => bb33
}
}
bb49 = {
_2 = core::ptr::addr_of_mut!(_4);
(*_2) = _6 ^ _6;
(*_2) = _1 - _7;
_11 = _8 > _8;
(*_2) = _6 + _6;
(*_2) = 21006_u16 as u128;
_17.1.0 = -25_i8;
_6 = (*_2);
(*_2) = _7;
_22.fld2 = [(-2924664030528770186_i64),5114521469436997525_i64,(-7858216562123979151_i64),(-4458103622591948706_i64),(-6436964748731870672_i64),5600904398942107724_i64,4568520876598923710_i64,300764497325713367_i64];
_22.fld2 = [5223765622054699420_i64,(-5537979505306257189_i64),318827879709810236_i64,7750579077505907449_i64,1081285600946483488_i64,(-4730032376365516534_i64),5496816380464673210_i64,7446061369891977797_i64];
(*_2) = _7 ^ _6;
(*_2) = _7 & _7;
_3 = !_11;
_22.fld1 = RET as i64;
(*_2) = 1819367086005822018_u64 as u128;
(*_2) = !_1;
_6 = (*_2) ^ _7;
(*_2) = _1;
match _17.1.1 {
3174748369 => bb5,
_ => bb3
}
}
bb50 = {
_68.fld0 = _5 & _75;
_68.fld3 = Field::<i8>(Variant(_22.fld4.2, 0), 0) + _22.fld3;
_22.fld3 = _68.fld3 << _23;
_80.0 = [(*_65),(*_65),(*_65),(*_65)];
_82.1 = [_61];
Goto(bb51)
}
bb51 = {
Call(_101 = dump_var(Move(_15), Move(_31), Move(_10), Move(_42)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_101 = dump_var(Move(_12), Move(_19), Move(_8), Move(_62)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_101 = dump_var(Move(_24), Move(_4), Move(_73), Move(_50)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_101 = dump_var(Move(_43), Move(_33), Move(_34), Move(_30)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_101 = dump_var(Move(_44), Move(_87), Move(_7), Move(_78)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_101 = dump_var(Move(_1), Move(_93), Move(_23), Move(_80)), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn6(mut _1: bool,mut _2: [usize; 1],mut _3: bool,mut _4: isize,mut _5: *mut u128,mut _6: bool,mut _7: u128,mut _8: u128,mut _9: u128,mut _10: u128,mut _11: isize) -> i128 {
mir! {
type RET = i128;
let _12: char;
let _13: bool;
let _14: f32;
let _15: *mut u128;
let _16: [char; 2];
let _17: (u8, &'static mut [isize; 3], i64, f64);
let _18: *const u128;
let _19: i32;
let _20: isize;
let _21: i8;
let _22: ((*mut f32, char),);
let _23: (u16, bool, i128);
let _24: (*const u128, char);
let _25: f64;
let _26: &'static [i32; 4];
let _27: i128;
let _28: f64;
let _29: [usize; 1];
let _30: char;
let _31: [char; 1];
let _32: char;
let _33: u32;
let _34: &'static mut [isize; 3];
let _35: *mut f32;
let _36: ();
let _37: ();
{
_2 = [10514645498617493678_usize];
_9 = _7;
_5 = core::ptr::addr_of_mut!(_8);
(*_5) = _9 >> _10;
(*_5) = 72604761192195887245818143949045998160_i128 as u128;
_1 = _3;
_8 = !_7;
_4 = !_11;
_8 = _10 ^ _10;
Call(RET = fn7((*_5), (*_5), (*_5), (*_5), (*_5), Move(_5), _9, _2, (*_5), (*_5)), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_4 = !_11;
_1 = !_3;
_8 = _7 ^ _10;
_5 = core::ptr::addr_of_mut!(_7);
(*_5) = _8;
_2 = [17135093494666159252_usize];
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = _10 + _9;
(*_5) = _8;
_7 = !_8;
(*_5) = !_8;
_10 = !(*_5);
(*_5) = _10 & _9;
(*_5) = !_10;
_5 = core::ptr::addr_of_mut!((*_5));
_5 = core::ptr::addr_of_mut!((*_5));
RET = 61511905492583256760007741574509879585_i128 * 70493710258348879565149363983894567485_i128;
(*_5) = _9 >> _9;
_12 = '\u{c0157}';
RET = (-89124904382526205484254462850999937663_i128);
(*_5) = _10 >> _9;
(*_5) = !_10;
(*_5) = (-1070266743_i32) as u128;
match RET {
251157462538412257979120144580768273793 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
(*_5) = _10 + _9;
_4 = _11 + _11;
(*_5) = _10 ^ _10;
(*_5) = _10;
_17.3 = 7288510880364608944_i64 as f64;
_12 = '\u{cd540}';
_15 = core::ptr::addr_of_mut!((*_5));
(*_15) = !_10;
(*_5) = _9;
(*_5) = 89_u8 as u128;
Goto(bb4)
}
bb4 = {
(*_5) = _10 << _8;
(*_5) = _9;
_17.0 = 233_u8 ^ 83_u8;
_16 = [_12,_12];
_17.2 = (*_5) as i64;
(*_5) = _10 ^ _10;
_12 = '\u{5fe49}';
(*_5) = _8;
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = _8 & _10;
(*_5) = !_8;
(*_5) = _9 >> _10;
_19 = (-1311634505_i32) & 1909970465_i32;
_2 = [4_usize];
(*_5) = 15867161724833747521_u64 as u128;
_17.0 = !217_u8;
_7 = _9 + _8;
_18 = core::ptr::addr_of!((*_5));
_13 = (*_5) >= (*_18);
_7 = _8 & _8;
_16 = [_12,_12];
(*_18) = _10 * _8;
(*_5) = _9 ^ _8;
_14 = RET as f32;
(*_5) = !_10;
_7 = !_9;
(*_5) = _6 as u128;
match RET {
0 => bb3,
1 => bb2,
2 => bb5,
3 => bb6,
4 => bb7,
251157462538412257979120144580768273793 => bb9,
_ => bb8
}
}
bb5 = {
(*_5) = _10 + _9;
_4 = _11 + _11;
(*_5) = _10 ^ _10;
(*_5) = _10;
_17.3 = 7288510880364608944_i64 as f64;
_12 = '\u{cd540}';
_15 = core::ptr::addr_of_mut!((*_5));
(*_15) = !_10;
(*_5) = _9;
(*_5) = 89_u8 as u128;
Goto(bb4)
}
bb6 = {
Return()
}
bb7 = {
_4 = !_11;
_1 = !_3;
_8 = _7 ^ _10;
_5 = core::ptr::addr_of_mut!(_7);
(*_5) = _8;
_2 = [17135093494666159252_usize];
_5 = core::ptr::addr_of_mut!((*_5));
(*_5) = _10 + _9;
(*_5) = _8;
_7 = !_8;
(*_5) = !_8;
_10 = !(*_5);
(*_5) = _10 & _9;
(*_5) = !_10;
_5 = core::ptr::addr_of_mut!((*_5));
_5 = core::ptr::addr_of_mut!((*_5));
RET = 61511905492583256760007741574509879585_i128 * 70493710258348879565149363983894567485_i128;
(*_5) = _9 >> _9;
_12 = '\u{c0157}';
RET = (-89124904382526205484254462850999937663_i128);
(*_5) = _10 >> _9;
(*_5) = !_10;
(*_5) = (-1070266743_i32) as u128;
match RET {
251157462538412257979120144580768273793 => bb3,
_ => bb2
}
}
bb8 = {
Return()
}
bb9 = {
_15 = core::ptr::addr_of_mut!((*_5));
_17.0 = 233_u8;
_10 = (*_5) * (*_5);
(*_5) = _8;
_8 = !(*_5);
(*_5) = 3806_i16 as u128;
_15 = core::ptr::addr_of_mut!((*_5));
(*_5) = _8;
(*_5) = _8 * _10;
_23 = (59626_u16, _6, RET);
_22.0.0 = core::ptr::addr_of_mut!(_14);
(*_5) = _10;
_24.1 = _12;
_24 = (Move(_18), _12);
_21 = (-1663_i16) as i8;
_22.0.1 = _24.1;
_13 = !_23.1;
_2 = [736759596584723736_usize];
(*_5) = _8 + _10;
_22.0.0 = core::ptr::addr_of_mut!(_14);
_27 = _13 as i128;
_18 = core::ptr::addr_of!((*_5));
match _23.0 {
0 => bb10,
59626 => bb12,
_ => bb11
}
}
bb10 = {
Return()
}
bb11 = {
(*_5) = _10 + _9;
_4 = _11 + _11;
(*_5) = _10 ^ _10;
(*_5) = _10;
_17.3 = 7288510880364608944_i64 as f64;
_12 = '\u{cd540}';
_15 = core::ptr::addr_of_mut!((*_5));
(*_15) = !_10;
(*_5) = _9;
(*_5) = 89_u8 as u128;
Goto(bb4)
}
bb12 = {
(*_5) = _8;
(*_5) = _10;
(*_5) = _10 << _27;
_24.1 = _22.0.1;
(*_5) = _10;
_8 = (*_5) << (*_5);
_30 = _24.1;
(*_5) = _8 * _9;
_15 = Move(_5);
_1 = _6 ^ _13;
_32 = _22.0.1;
_9 = _23.0 as u128;
_14 = 8141096453643498630_u64 as f32;
_12 = _24.1;
_23.2 = _27 * _27;
Goto(bb13)
}
bb13 = {
_24.1 = _30;
_17.0 = 179_u8;
_33 = _21 as u32;
RET = _27 & _27;
_25 = _17.3 - _17.3;
RET = !_27;
_3 = _1 != _13;
_4 = _11;
_17.0 = 101_u8 << _7;
_29 = _2;
RET = _27 | _23.2;
_2 = [16440126327490048175_usize];
_28 = _17.3 - _17.3;
_9 = _10 * _8;
_17.0 = 63_u8 ^ 98_u8;
_6 = _8 < _7;
_1 = !_6;
Goto(bb14)
}
bb14 = {
Call(_36 = dump_var(Move(_6), Move(_4), Move(_33), Move(_11)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_36 = dump_var(Move(_21), Move(_3), Move(_27), Move(_23)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Call(_36 = dump_var(Move(_29), Move(_8), _37, _37), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn7(mut _1: u128,mut _2: u128,mut _3: u128,mut _4: u128,mut _5: u128,mut _6: *mut u128,mut _7: u128,mut _8: [usize; 1],mut _9: u128,mut _10: u128) -> i128 {
mir! {
type RET = i128;
let _11: [i16; 6];
let _12: Adt58;
let _13: u32;
let _14: isize;
let _15: *mut [i32; 4];
let _16: char;
let _17: u16;
let _18: bool;
let _19: [i128; 7];
let _20: *mut f32;
let _21: u64;
let _22: *mut [i128; 7];
let _23: u64;
let _24: bool;
let _25: ([bool; 3], &'static mut f64, f32);
let _26: *mut [i32; 4];
let _27: u8;
let _28: &'static [usize; 1];
let _29: isize;
let _30: (usize, usize);
let _31: f64;
let _32: &'static [usize; 1];
let _33: char;
let _34: bool;
let _35: isize;
let _36: &'static mut (Adt18, [usize; 1]);
let _37: f32;
let _38: isize;
let _39: i32;
let _40: &'static mut [isize; 3];
let _41: *mut [i128; 7];
let _42: isize;
let _43: usize;
let _44: f32;
let _45: *const u128;
let _46: *mut [i32; 4];
let _47: &'static *const u128;
let _48: *mut f32;
let _49: bool;
let _50: usize;
let _51: [i64; 6];
let _52: isize;
let _53: (char, Adt18);
let _54: (Adt18, [usize; 1]);
let _55: &'static mut isize;
let _56: char;
let _57: *mut f32;
let _58: ();
let _59: ();
{
RET = (-139898012983116394233898002475968655818_i128) - 55190738750259735801864078254895106667_i128;
_4 = (-9223372036854775808_isize) as u128;
_5 = _2 & _2;
RET = !119810863082021726672976978502429682059_i128;
RET = (-77996461543815337748714132941066878319_i128) - 132526936944951119881729828056698164808_i128;
_11 = [(-16476_i16),1982_i16,32198_i16,20941_i16,29772_i16,22212_i16];
Goto(bb1)
}
bb1 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_6 = core::ptr::addr_of_mut!(_10);
(*_6) = !_1;
(*_6) = !_3;
_4 = 132_u8 as u128;
(*_6) = !_3;
(*_6) = _3 - _9;
(*_6) = _9;
(*_6) = !_1;
(*_6) = _5;
_3 = (*_6);
(*_6) = !_2;
_13 = 632147758_u32 * 3170083646_u32;
(*_6) = _1 - _2;
(*_6) = _7 + _1;
Goto(bb3)
}
bb3 = {
_13 = 304763997_u32 ^ 2856271649_u32;
_5 = !(*_6);
RET = (-52383803873808050950369552975871493491_i128);
_16 = '\u{399bd}';
_6 = core::ptr::addr_of_mut!((*_6));
_13 = 1831055636_u32;
_9 = _13 as u128;
RET = 64694500155397938048371369105309910665_i128 | (-100467814694444356940934759738033480928_i128);
Goto(bb4)
}
bb4 = {
_14 = 124966738_i32 as isize;
_1 = (*_6) & (*_6);
_11 = [(-28794_i16),(-3544_i16),(-30275_i16),546_i16,(-11338_i16),31960_i16];
(*_6) = _1;
(*_6) = 8865272929628290745_u64 as u128;
_13 = 652992088_u32 | 3121010238_u32;
(*_6) = !_1;
(*_6) = true as u128;
(*_6) = _3 | _3;
(*_6) = !_3;
Goto(bb5)
}
bb5 = {
RET = (-153584602427156004702699088971222044739_i128);
_16 = '\u{22df4}';
(*_6) = !_1;
(*_6) = _7 | _1;
_13 = 3165745611_u32 * 1365028894_u32;
(*_6) = 107_i8 as u128;
(*_6) = 15179889569473991967_usize as u128;
(*_6) = !_1;
_9 = 17153938105564076117_u64 as u128;
(*_6) = _3 + _3;
(*_6) = _1 | _7;
(*_6) = _1 & _1;
(*_6) = 551153518_i32 as u128;
_10 = !_2;
_2 = !_7;
_9 = !_3;
(*_6) = _3;
_1 = !(*_6);
match RET {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
186697764493782458760675518460546166717 => bb12,
_ => bb11
}
}
bb6 = {
_14 = 124966738_i32 as isize;
_1 = (*_6) & (*_6);
_11 = [(-28794_i16),(-3544_i16),(-30275_i16),546_i16,(-11338_i16),31960_i16];
(*_6) = _1;
(*_6) = 8865272929628290745_u64 as u128;
_13 = 652992088_u32 | 3121010238_u32;
(*_6) = !_1;
(*_6) = true as u128;
(*_6) = _3 | _3;
(*_6) = !_3;
Goto(bb5)
}
bb7 = {
_13 = 304763997_u32 ^ 2856271649_u32;
_5 = !(*_6);
RET = (-52383803873808050950369552975871493491_i128);
_16 = '\u{399bd}';
_6 = core::ptr::addr_of_mut!((*_6));
_13 = 1831055636_u32;
_9 = _13 as u128;
RET = 64694500155397938048371369105309910665_i128 | (-100467814694444356940934759738033480928_i128);
Goto(bb4)
}
bb8 = {
_6 = core::ptr::addr_of_mut!(_10);
(*_6) = !_1;
(*_6) = !_3;
_4 = 132_u8 as u128;
(*_6) = !_3;
(*_6) = _3 - _9;
(*_6) = _9;
(*_6) = !_1;
(*_6) = _5;
_3 = (*_6);
(*_6) = !_2;
_13 = 632147758_u32 * 3170083646_u32;
(*_6) = _1 - _2;
(*_6) = _7 + _1;
Goto(bb3)
}
bb9 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb10 = {
Return()
}
bb11 = {
Return()
}
bb12 = {
_5 = (*_6);
(*_6) = _14 as u128;
_1 = _9;
(*_6) = _1;
(*_6) = !_5;
(*_6) = _5 | _5;
RET = (-58368298959746231969272682034345573814_i128);
_7 = !_1;
(*_6) = _2 & _1;
_7 = (*_6) | (*_6);
(*_6) = true as u128;
_2 = !_3;
_21 = 14751059694758450889_u64 * 11867303208214366604_u64;
(*_6) = !_7;
(*_6) = _7;
_17 = 1350811469_i32 as u16;
(*_6) = 26_u8 as u128;
(*_6) = _9;
_25.2 = _14 as f32;
_11 = [(-31431_i16),26804_i16,(-21089_i16),(-25093_i16),(-13302_i16),(-9183_i16)];
_3 = (*_6) - (*_6);
match RET {
0 => bb7,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
281914067961192231494101925397422637642 => bb18,
_ => bb17
}
}
bb13 = {
Return()
}
bb14 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb15 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb16 = {
_6 = core::ptr::addr_of_mut!(_10);
(*_6) = !_1;
(*_6) = !_3;
_4 = 132_u8 as u128;
(*_6) = !_3;
(*_6) = _3 - _9;
(*_6) = _9;
(*_6) = !_1;
(*_6) = _5;
_3 = (*_6);
(*_6) = !_2;
_13 = 632147758_u32 * 3170083646_u32;
(*_6) = _1 - _2;
(*_6) = _7 + _1;
Goto(bb3)
}
bb17 = {
_13 = 304763997_u32 ^ 2856271649_u32;
_5 = !(*_6);
RET = (-52383803873808050950369552975871493491_i128);
_16 = '\u{399bd}';
_6 = core::ptr::addr_of_mut!((*_6));
_13 = 1831055636_u32;
_9 = _13 as u128;
RET = 64694500155397938048371369105309910665_i128 | (-100467814694444356940934759738033480928_i128);
Goto(bb4)
}
bb18 = {
_4 = (*_6) - (*_6);
(*_6) = _3;
_11 = [(-24334_i16),32637_i16,(-17127_i16),15954_i16,14738_i16,(-9105_i16)];
(*_6) = !_4;
_6 = core::ptr::addr_of_mut!((*_6));
_13 = 1750318851_u32 + 3501291709_u32;
_22 = core::ptr::addr_of_mut!(_19);
_18 = !false;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_24 = (*_6) > _10;
_8 = [2395459105899032858_usize];
(*_6) = _5 + _7;
(*_6) = _7;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_22 = core::ptr::addr_of_mut!((*_22));
_1 = (*_6) ^ (*_6);
match RET {
0 => bb4,
1 => bb10,
281914067961192231494101925397422637642 => bb19,
_ => bb3
}
}
bb19 = {
_9 = !(*_6);
(*_6) = !_5;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_6 = core::ptr::addr_of_mut!(_2);
_29 = -_14;
(*_6) = _1 >> _7;
(*_6) = _1;
_17 = !12847_u16;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_27 = 195_u8 << _4;
Call((*_6) = core::intrinsics::bswap(_3), ReturnTo(bb20), UnwindUnreachable())
}
bb20 = {
_23 = !_21;
match RET {
0 => bb8,
1 => bb12,
2 => bb21,
3 => bb22,
281914067961192231494101925397422637642 => bb24,
_ => bb23
}
}
bb21 = {
RET = (-153584602427156004702699088971222044739_i128);
_16 = '\u{22df4}';
(*_6) = !_1;
(*_6) = _7 | _1;
_13 = 3165745611_u32 * 1365028894_u32;
(*_6) = 107_i8 as u128;
(*_6) = 15179889569473991967_usize as u128;
(*_6) = !_1;
_9 = 17153938105564076117_u64 as u128;
(*_6) = _3 + _3;
(*_6) = _1 | _7;
(*_6) = _1 & _1;
(*_6) = 551153518_i32 as u128;
_10 = !_2;
_2 = !_7;
_9 = !_3;
(*_6) = _3;
_1 = !(*_6);
match RET {
0 => bb6,
1 => bb7,
2 => bb8,
3 => bb9,
4 => bb10,
186697764493782458760675518460546166717 => bb12,
_ => bb11
}
}
bb22 = {
_5 = (*_6);
(*_6) = _14 as u128;
_1 = _9;
(*_6) = _1;
(*_6) = !_5;
(*_6) = _5 | _5;
RET = (-58368298959746231969272682034345573814_i128);
_7 = !_1;
(*_6) = _2 & _1;
_7 = (*_6) | (*_6);
(*_6) = true as u128;
_2 = !_3;
_21 = 14751059694758450889_u64 * 11867303208214366604_u64;
(*_6) = !_7;
(*_6) = _7;
_17 = 1350811469_i32 as u16;
(*_6) = 26_u8 as u128;
(*_6) = _9;
_25.2 = _14 as f32;
_11 = [(-31431_i16),26804_i16,(-21089_i16),(-25093_i16),(-13302_i16),(-9183_i16)];
_3 = (*_6) - (*_6);
match RET {
0 => bb7,
1 => bb13,
2 => bb14,
3 => bb15,
4 => bb16,
281914067961192231494101925397422637642 => bb18,
_ => bb17
}
}
bb23 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb24 = {
_22 = core::ptr::addr_of_mut!((*_22));
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_7 = (*_6);
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = _4 - _10;
_10 = _27 as u128;
_30.0 = !5085057309986740785_usize;
_17 = 38106_u16 * 1755_u16;
Goto(bb25)
}
bb25 = {
_24 = (*_6) <= (*_6);
_33 = _16;
_23 = _21;
_2 = _30.0 as u128;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = _3 * _7;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_30 = (10244689015986791183_usize, 3657741150566055441_usize);
(*_6) = !_1;
_23 = _24 as u64;
(*_6) = !_9;
_31 = _13 as f64;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_35 = !_29;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_17 = 60022_u16 ^ 21534_u16;
(*_6) = !_9;
(*_6) = (-67_i8) as u128;
_34 = _5 != _3;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
match _30.0 {
0 => bb16,
10244689015986791183 => bb27,
_ => bb26
}
}
bb26 = {
Return()
}
bb27 = {
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_21 = _23;
(*_6) = 642063014_i32 as u128;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = !_9;
match _30.1 {
0 => bb14,
1 => bb2,
3657741150566055441 => bb28,
_ => bb12
}
}
bb28 = {
_39 = (-520804940_i32) + (-2008461861_i32);
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_17 = 59047_u16;
match RET {
0 => bb24,
1 => bb23,
2 => bb29,
281914067961192231494101925397422637642 => bb31,
_ => bb30
}
}
bb29 = {
_13 = 304763997_u32 ^ 2856271649_u32;
_5 = !(*_6);
RET = (-52383803873808050950369552975871493491_i128);
_16 = '\u{399bd}';
_6 = core::ptr::addr_of_mut!((*_6));
_13 = 1831055636_u32;
_9 = _13 as u128;
RET = 64694500155397938048371369105309910665_i128 | (-100467814694444356940934759738033480928_i128);
Goto(bb4)
}
bb30 = {
Return()
}
bb31 = {
_32 = &_8;
_30.1 = _30.0 - _30.0;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_37 = _25.2;
_29 = 88_i8 as isize;
_21 = _23;
_13 = 359026417_u32 - 1273487480_u32;
_37 = -_25.2;
_33 = _16;
(*_6) = _5 & _5;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = _9;
_25.2 = _37 + _37;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_6 = core::ptr::addr_of_mut!((*_6));
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_27 = 91_u8 ^ 155_u8;
_19 = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_37 = _25.2;
_44 = _25.2 - _37;
_42 = _29 ^ _29;
_31 = _21 as f64;
_25.0 = [_34,_24,_24];
_1 = (*_6) + _3;
Goto(bb32)
}
bb32 = {
_8 = [_30.1];
_24 = (*_6) != (*_6);
_20 = core::ptr::addr_of_mut!(_44);
(*_6) = _3 * _3;
(*_6) = _7 & _7;
Goto(bb33)
}
bb33 = {
(*_6) = _7;
_7 = (*_6) ^ (*_6);
(*_6) = !_10;
(*_20) = -_25.2;
_33 = _16;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
match _30.0 {
0 => bb21,
1 => bb20,
2 => bb34,
3 => bb35,
4 => bb36,
5 => bb37,
10244689015986791183 => bb39,
_ => bb38
}
}
bb34 = {
_8 = [_30.1];
_24 = (*_6) != (*_6);
_20 = core::ptr::addr_of_mut!(_44);
(*_6) = _3 * _3;
(*_6) = _7 & _7;
Goto(bb33)
}
bb35 = {
Return()
}
bb36 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb37 = {
_13 = 304763997_u32 ^ 2856271649_u32;
_5 = !(*_6);
RET = (-52383803873808050950369552975871493491_i128);
_16 = '\u{399bd}';
_6 = core::ptr::addr_of_mut!((*_6));
_13 = 1831055636_u32;
_9 = _13 as u128;
RET = 64694500155397938048371369105309910665_i128 | (-100467814694444356940934759738033480928_i128);
Goto(bb4)
}
bb38 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb39 = {
(*_6) = _7 | _5;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = _10 - _5;
(*_6) = _33 as u128;
Goto(bb40)
}
bb40 = {
_43 = _30.0 << _9;
(*_6) = _4 | _1;
(*_20) = _37 + _37;
(*_20) = _37 + _37;
_28 = &_8;
_38 = _14 + _42;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_45 = core::ptr::addr_of!((*_6));
(*_6) = _13 as u128;
_25.1 = &mut _31;
_8 = [_43];
(*_20) = _25.2;
_20 = core::ptr::addr_of_mut!((*_20));
_48 = Move(_20);
(*_6) = _4 * _7;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = _1 ^ _9;
_21 = _23 ^ _23;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = _3 - _10;
_47 = &_45;
(*_6) = _7;
_42 = _38 - _38;
_3 = !(*_6);
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
Goto(bb41)
}
bb41 = {
_43 = _30.1 & _30.1;
_14 = _35 & _42;
_2 = _5 ^ _10;
(*_6) = _23 as u128;
(*_6) = _7;
Call((*_6) = core::intrinsics::bswap(_1), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
_42 = _14 - _38;
(*_6) = _10;
_6 = core::ptr::addr_of_mut!(_10);
match _30.0 {
0 => bb27,
1 => bb40,
2 => bb39,
3 => bb29,
4 => bb11,
5 => bb30,
6 => bb43,
10244689015986791183 => bb45,
_ => bb44
}
}
bb43 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb44 = {
_13 = 304763997_u32 ^ 2856271649_u32;
_5 = !(*_6);
RET = (-52383803873808050950369552975871493491_i128);
_16 = '\u{399bd}';
_6 = core::ptr::addr_of_mut!((*_6));
_13 = 1831055636_u32;
_9 = _13 as u128;
RET = 64694500155397938048371369105309910665_i128 | (-100467814694444356940934759738033480928_i128);
Goto(bb4)
}
bb45 = {
_16 = _33;
_35 = _42 >> (*_6);
_42 = _24 as isize;
_34 = (*_6) == (*_6);
_2 = _5 >> (*_6);
(*_6) = _3 | _5;
(*_6) = _30.0 as u128;
_37 = _44 - _44;
_20 = core::ptr::addr_of_mut!(_44);
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_30.1 = _43 / _30.0;
_51 = [(-2452494997281030740_i64),(-1635327314705733524_i64),(-526529487305671518_i64),649818966401370743_i64,1602952492149941481_i64,(-3216805990701608183_i64)];
(*_20) = _37 * _37;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
match RET {
0 => bb9,
281914067961192231494101925397422637642 => bb46,
_ => bb13
}
}
bb46 = {
_24 = _34;
_52 = _42;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_6) = !_1;
_3 = (*_6) | _5;
_14 = _39 as isize;
_25.0 = [_24,_24,_34];
_51 = [725292684089144118_i64,(-2292712778748275097_i64),(-8288697155993534563_i64),7785768585023246382_i64,(-7318314804417469918_i64),(-769717029500752489_i64)];
(*_6) = _9 << _35;
_6 = core::ptr::addr_of_mut!(_3);
_41 = core::ptr::addr_of_mut!((*_22));
(*_20) = _37;
_30.0 = _30.1;
_43 = _30.0;
(*_41) = [RET,RET,RET,RET,RET,RET,RET];
match _17 {
59047 => bb47,
_ => bb3
}
}
bb47 = {
(*_20) = _37 * _25.2;
(*_41) = [RET,RET,RET,RET,RET,RET,RET];
_30.1 = 102_i8 as usize;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_30 = (_43, _43);
(*_6) = !_4;
(*_6) = _9 - _4;
_12 = Adt58::Variant0 { fld0: _30 };
_52 = _35 - _35;
_14 = -_42;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_20) = (-98_i8) as f32;
_8 = [_30.1];
(*_6) = _9;
(*_20) = _25.2 + _37;
(*_20) = _25.2 + _25.2;
(*_20) = _37 - _37;
_17 = !51685_u16;
(*_6) = _5 | _5;
(*_6) = _2 * _7;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_39 = 539333478_i32 + (-1658604216_i32);
match RET {
0 => bb17,
1 => bb48,
281914067961192231494101925397422637642 => bb50,
_ => bb49
}
}
bb48 = {
Return()
}
bb49 = {
_4 = _1;
Call(_6 = fn8(_8), ReturnTo(bb2), UnwindUnreachable())
}
bb50 = {
_41 = core::ptr::addr_of_mut!((*_22));
(*_20) = _37;
(*_20) = _37 + _25.2;
place!(Field::<(usize, usize)>(Variant(_12, 0), 0)).0 = (-81_i8) as usize;
_6 = core::ptr::addr_of_mut!((*_6));
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
_52 = _17 as isize;
(*_20) = _25.2 + _25.2;
(*_22) = [RET,RET,RET,RET,RET,RET,RET];
(*_20) = _21 as f32;
(*_20) = _13 as f32;
(*_6) = _5 - _10;
(*_20) = _37 - _37;
(*_20) = _25.2;
(*_6) = _1 & _1;
_55 = &mut _29;
Goto(bb51)
}
bb51 = {
Call(_58 = dump_var(Move(_14), Move(_2), Move(_30), Move(_29)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_58 = dump_var(Move(_39), Move(_24), Move(_1), Move(_38)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_58 = dump_var(Move(_8), Move(_51), Move(_43), Move(_5)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_58 = dump_var(Move(_13), Move(_34), Move(_16), _59), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn8(mut _1: [usize; 1]) -> *mut u128 {
mir! {
type RET = *mut u128;
let _2: (f64, i128, Adt18);
let _3: (&'static *const u128, (f64, i128, Adt18), [i32; 4], i128);
let _4: char;
let _5: isize;
let _6: ([i32; 4],);
let _7: &'static [i32; 4];
let _8: Adt18;
let _9: &'static mut f64;
let _10: char;
let _11: *mut [i32; 4];
let _12: *mut f32;
let _13: u64;
let _14: u128;
let _15: u8;
let _16: &'static mut [isize; 3];
let _17: char;
let _18: i128;
let _19: i64;
let _20: u32;
let _21: Adt69;
let _22: i8;
let _23: (*mut f32, char);
let _24: f64;
let _25: i32;
let _26: &'static [i32; 4];
let _27: &'static mut [isize; 3];
let _28: isize;
let _29: i8;
let _30: i64;
let _31: bool;
let _32: (char, Adt18);
let _33: bool;
let _34: u8;
let _35: f32;
let _36: (usize, usize);
let _37: &'static [usize; 1];
let _38: char;
let _39: &'static mut [isize; 3];
let _40: (Adt69, Adt56, Adt58);
let _41: (Adt37, (i8, u32, [usize; 1], Adt47));
let _42: &'static *const u128;
let _43: *mut [i128; 7];
let _44: &'static *mut f32;
let _45: bool;
let _46: bool;
let _47: isize;
let _48: f32;
let _49: &'static mut (Adt18, [usize; 1]);
let _50: char;
let _51: (Adt69, Adt56, Adt58);
let _52: [i64; 6];
let _53: u8;
let _54: (*mut f32, char);
let _55: bool;
let _56: i8;
let _57: &'static mut (Adt18, [usize; 1]);
let _58: f64;
let _59: i8;
let _60: &'static [usize; 1];
let _61: u8;
let _62: char;
let _63: char;
let _64: &'static mut [i128; 7];
let _65: [bool; 3];
let _66: *const u128;
let _67: Adt37;
let _68: &'static i32;
let _69: i64;
let _70: char;
let _71: [char; 4];
let _72: isize;
let _73: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _74: &'static *mut [i128; 7];
let _75: isize;
let _76: bool;
let _77: &'static mut isize;
let _78: f32;
let _79: (&'static *const u128, (f64, i128, Adt18), [i32; 4], i128);
let _80: &'static i32;
let _81: u128;
let _82: [bool; 8];
let _83: (&'static *const u128, (f64, i128, Adt18), [i32; 4], i128);
let _84: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _85: u32;
let _86: [char; 2];
let _87: &'static mut (Adt18, [usize; 1]);
let _88: [u16; 5];
let _89: f32;
let _90: ();
let _91: ();
{
_1 = [5868164812612969467_usize];
_1 = [6_usize];
_1 = [987831023035147707_usize];
_1 = [8605277956703509102_usize];
_1 = [5741920679241556658_usize];
_2.0 = 18319_u16 as f64;
_2.0 = 119_u8 as f64;
_1 = [381622449737676038_usize];
Goto(bb1)
}
bb1 = {
_2.1 = 53179292163646161626643169712264098044_i128 >> 5320988560211924695_u64;
_2.2 = Adt18::Variant2 { fld0: 50966_u16,fld1: '\u{100fd3}',fld2: 1752958898_u32 };
_2.1 = 63928268795359637970736457246550662987_i128 & (-108605691313433639271805365776211585511_i128);
_2.1 = (-31722082802042592334383548270044776965_i128);
Goto(bb2)
}
bb2 = {
_3.1.1 = !_2.1;
_3.3 = _2.1 - _2.1;
_1 = [8498868838007234569_usize];
_3.3 = _3.1.1 ^ _3.1.1;
place!(Field::<char>(Variant(_2.2, 2), 1)) = '\u{25d9}';
_2.1 = _3.1.1;
_3.2 = [1858704596_i32,1879566488_i32,1590445665_i32,(-2047525006_i32)];
place!(Field::<char>(Variant(_2.2, 2), 1)) = '\u{10231c}';
_2.0 = 5_usize as f64;
_6.0 = [(-806766911_i32),(-1600386596_i32),(-243577015_i32),945100630_i32];
_3.2 = [(-1618410395_i32),664234113_i32,959922840_i32,(-1386343622_i32)];
_1 = [11932545178081415417_usize];
_4 = Field::<char>(Variant(_2.2, 2), 1);
_6 = (_3.2,);
_6 = (_3.2,);
_2.2 = Adt18::Variant0 { fld0: (-37_i8),fld1: _4,fld2: 26_isize };
place!(Field::<i8>(Variant(_2.2, 0), 0)) = (-123_i8);
_1 = [7210338679554880940_usize];
_7 = &_6.0;
_2.0 = (-5195138545977006535_i64) as f64;
_9 = &mut _2.0;
(*_9) = (-7659592347112438207_i64) as f64;
_3.1.0 = (*_9);
Call((*_9) = core::intrinsics::fmaf64(_3.1.0, _3.1.0, _3.1.0), ReturnTo(bb3), UnwindUnreachable())
}
bb3 = {
_5 = (-312367548_i32) as isize;
Goto(bb4)
}
bb4 = {
(*_9) = (-3356479764289882343_i64) as f64;
(*_9) = _3.1.0 - _3.1.0;
Call((*_9) = core::intrinsics::fmaf64(_3.1.0, _3.1.0, _3.1.0), ReturnTo(bb5), UnwindUnreachable())
}
bb5 = {
_4 = '\u{2d096}';
_3.2 = [(-403010829_i32),(-713360840_i32),(-1546351451_i32),(-399040208_i32)];
(*_9) = _3.1.0;
(*_9) = _3.1.0 * _3.1.0;
(*_9) = _3.1.0 + _3.1.0;
(*_9) = _3.1.0 - _3.1.0;
(*_9) = 8885237759500123635_i64 as f64;
(*_9) = 88_u8 as f64;
Goto(bb6)
}
bb6 = {
_10 = _4;
_3.1.1 = _3.3 & _3.3;
Call((*_9) = fn9((*_7), (*_7)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
(*_9) = _3.1.0 - _3.1.0;
(*_9) = _3.1.0;
(*_9) = _3.1.0;
_13 = !15139447986086944400_u64;
(*_9) = _3.1.0;
(*_9) = _3.1.0;
(*_9) = _3.1.0;
_5 = (-9223372036854775808_isize) * (-9223372036854775808_isize);
(*_9) = -_3.1.0;
_11 = core::ptr::addr_of_mut!((*_7));
_6 = (_3.2,);
_8 = Adt18::Variant3 { fld0: true,fld1: _4,fld2: _5,fld3: _3.1.0,fld4: 327027916_u32,fld5: _13,fld6: 103_u8,fld7: _3.1.1 };
place!(Field::<u8>(Variant(_8, 3), 6)) = 161_u8 + 69_u8;
(*_9) = -_3.1.0;
_3.1.1 = 11629_u16 as i128;
(*_9) = _3.1.0;
_3.2 = [935669927_i32,(-1442487429_i32),(-1787951999_i32),1305037776_i32];
(*_9) = Field::<f64>(Variant(_8, 3), 3) - _3.1.0;
Goto(bb8)
}
bb8 = {
(*_9) = (-8335179278092231749_i64) as f64;
place!(Field::<u8>(Variant(_8, 3), 6)) = !141_u8;
place!(Field::<u64>(Variant(_8, 3), 5)) = !_13;
place!(Field::<char>(Variant(_8, 3), 1)) = _10;
Goto(bb9)
}
bb9 = {
RET = core::ptr::addr_of_mut!(_14);
(*_9) = Field::<f64>(Variant(_8, 3), 3);
(*RET) = _5 as u128;
(*RET) = 255401456340747683865467654500389046911_u128 >> _5;
(*RET) = 61215542467910008450949966373662688578_u128 << Field::<i128>(Variant(_8, 3), 7);
(*RET) = 163008311498366530187361020782852922400_u128 + 313351229817368729712693373305441228884_u128;
_3.3 = Field::<i128>(Variant(_8, 3), 7) << (*RET);
_3.2 = [(-115640908_i32),802186869_i32,(-622671110_i32),911066673_i32];
(*_9) = (-107_i8) as f64;
place!(Field::<bool>(Variant(_8, 3), 0)) = (*RET) > (*RET);
(*_9) = _5 as f64;
(*_9) = _3.1.0 + _3.1.0;
place!(Field::<u64>(Variant(_8, 3), 5)) = 5874222057440050853_i64 as u64;
Call((*RET) = core::intrinsics::bswap(113045657407728124641939956278399637841_u128), ReturnTo(bb10), UnwindUnreachable())
}
bb10 = {
(*RET) = 60425595399845506551999675534733427560_u128;
(*RET) = 132361166355585037695753464079242150342_u128;
_17 = _4;
(*RET) = _5 as u128;
_15 = 403042995_i32 as u8;
_3.1.1 = !_3.3;
place!(Field::<f64>(Variant(_8, 3), 3)) = (*_9);
_3.3 = Field::<i128>(Variant(_8, 3), 7);
_11 = core::ptr::addr_of_mut!(_3.2);
(*RET) = 90461604456560301189530913355115973323_u128 ^ 178638338939025539052010218829177136119_u128;
(*_11) = [462855062_i32,(-81598614_i32),(-2058284404_i32),331830509_i32];
(*_11) = _6.0;
(*_11) = [(-256649949_i32),(-1738615206_i32),1692359378_i32,46844493_i32];
(*_11) = [(-1104249804_i32),(-590760176_i32),(-1910782468_i32),(-1327982533_i32)];
(*RET) = !160306672369354970057661629539417223903_u128;
place!(Field::<u8>(Variant(_8, 3), 6)) = (*RET) as u8;
(*_11) = [(-1666858298_i32),(-1969926653_i32),(-1830901901_i32),(-1513084436_i32)];
Goto(bb11)
}
bb11 = {
(*_9) = -Field::<f64>(Variant(_8, 3), 3);
place!(Field::<u32>(Variant(_8, 3), 4)) = 1966088746_u32;
_3.1.0 = (-744666102540469323_i64) as f64;
_3.1.2 = _8;
(*_11) = [505155640_i32,(-1615210973_i32),344878603_i32,(-881340065_i32)];
(*_9) = Field::<f64>(Variant(_3.1.2, 3), 3) - Field::<f64>(Variant(_8, 3), 3);
(*_9) = Field::<f64>(Variant(_8, 3), 3);
place!(Field::<char>(Variant(_3.1.2, 3), 1)) = _17;
(*_11) = [272517233_i32,(-1647374397_i32),222255958_i32,(-942662523_i32)];
(*_11) = [(-2053488541_i32),1373464673_i32,1169087608_i32,(-590417153_i32)];
(*_9) = -Field::<f64>(Variant(_3.1.2, 3), 3);
_21.fld0 = !Field::<bool>(Variant(_3.1.2, 3), 0);
_3.1.0 = (*_9);
_15 = !Field::<u8>(Variant(_3.1.2, 3), 6);
_24 = (*_9) * (*_9);
_7 = &(*_11);
(*_11) = [(-2129896855_i32),(-366256623_i32),(-299875952_i32),381055863_i32];
(*_9) = 15687671312652530400_usize as f64;
_6.0 = [(-967612252_i32),1827570438_i32,1232744609_i32,1151487139_i32];
match Field::<u32>(Variant(_3.1.2, 3), 4) {
0 => bb10,
1966088746 => bb13,
_ => bb12
}
}
bb12 = {
_5 = (-312367548_i32) as isize;
Goto(bb4)
}
bb13 = {
_21.fld6.1 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_3.1.2, 3), 0),fld1: _17,fld2: _5,fld3: (*_9),fld4: Field::<u32>(Variant(_8, 3), 4),fld5: _13,fld6: Field::<u8>(Variant(_8, 3), 6),fld7: Field::<i128>(Variant(_8, 3), 7) };
(*_9) = -_3.1.0;
_19 = !(-3858770981217985912_i64);
(*_11) = [(-1747578023_i32),475881321_i32,1884619064_i32,(-428743375_i32)];
_17 = Field::<char>(Variant(_8, 3), 1);
_21.fld5 = Field::<f64>(Variant(_8, 3), 3);
(*RET) = 245714725851203515599437380686257651837_u128;
(*_11) = [(-1852397951_i32),1842712896_i32,(-1830126631_i32),(-1165475869_i32)];
_25 = 818279642_i32 - 320408786_i32;
(*RET) = 273401487087719163059210256383108866981_u128 ^ 89173195187608031806582729646502885569_u128;
(*RET) = 152752911062620180652124480917521965570_u128 + 221650406061357513035688899734963757584_u128;
place!(Field::<u32>(Variant(_8, 3), 4)) = !Field::<u32>(Variant(_21.fld6.1, 3), 4);
_7 = &_6.0;
(*RET) = 20684885496915925052117737719225439973_u128 ^ 297202350044080462185531925193218827315_u128;
place!(Field::<bool>(Variant(_8, 3), 0)) = (*_9) <= (*_9);
(*RET) = !16013093402440130037558292303894590553_u128;
(*_11) = (*_7);
place!(Field::<char>(Variant(_8, 3), 1)) = Field::<char>(Variant(_21.fld6.1, 3), 1);
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = _4;
(*_11) = [_25,_25,_25,_25];
(*_11) = (*_7);
_22 = _19 as i8;
_3.1 = ((*_9), _3.3, _21.fld6.1);
(*_11) = [_25,_25,_25,_25];
Goto(bb14)
}
bb14 = {
(*_9) = -Field::<f64>(Variant(_3.1.2, 3), 3);
_21.fld2 = -Field::<isize>(Variant(_3.1.2, 3), 2);
(*_9) = _3.1.0 - _3.1.0;
(*_11) = (*_7);
(*_9) = _3.1.0;
_18 = _25 as i128;
_21.fld2 = -Field::<isize>(Variant(_21.fld6.1, 3), 2);
place!(Field::<u64>(Variant(_3.1.2, 3), 5)) = !Field::<u64>(Variant(_21.fld6.1, 3), 5);
_3.1 = ((*_9), _18, _21.fld6.1);
_15 = Field::<u64>(Variant(_8, 3), 5) as u8;
_1 = [8575964506917660575_usize];
_21.fld2 = !Field::<isize>(Variant(_3.1.2, 3), 2);
(*_9) = -Field::<f64>(Variant(_3.1.2, 3), 3);
place!(Field::<isize>(Variant(_8, 3), 2)) = Field::<isize>(Variant(_21.fld6.1, 3), 2) - Field::<isize>(Variant(_21.fld6.1, 3), 2);
(*_11) = (*_7);
_6 = ((*_11),);
RET = core::ptr::addr_of_mut!((*RET));
place!(Field::<isize>(Variant(_3.1.2, 3), 2)) = _5 | Field::<isize>(Variant(_8, 3), 2);
_17 = _4;
(*RET) = 268453707145971380668344754599793689523_u128;
place!(Field::<bool>(Variant(_8, 3), 0)) = !_21.fld0;
Goto(bb15)
}
bb15 = {
place!(Field::<bool>(Variant(_21.fld6.1, 3), 0)) = _21.fld0;
_26 = Move(_7);
(*RET) = 76844070051732304354849554189279411812_u128;
place!(Field::<isize>(Variant(_21.fld6.1, 3), 2)) = _5;
(*RET) = 52310479192733628176022762950476292507_u128 * 120694838562972111019622367749204068002_u128;
(*_9) = (*RET) as f64;
_32 = (Field::<char>(Variant(_21.fld6.1, 3), 1), _21.fld6.1);
place!(Field::<i128>(Variant(_3.1.2, 3), 7)) = !Field::<i128>(Variant(_32.1, 3), 7);
_32 = (_10, _21.fld6.1);
_7 = &_6.0;
_5 = Field::<isize>(Variant(_3.1.2, 3), 2) * _21.fld2;
(*_9) = _24 + _21.fld5;
_21.fld6.1 = _3.1.2;
(*RET) = !141488227002447588489136787610466527837_u128;
(*_11) = [_25,_25,_25,_25];
place!(Field::<isize>(Variant(_32.1, 3), 2)) = _5 * Field::<isize>(Variant(_21.fld6.1, 3), 2);
match Field::<u32>(Variant(_32.1, 3), 4) {
0 => bb16,
1 => bb17,
1966088746 => bb19,
_ => bb18
}
}
bb16 = {
(*_9) = -Field::<f64>(Variant(_8, 3), 3);
place!(Field::<u32>(Variant(_8, 3), 4)) = 1966088746_u32;
_3.1.0 = (-744666102540469323_i64) as f64;
_3.1.2 = _8;
(*_11) = [505155640_i32,(-1615210973_i32),344878603_i32,(-881340065_i32)];
(*_9) = Field::<f64>(Variant(_3.1.2, 3), 3) - Field::<f64>(Variant(_8, 3), 3);
(*_9) = Field::<f64>(Variant(_8, 3), 3);
place!(Field::<char>(Variant(_3.1.2, 3), 1)) = _17;
(*_11) = [272517233_i32,(-1647374397_i32),222255958_i32,(-942662523_i32)];
(*_11) = [(-2053488541_i32),1373464673_i32,1169087608_i32,(-590417153_i32)];
(*_9) = -Field::<f64>(Variant(_3.1.2, 3), 3);
_21.fld0 = !Field::<bool>(Variant(_3.1.2, 3), 0);
_3.1.0 = (*_9);
_15 = !Field::<u8>(Variant(_3.1.2, 3), 6);
_24 = (*_9) * (*_9);
_7 = &(*_11);
(*_11) = [(-2129896855_i32),(-366256623_i32),(-299875952_i32),381055863_i32];
(*_9) = 15687671312652530400_usize as f64;
_6.0 = [(-967612252_i32),1827570438_i32,1232744609_i32,1151487139_i32];
match Field::<u32>(Variant(_3.1.2, 3), 4) {
0 => bb10,
1966088746 => bb13,
_ => bb12
}
}
bb17 = {
_21.fld6.1 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_3.1.2, 3), 0),fld1: _17,fld2: _5,fld3: (*_9),fld4: Field::<u32>(Variant(_8, 3), 4),fld5: _13,fld6: Field::<u8>(Variant(_8, 3), 6),fld7: Field::<i128>(Variant(_8, 3), 7) };
(*_9) = -_3.1.0;
_19 = !(-3858770981217985912_i64);
(*_11) = [(-1747578023_i32),475881321_i32,1884619064_i32,(-428743375_i32)];
_17 = Field::<char>(Variant(_8, 3), 1);
_21.fld5 = Field::<f64>(Variant(_8, 3), 3);
(*RET) = 245714725851203515599437380686257651837_u128;
(*_11) = [(-1852397951_i32),1842712896_i32,(-1830126631_i32),(-1165475869_i32)];
_25 = 818279642_i32 - 320408786_i32;
(*RET) = 273401487087719163059210256383108866981_u128 ^ 89173195187608031806582729646502885569_u128;
(*RET) = 152752911062620180652124480917521965570_u128 + 221650406061357513035688899734963757584_u128;
place!(Field::<u32>(Variant(_8, 3), 4)) = !Field::<u32>(Variant(_21.fld6.1, 3), 4);
_7 = &_6.0;
(*RET) = 20684885496915925052117737719225439973_u128 ^ 297202350044080462185531925193218827315_u128;
place!(Field::<bool>(Variant(_8, 3), 0)) = (*_9) <= (*_9);
(*RET) = !16013093402440130037558292303894590553_u128;
(*_11) = (*_7);
place!(Field::<char>(Variant(_8, 3), 1)) = Field::<char>(Variant(_21.fld6.1, 3), 1);
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = _4;
(*_11) = [_25,_25,_25,_25];
(*_11) = (*_7);
_22 = _19 as i8;
_3.1 = ((*_9), _3.3, _21.fld6.1);
(*_11) = [_25,_25,_25,_25];
Goto(bb14)
}
bb18 = {
_3.1.1 = !_2.1;
_3.3 = _2.1 - _2.1;
_1 = [8498868838007234569_usize];
_3.3 = _3.1.1 ^ _3.1.1;
place!(Field::<char>(Variant(_2.2, 2), 1)) = '\u{25d9}';
_2.1 = _3.1.1;
_3.2 = [1858704596_i32,1879566488_i32,1590445665_i32,(-2047525006_i32)];
place!(Field::<char>(Variant(_2.2, 2), 1)) = '\u{10231c}';
_2.0 = 5_usize as f64;
_6.0 = [(-806766911_i32),(-1600386596_i32),(-243577015_i32),945100630_i32];
_3.2 = [(-1618410395_i32),664234113_i32,959922840_i32,(-1386343622_i32)];
_1 = [11932545178081415417_usize];
_4 = Field::<char>(Variant(_2.2, 2), 1);
_6 = (_3.2,);
_6 = (_3.2,);
_2.2 = Adt18::Variant0 { fld0: (-37_i8),fld1: _4,fld2: 26_isize };
place!(Field::<i8>(Variant(_2.2, 0), 0)) = (-123_i8);
_1 = [7210338679554880940_usize];
_7 = &_6.0;
_2.0 = (-5195138545977006535_i64) as f64;
_9 = &mut _2.0;
(*_9) = (-7659592347112438207_i64) as f64;
_3.1.0 = (*_9);
Call((*_9) = core::intrinsics::fmaf64(_3.1.0, _3.1.0, _3.1.0), ReturnTo(bb3), UnwindUnreachable())
}
bb19 = {
_21.fld3 = 3018749914766733074_usize as i8;
place!(Field::<u32>(Variant(_21.fld6.1, 3), 4)) = Field::<u32>(Variant(_3.1.2, 3), 4) - Field::<u32>(Variant(_32.1, 3), 4);
_36 = (1741043279261472898_usize, 2_usize);
_19 = 2897983050320986663_i64 >> Field::<u32>(Variant(_8, 3), 4);
place!(Field::<i128>(Variant(_8, 3), 7)) = _3.1.1 * _18;
place!(Field::<u64>(Variant(_32.1, 3), 5)) = _13 ^ _13;
place!(Field::<f64>(Variant(_8, 3), 3)) = (*_9);
place!(Field::<f64>(Variant(_8, 3), 3)) = (*_9) + (*_9);
(*_11) = [_25,_25,_25,_25];
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = _10;
(*RET) = 13569_u16 as u128;
_32 = (_17, _8);
_29 = _22;
_21.fld7 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_8, 3), 0),fld1: _32.0,fld2: Field::<isize>(Variant(_8, 3), 2),fld3: (*_9),fld4: Field::<u32>(Variant(_32.1, 3), 4),fld5: Field::<u64>(Variant(_21.fld6.1, 3), 5),fld6: Field::<u8>(Variant(_3.1.2, 3), 6),fld7: _3.3 };
(*_11) = (*_7);
Goto(bb20)
}
bb20 = {
(*_11) = [_25,_25,_25,_25];
(*RET) = 254675497238367583666584141718273974698_u128 >> _36.0;
_41.1.2 = [_36.0];
(*_9) = _24;
_29 = _21.fld3 | _22;
(*_11) = [_25,_25,_25,_25];
_4 = Field::<char>(Variant(_8, 3), 1);
_21.fld7 = Adt18::Variant3 { fld0: _21.fld0,fld1: Field::<char>(Variant(_21.fld6.1, 3), 1),fld2: Field::<isize>(Variant(_21.fld6.1, 3), 2),fld3: (*_9),fld4: Field::<u32>(Variant(_21.fld6.1, 3), 4),fld5: Field::<u64>(Variant(_8, 3), 5),fld6: Field::<u8>(Variant(_8, 3), 6),fld7: Field::<i128>(Variant(_32.1, 3), 7) };
_40.1.fld4.2 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_21.fld6.1, 3), 0),fld1: Field::<char>(Variant(_32.1, 3), 1),fld2: _5,fld3: Field::<f64>(Variant(_32.1, 3), 3),fld4: Field::<u32>(Variant(_8, 3), 4),fld5: Field::<u64>(Variant(_3.1.2, 3), 5),fld6: Field::<u8>(Variant(_32.1, 3), 6),fld7: _3.3 };
match _36.0 {
0 => bb1,
1 => bb15,
1741043279261472898 => bb22,
_ => bb21
}
}
bb21 = {
RET = core::ptr::addr_of_mut!(_14);
(*_9) = Field::<f64>(Variant(_8, 3), 3);
(*RET) = _5 as u128;
(*RET) = 255401456340747683865467654500389046911_u128 >> _5;
(*RET) = 61215542467910008450949966373662688578_u128 << Field::<i128>(Variant(_8, 3), 7);
(*RET) = 163008311498366530187361020782852922400_u128 + 313351229817368729712693373305441228884_u128;
_3.3 = Field::<i128>(Variant(_8, 3), 7) << (*RET);
_3.2 = [(-115640908_i32),802186869_i32,(-622671110_i32),911066673_i32];
(*_9) = (-107_i8) as f64;
place!(Field::<bool>(Variant(_8, 3), 0)) = (*RET) > (*RET);
(*_9) = _5 as f64;
(*_9) = _3.1.0 + _3.1.0;
place!(Field::<u64>(Variant(_8, 3), 5)) = 5874222057440050853_i64 as u64;
Call((*RET) = core::intrinsics::bswap(113045657407728124641939956278399637841_u128), ReturnTo(bb10), UnwindUnreachable())
}
bb22 = {
RET = core::ptr::addr_of_mut!((*RET));
(*_11) = [_25,_25,_25,_25];
_40.0.fld2 = !Field::<isize>(Variant(_21.fld7, 3), 2);
(*_9) = Field::<f64>(Variant(_40.1.fld4.2, 3), 3) - Field::<f64>(Variant(_8, 3), 3);
_40.0.fld3 = _19 as i8;
_40.1.fld5 = -Field::<i128>(Variant(_8, 3), 7);
_8 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_32.1, 3), 0),fld1: Field::<char>(Variant(_32.1, 3), 1),fld2: Field::<isize>(Variant(_40.1.fld4.2, 3), 2),fld3: (*_9),fld4: Field::<u32>(Variant(_21.fld7, 3), 4),fld5: Field::<u64>(Variant(_3.1.2, 3), 5),fld6: Field::<u8>(Variant(_21.fld6.1, 3), 6),fld7: Field::<i128>(Variant(_32.1, 3), 7) };
_32 = (Field::<char>(Variant(_21.fld6.1, 3), 1), _8);
(*_9) = -Field::<f64>(Variant(_8, 3), 3);
place!(Field::<f64>(Variant(_21.fld6.1, 3), 3)) = (*_9) + (*_9);
match _36.1 {
0 => bb12,
1 => bb8,
3 => bb23,
2 => bb25,
_ => bb24
}
}
bb23 = {
_2.1 = 53179292163646161626643169712264098044_i128 >> 5320988560211924695_u64;
_2.2 = Adt18::Variant2 { fld0: 50966_u16,fld1: '\u{100fd3}',fld2: 1752958898_u32 };
_2.1 = 63928268795359637970736457246550662987_i128 & (-108605691313433639271805365776211585511_i128);
_2.1 = (-31722082802042592334383548270044776965_i128);
Goto(bb2)
}
bb24 = {
(*_11) = [_25,_25,_25,_25];
(*RET) = 254675497238367583666584141718273974698_u128 >> _36.0;
_41.1.2 = [_36.0];
(*_9) = _24;
_29 = _21.fld3 | _22;
(*_11) = [_25,_25,_25,_25];
_4 = Field::<char>(Variant(_8, 3), 1);
_21.fld7 = Adt18::Variant3 { fld0: _21.fld0,fld1: Field::<char>(Variant(_21.fld6.1, 3), 1),fld2: Field::<isize>(Variant(_21.fld6.1, 3), 2),fld3: (*_9),fld4: Field::<u32>(Variant(_21.fld6.1, 3), 4),fld5: Field::<u64>(Variant(_8, 3), 5),fld6: Field::<u8>(Variant(_8, 3), 6),fld7: Field::<i128>(Variant(_32.1, 3), 7) };
_40.1.fld4.2 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_21.fld6.1, 3), 0),fld1: Field::<char>(Variant(_32.1, 3), 1),fld2: _5,fld3: Field::<f64>(Variant(_32.1, 3), 3),fld4: Field::<u32>(Variant(_8, 3), 4),fld5: Field::<u64>(Variant(_3.1.2, 3), 5),fld6: Field::<u8>(Variant(_32.1, 3), 6),fld7: _3.3 };
match _36.0 {
0 => bb1,
1 => bb15,
1741043279261472898 => bb22,
_ => bb21
}
}
bb25 = {
_40.0.fld6.0 = Field::<char>(Variant(_8, 3), 1);
place!(Field::<u64>(Variant(_3.1.2, 3), 5)) = Field::<u64>(Variant(_21.fld6.1, 3), 5) + _13;
place!(Field::<isize>(Variant(_21.fld7, 3), 2)) = Field::<u8>(Variant(_3.1.2, 3), 6) as isize;
_32 = (_4, _8);
_14 = 215249003934044743667069645827507537516_u128 * 243750601154918083489482910236633525027_u128;
place!(Field::<f64>(Variant(_21.fld7, 3), 3)) = 2032_u16 as f64;
(*_11) = [_25,_25,_25,_25];
place!(Field::<isize>(Variant(_21.fld6.1, 3), 2)) = _32.0 as isize;
place!(Field::<f64>(Variant(_3.1.2, 3), 3)) = _5 as f64;
_3.2 = [_25,_25,_25,_25];
_3.3 = Field::<i128>(Variant(_21.fld6.1, 3), 7);
_40.1.fld3 = _40.0.fld3 & _40.0.fld3;
place!(Field::<bool>(Variant(_32.1, 3), 0)) = Field::<bool>(Variant(_21.fld6.1, 3), 0);
_40.1.fld4.0 = (*_9) - (*_9);
_40.1.fld4.1 = _17 as i128;
_47 = Field::<isize>(Variant(_40.1.fld4.2, 3), 2) ^ _5;
_40.0.fld7 = _21.fld6.1;
_21.fld6 = (Field::<char>(Variant(_8, 3), 1), _21.fld7);
_21.fld3 = (-5157_i16) as i8;
(*_9) = _19 as f64;
(*_9) = Field::<f64>(Variant(_3.1.2, 3), 3) + Field::<f64>(Variant(_40.0.fld7, 3), 3);
place!(Field::<f64>(Variant(_3.1.2, 3), 3)) = (*_9) + (*_9);
_3.1.1 = Field::<i128>(Variant(_8, 3), 7) - Field::<i128>(Variant(_21.fld6.1, 3), 7);
(*_9) = Field::<u32>(Variant(_21.fld7, 3), 4) as f64;
_14 = 67428375988745766090715372901623307859_u128 >> _3.3;
match _36.1 {
0 => bb11,
1 => bb26,
2 => bb28,
_ => bb27
}
}
bb26 = {
RET = core::ptr::addr_of_mut!(_14);
(*_9) = Field::<f64>(Variant(_8, 3), 3);
(*RET) = _5 as u128;
(*RET) = 255401456340747683865467654500389046911_u128 >> _5;
(*RET) = 61215542467910008450949966373662688578_u128 << Field::<i128>(Variant(_8, 3), 7);
(*RET) = 163008311498366530187361020782852922400_u128 + 313351229817368729712693373305441228884_u128;
_3.3 = Field::<i128>(Variant(_8, 3), 7) << (*RET);
_3.2 = [(-115640908_i32),802186869_i32,(-622671110_i32),911066673_i32];
(*_9) = (-107_i8) as f64;
place!(Field::<bool>(Variant(_8, 3), 0)) = (*RET) > (*RET);
(*_9) = _5 as f64;
(*_9) = _3.1.0 + _3.1.0;
place!(Field::<u64>(Variant(_8, 3), 5)) = 5874222057440050853_i64 as u64;
Call((*RET) = core::intrinsics::bswap(113045657407728124641939956278399637841_u128), ReturnTo(bb10), UnwindUnreachable())
}
bb27 = {
_4 = '\u{2d096}';
_3.2 = [(-403010829_i32),(-713360840_i32),(-1546351451_i32),(-399040208_i32)];
(*_9) = _3.1.0;
(*_9) = _3.1.0 * _3.1.0;
(*_9) = _3.1.0 + _3.1.0;
(*_9) = _3.1.0 - _3.1.0;
(*_9) = 8885237759500123635_i64 as f64;
(*_9) = 88_u8 as f64;
Goto(bb6)
}
bb28 = {
_25 = (-1603440850_i32);
_21.fld4 = Adt58::Variant0 { fld0: _36 };
(*_9) = (*RET) as f64;
(*RET) = 170176130626930996791637031325857647618_u128;
_8 = Adt18::Variant0 { fld0: _29,fld1: _32.0,fld2: Field::<isize>(Variant(_32.1, 3), 2) };
place!(Field::<u8>(Variant(_3.1.2, 3), 6)) = !Field::<u8>(Variant(_21.fld7, 3), 6);
place!(Field::<isize>(Variant(_3.1.2, 3), 2)) = Field::<isize>(Variant(_40.1.fld4.2, 3), 2);
place!(Field::<char>(Variant(_40.0.fld7, 3), 1)) = _32.0;
_23.1 = _21.fld6.0;
(*RET) = Field::<char>(Variant(_40.0.fld7, 3), 1) as u128;
_40.0.fld0 = Field::<u32>(Variant(_21.fld6.1, 3), 4) < Field::<u32>(Variant(_21.fld6.1, 3), 4);
_46 = !_40.0.fld0;
(*RET) = !59117884259506671978343079295843876407_u128;
(*_11) = [_25,_25,_25,_25];
place!(Field::<u8>(Variant(_3.1.2, 3), 6)) = Field::<u8>(Variant(_32.1, 3), 6);
(*RET) = 243775248301396634252114422904863553046_u128 >> _47;
_31 = Field::<f64>(Variant(_3.1.2, 3), 3) != _40.1.fld4.0;
_21.fld5 = (*_9) + Field::<f64>(Variant(_3.1.2, 3), 3);
_40.0.fld5 = Field::<f64>(Variant(_32.1, 3), 3);
(*_9) = Field::<f64>(Variant(_3.1.2, 3), 3);
(*RET) = 14267035018858761068881622138650521566_u128;
(*_9) = -Field::<f64>(Variant(_40.0.fld7, 3), 3);
_48 = _14 as f32;
(*_11) = [_25,_25,_25,_25];
place!(Field::<f64>(Variant(_21.fld7, 3), 3)) = (*_9);
place!(Field::<u8>(Variant(_32.1, 3), 6)) = Field::<u8>(Variant(_40.1.fld4.2, 3), 6);
(*_9) = (-1454_i16) as f64;
_32.1 = Adt18::Variant0 { fld0: Field::<i8>(Variant(_8, 0), 0),fld1: _40.0.fld6.0,fld2: Field::<isize>(Variant(_3.1.2, 3), 2) };
_3.1.0 = Field::<f64>(Variant(_3.1.2, 3), 3);
Call(_5 = core::intrinsics::transmute(_21.fld2), ReturnTo(bb29), UnwindUnreachable())
}
bb29 = {
place!(Field::<(usize, usize)>(Variant(_21.fld4, 0), 0)) = (_36.1, _36.0);
Goto(bb30)
}
bb30 = {
place!(Field::<i8>(Variant(_8, 0), 0)) = _48 as i8;
place!(Field::<isize>(Variant(_21.fld7, 3), 2)) = (*RET) as isize;
place!(Field::<u64>(Variant(_40.1.fld4.2, 3), 5)) = Field::<u64>(Variant(_21.fld6.1, 3), 5) + Field::<u64>(Variant(_21.fld6.1, 3), 5);
place!(Field::<(usize, usize)>(Variant(_21.fld4, 0), 0)).0 = _36.1 >> _40.0.fld2;
(*_9) = _40.1.fld4.0 + Field::<f64>(Variant(_40.1.fld4.2, 3), 3);
_33 = _21.fld0;
(*_9) = _15 as f64;
match _36.1 {
2 => bb32,
_ => bb31
}
}
bb31 = {
_21.fld6.1 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_3.1.2, 3), 0),fld1: _17,fld2: _5,fld3: (*_9),fld4: Field::<u32>(Variant(_8, 3), 4),fld5: _13,fld6: Field::<u8>(Variant(_8, 3), 6),fld7: Field::<i128>(Variant(_8, 3), 7) };
(*_9) = -_3.1.0;
_19 = !(-3858770981217985912_i64);
(*_11) = [(-1747578023_i32),475881321_i32,1884619064_i32,(-428743375_i32)];
_17 = Field::<char>(Variant(_8, 3), 1);
_21.fld5 = Field::<f64>(Variant(_8, 3), 3);
(*RET) = 245714725851203515599437380686257651837_u128;
(*_11) = [(-1852397951_i32),1842712896_i32,(-1830126631_i32),(-1165475869_i32)];
_25 = 818279642_i32 - 320408786_i32;
(*RET) = 273401487087719163059210256383108866981_u128 ^ 89173195187608031806582729646502885569_u128;
(*RET) = 152752911062620180652124480917521965570_u128 + 221650406061357513035688899734963757584_u128;
place!(Field::<u32>(Variant(_8, 3), 4)) = !Field::<u32>(Variant(_21.fld6.1, 3), 4);
_7 = &_6.0;
(*RET) = 20684885496915925052117737719225439973_u128 ^ 297202350044080462185531925193218827315_u128;
place!(Field::<bool>(Variant(_8, 3), 0)) = (*_9) <= (*_9);
(*RET) = !16013093402440130037558292303894590553_u128;
(*_11) = (*_7);
place!(Field::<char>(Variant(_8, 3), 1)) = Field::<char>(Variant(_21.fld6.1, 3), 1);
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = _4;
(*_11) = [_25,_25,_25,_25];
(*_11) = (*_7);
_22 = _19 as i8;
_3.1 = ((*_9), _3.3, _21.fld6.1);
(*_11) = [_25,_25,_25,_25];
Goto(bb14)
}
bb32 = {
place!(Field::<u32>(Variant(_21.fld6.1, 3), 4)) = Field::<u32>(Variant(_3.1.2, 3), 4) % Field::<u32>(Variant(_3.1.2, 3), 4);
_50 = _4;
(*_9) = -Field::<f64>(Variant(_3.1.2, 3), 3);
(*RET) = 324685959313417961564361495074060563944_u128;
_51.1.fld1 = Field::<u32>(Variant(_21.fld7, 3), 4) as i64;
_10 = Field::<char>(Variant(_40.0.fld7, 3), 1);
_26 = &(*_7);
place!(Field::<char>(Variant(_3.1.2, 3), 1)) = Field::<char>(Variant(_40.1.fld4.2, 3), 1);
place!(Field::<u64>(Variant(_3.1.2, 3), 5)) = _48 as u64;
_40.1.fld4.2 = Adt18::Variant1 { fld0: Field::<u8>(Variant(_40.0.fld7, 3), 6),fld1: _48 };
_40.0.fld6.1 = Adt18::Variant1 { fld0: Field::<u8>(Variant(_21.fld7, 3), 6),fld1: _48 };
_51.1.fld0 = !_31;
place!(Field::<u8>(Variant(_3.1.2, 3), 6)) = _17 as u8;
_51.0.fld7 = Adt18::Variant0 { fld0: Field::<i8>(Variant(_32.1, 0), 0),fld1: _32.0,fld2: Field::<isize>(Variant(_8, 0), 2) };
place!(Field::<isize>(Variant(_21.fld7, 3), 2)) = -Field::<isize>(Variant(_51.0.fld7, 0), 2);
_51.1.fld4.0 = (*_9) + (*_9);
Goto(bb33)
}
bb33 = {
_24 = (*_9);
_40.1.fld4.2 = Adt18::Variant3 { fld0: _31,fld1: Field::<char>(Variant(_8, 0), 1),fld2: Field::<isize>(Variant(_32.1, 0), 2),fld3: (*_9),fld4: Field::<u32>(Variant(_40.0.fld7, 3), 4),fld5: Field::<u64>(Variant(_21.fld6.1, 3), 5),fld6: _15,fld7: _18 };
_51.1.fld4.0 = _29 as f64;
(*_11) = (*_26);
_41.1.0 = _29;
_40.1.fld2 = [_51.1.fld1,_51.1.fld1,_19,_19,_51.1.fld1,_51.1.fld1,_51.1.fld1,_19];
place!(Field::<u64>(Variant(_40.0.fld7, 3), 5)) = _13;
(*_9) = (*RET) as f64;
_36.0 = _19 as usize;
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = Field::<char>(Variant(_51.0.fld7, 0), 1);
_24 = Field::<f64>(Variant(_40.1.fld4.2, 3), 3) - _40.1.fld4.0;
place!(Field::<(usize, usize)>(Variant(_21.fld4, 0), 0)).1 = Field::<(usize, usize)>(Variant(_21.fld4, 0), 0).0 << Field::<i8>(Variant(_51.0.fld7, 0), 0);
_54.0 = core::ptr::addr_of_mut!(_48);
_30 = _19 ^ _19;
_53 = !Field::<u8>(Variant(_21.fld6.1, 3), 6);
_51.1.fld4.1 = Field::<i128>(Variant(_21.fld6.1, 3), 7) * Field::<i128>(Variant(_40.0.fld7, 3), 7);
(*_11) = [_25,_25,_25,_25];
_21.fld6.1 = Adt18::Variant3 { fld0: _31,fld1: Field::<char>(Variant(_21.fld7, 3), 1),fld2: Field::<isize>(Variant(_32.1, 0), 2),fld3: Field::<f64>(Variant(_3.1.2, 3), 3),fld4: Field::<u32>(Variant(_40.0.fld7, 3), 4),fld5: Field::<u64>(Variant(_3.1.2, 3), 5),fld6: Field::<u8>(Variant(_40.0.fld6.1, 1), 0),fld7: _3.1.1 };
place!(Field::<u8>(Variant(_40.1.fld4.2, 3), 6)) = Field::<u8>(Variant(_40.0.fld7, 3), 6) ^ _53;
Goto(bb34)
}
bb34 = {
_60 = &_1;
place!(Field::<bool>(Variant(_40.0.fld7, 3), 0)) = !Field::<bool>(Variant(_40.1.fld4.2, 3), 0);
(*_9) = Field::<f64>(Variant(_21.fld7, 3), 3) * Field::<f64>(Variant(_40.1.fld4.2, 3), 3);
(*_9) = Field::<f64>(Variant(_21.fld6.1, 3), 3) * _21.fld5;
_51.2 = Adt58::Variant0 { fld0: Field::<(usize, usize)>(Variant(_21.fld4, 0), 0) };
(*RET) = 250156037641226939467547836716450365991_u128 >> Field::<u8>(Variant(_21.fld7, 3), 6);
_51.0.fld4 = Move(_21.fld4);
match _25 {
0 => bb25,
1 => bb21,
2 => bb7,
340282366920938463463374607430164770606 => bb35,
_ => bb14
}
}
bb35 = {
(*_9) = -_24;
(*_9) = -Field::<f64>(Variant(_21.fld7, 3), 3);
(*_9) = Field::<f64>(Variant(_21.fld6.1, 3), 3) + Field::<f64>(Variant(_40.0.fld7, 3), 3);
_40.1.fld5 = -_18;
_51.0.fld5 = -(*_9);
place!(Field::<char>(Variant(_21.fld7, 3), 1)) = _4;
_54.0 = core::ptr::addr_of_mut!(_35);
_21.fld0 = (*_9) < (*_9);
place!(Field::<bool>(Variant(_40.1.fld4.2, 3), 0)) = Field::<bool>(Variant(_21.fld6.1, 3), 0);
(*RET) = 252841016963191204292616989765465291315_u128 & 150428170742920446171956860568921532996_u128;
_44 = &_54.0;
_51.1.fld4.1 = (*RET) as i128;
_23.0 = core::ptr::addr_of_mut!(_35);
place!(Field::<u8>(Variant(_40.0.fld7, 3), 6)) = _40.1.fld3 as u8;
_9 = &mut place!(Field::<f64>(Variant(_3.1.2, 3), 3));
_55 = (*_9) < (*_9);
place!(Field::<(usize, usize)>(Variant(_51.0.fld4, 0), 0)).0 = Field::<(usize, usize)>(Variant(_51.2, 0), 0).0;
_13 = Field::<u64>(Variant(_40.1.fld4.2, 3), 5) * Field::<u64>(Variant(_21.fld7, 3), 5);
_21.fld6.0 = Field::<char>(Variant(_32.1, 0), 1);
(*_9) = _51.0.fld5 + Field::<f64>(Variant(_21.fld7, 3), 3);
_34 = !Field::<u8>(Variant(_40.0.fld7, 3), 6);
(*_9) = Field::<f64>(Variant(_21.fld7, 3), 3);
_36 = (Field::<(usize, usize)>(Variant(_51.0.fld4, 0), 0).1, Field::<(usize, usize)>(Variant(_51.0.fld4, 0), 0).1);
(*RET) = 125597743237925311861235511128314763135_u128 & 224290359538506147031310892506463787730_u128;
Goto(bb36)
}
bb36 = {
_41.1.0 = _40.0.fld3;
_28 = -Field::<isize>(Variant(_32.1, 0), 2);
_54.1 = _17;
_53 = _34 | _34;
_40.0.fld7 = Adt18::Variant1 { fld0: Field::<u8>(Variant(_40.0.fld6.1, 1), 0),fld1: Field::<f32>(Variant(_40.0.fld6.1, 1), 1) };
_44 = &_23.0;
_54.1 = _23.1;
_51.0.fld6.1 = _21.fld7;
(*_9) = -Field::<f64>(Variant(_51.0.fld6.1, 3), 3);
_48 = (*_9) as f32;
_51.0.fld2 = Field::<(usize, usize)>(Variant(_51.2, 0), 0).1 as isize;
(*_11) = (*_7);
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = Field::<char>(Variant(_21.fld7, 3), 1);
_58 = _21.fld5 + _24;
place!(Field::<bool>(Variant(_40.1.fld4.2, 3), 0)) = _21.fld0;
_61 = Field::<u8>(Variant(_40.1.fld4.2, 3), 6) & _34;
_21.fld7 = Adt18::Variant2 { fld0: 42445_u16,fld1: _50,fld2: Field::<u32>(Variant(_21.fld6.1, 3), 4) };
(*_9) = Field::<f64>(Variant(_40.1.fld4.2, 3), 3);
_66 = core::ptr::addr_of!((*RET));
_33 = _53 == Field::<u8>(Variant(_40.0.fld6.1, 1), 0);
match _25 {
340282366920938463463374607430164770606 => bb37,
_ => bb8
}
}
bb37 = {
_52 = [_19,_51.1.fld1,_19,_51.1.fld1,_30,_30];
_20 = Field::<u32>(Variant(_40.1.fld4.2, 3), 4);
_32.1 = Adt18::Variant2 { fld0: 47612_u16,fld1: Field::<char>(Variant(_51.0.fld7, 0), 1),fld2: Field::<u32>(Variant(_40.1.fld4.2, 3), 4) };
(*RET) = 149391521346033364322492730673518612320_u128 + 153330079167544631289962355667191800390_u128;
_47 = Field::<isize>(Variant(_51.0.fld7, 0), 2);
place!(Field::<(usize, usize)>(Variant(_51.0.fld4, 0), 0)).0 = Field::<(usize, usize)>(Variant(_51.0.fld4, 0), 0).1 * Field::<(usize, usize)>(Variant(_51.2, 0), 0).1;
(*_11) = (*_7);
_32.1 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_21.fld6.1, 3), 0),fld1: _54.1,fld2: Field::<isize>(Variant(_21.fld6.1, 3), 2),fld3: _51.0.fld5,fld4: Field::<u32>(Variant(_21.fld7, 2), 2),fld5: _13,fld6: Field::<u8>(Variant(_40.1.fld4.2, 3), 6),fld7: _40.1.fld4.1 };
place!(Field::<u8>(Variant(_40.0.fld6.1, 1), 0)) = Field::<i128>(Variant(_40.1.fld4.2, 3), 7) as u8;
_32 = (_40.0.fld6.0, _21.fld6.1);
_23.0 = core::ptr::addr_of_mut!(place!(Field::<f32>(Variant(_40.0.fld7, 1), 1)));
match _25 {
0 => bb13,
340282366920938463463374607430164770606 => bb38,
_ => bb20
}
}
bb38 = {
(*_9) = _21.fld5 + Field::<f64>(Variant(_21.fld6.1, 3), 3);
_51.1.fld5 = _18 + Field::<i128>(Variant(_21.fld6.1, 3), 7);
_62 = Field::<char>(Variant(_51.0.fld6.1, 3), 1);
_40.1.fld1 = 10909_u16 as i64;
_51.0.fld0 = Field::<f64>(Variant(_21.fld6.1, 3), 3) > Field::<f64>(Variant(_32.1, 3), 3);
_50 = Field::<char>(Variant(_51.0.fld7, 0), 1);
(*RET) = 294947065310860491831986356992830067230_u128;
_51.0.fld6.0 = _54.1;
_21.fld7 = Adt18::Variant0 { fld0: Field::<i8>(Variant(_8, 0), 0),fld1: _21.fld6.0,fld2: _28 };
(*RET) = 72518361117697215391316426329650368276_u128;
(*_9) = Field::<f64>(Variant(_32.1, 3), 3) + _24;
place!(Field::<isize>(Variant(_8, 0), 2)) = _51.0.fld2;
_21.fld6.0 = _40.0.fld6.0;
place!(Field::<bool>(Variant(_32.1, 3), 0)) = Field::<bool>(Variant(_51.0.fld6.1, 3), 0) ^ _31;
match (*RET) {
0 => bb26,
72518361117697215391316426329650368276 => bb40,
_ => bb39
}
}
bb39 = {
_21.fld6.1 = Adt18::Variant3 { fld0: Field::<bool>(Variant(_3.1.2, 3), 0),fld1: _17,fld2: _5,fld3: (*_9),fld4: Field::<u32>(Variant(_8, 3), 4),fld5: _13,fld6: Field::<u8>(Variant(_8, 3), 6),fld7: Field::<i128>(Variant(_8, 3), 7) };
(*_9) = -_3.1.0;
_19 = !(-3858770981217985912_i64);
(*_11) = [(-1747578023_i32),475881321_i32,1884619064_i32,(-428743375_i32)];
_17 = Field::<char>(Variant(_8, 3), 1);
_21.fld5 = Field::<f64>(Variant(_8, 3), 3);
(*RET) = 245714725851203515599437380686257651837_u128;
(*_11) = [(-1852397951_i32),1842712896_i32,(-1830126631_i32),(-1165475869_i32)];
_25 = 818279642_i32 - 320408786_i32;
(*RET) = 273401487087719163059210256383108866981_u128 ^ 89173195187608031806582729646502885569_u128;
(*RET) = 152752911062620180652124480917521965570_u128 + 221650406061357513035688899734963757584_u128;
place!(Field::<u32>(Variant(_8, 3), 4)) = !Field::<u32>(Variant(_21.fld6.1, 3), 4);
_7 = &_6.0;
(*RET) = 20684885496915925052117737719225439973_u128 ^ 297202350044080462185531925193218827315_u128;
place!(Field::<bool>(Variant(_8, 3), 0)) = (*_9) <= (*_9);
(*RET) = !16013093402440130037558292303894590553_u128;
(*_11) = (*_7);
place!(Field::<char>(Variant(_8, 3), 1)) = Field::<char>(Variant(_21.fld6.1, 3), 1);
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = _4;
(*_11) = [_25,_25,_25,_25];
(*_11) = (*_7);
_22 = _19 as i8;
_3.1 = ((*_9), _3.3, _21.fld6.1);
(*_11) = [_25,_25,_25,_25];
Goto(bb14)
}
bb40 = {
(*_11) = [_25,_25,_25,_25];
place!(Field::<isize>(Variant(_40.1.fld4.2, 3), 2)) = _51.0.fld2;
_6 = ((*_11),);
_21.fld2 = _28 + Field::<isize>(Variant(_8, 0), 2);
(*RET) = 290143908888690923773543597059512401195_u128 + 6305950753326020342244264553902278709_u128;
(*RET) = 14530761152810064851855812330337264535_u128;
Goto(bb41)
}
bb41 = {
(*RET) = 161627947884943843360027372238797452635_u128;
(*_9) = Field::<f64>(Variant(_32.1, 3), 3) * _24;
place!(Field::<bool>(Variant(_40.1.fld4.2, 3), 0)) = _40.0.fld5 >= (*_9);
_38 = Field::<char>(Variant(_51.0.fld7, 0), 1);
_72 = _21.fld2 << Field::<isize>(Variant(_40.1.fld4.2, 3), 2);
match (*RET) {
0 => bb37,
1 => bb40,
2 => bb42,
3 => bb43,
4 => bb44,
161627947884943843360027372238797452635 => bb46,
_ => bb45
}
}
bb42 = {
_60 = &_1;
place!(Field::<bool>(Variant(_40.0.fld7, 3), 0)) = !Field::<bool>(Variant(_40.1.fld4.2, 3), 0);
(*_9) = Field::<f64>(Variant(_21.fld7, 3), 3) * Field::<f64>(Variant(_40.1.fld4.2, 3), 3);
(*_9) = Field::<f64>(Variant(_21.fld6.1, 3), 3) * _21.fld5;
_51.2 = Adt58::Variant0 { fld0: Field::<(usize, usize)>(Variant(_21.fld4, 0), 0) };
(*RET) = 250156037641226939467547836716450365991_u128 >> Field::<u8>(Variant(_21.fld7, 3), 6);
_51.0.fld4 = Move(_21.fld4);
match _25 {
0 => bb25,
1 => bb21,
2 => bb7,
340282366920938463463374607430164770606 => bb35,
_ => bb14
}
}
bb43 = {
place!(Field::<bool>(Variant(_21.fld6.1, 3), 0)) = _21.fld0;
_26 = Move(_7);
(*RET) = 76844070051732304354849554189279411812_u128;
place!(Field::<isize>(Variant(_21.fld6.1, 3), 2)) = _5;
(*RET) = 52310479192733628176022762950476292507_u128 * 120694838562972111019622367749204068002_u128;
(*_9) = (*RET) as f64;
_32 = (Field::<char>(Variant(_21.fld6.1, 3), 1), _21.fld6.1);
place!(Field::<i128>(Variant(_3.1.2, 3), 7)) = !Field::<i128>(Variant(_32.1, 3), 7);
_32 = (_10, _21.fld6.1);
_7 = &_6.0;
_5 = Field::<isize>(Variant(_3.1.2, 3), 2) * _21.fld2;
(*_9) = _24 + _21.fld5;
_21.fld6.1 = _3.1.2;
(*RET) = !141488227002447588489136787610466527837_u128;
(*_11) = [_25,_25,_25,_25];
place!(Field::<isize>(Variant(_32.1, 3), 2)) = _5 * Field::<isize>(Variant(_21.fld6.1, 3), 2);
match Field::<u32>(Variant(_32.1, 3), 4) {
0 => bb16,
1 => bb17,
1966088746 => bb19,
_ => bb18
}
}
bb44 = {
_40.0.fld6.0 = Field::<char>(Variant(_8, 3), 1);
place!(Field::<u64>(Variant(_3.1.2, 3), 5)) = Field::<u64>(Variant(_21.fld6.1, 3), 5) + _13;
place!(Field::<isize>(Variant(_21.fld7, 3), 2)) = Field::<u8>(Variant(_3.1.2, 3), 6) as isize;
_32 = (_4, _8);
_14 = 215249003934044743667069645827507537516_u128 * 243750601154918083489482910236633525027_u128;
place!(Field::<f64>(Variant(_21.fld7, 3), 3)) = 2032_u16 as f64;
(*_11) = [_25,_25,_25,_25];
place!(Field::<isize>(Variant(_21.fld6.1, 3), 2)) = _32.0 as isize;
place!(Field::<f64>(Variant(_3.1.2, 3), 3)) = _5 as f64;
_3.2 = [_25,_25,_25,_25];
_3.3 = Field::<i128>(Variant(_21.fld6.1, 3), 7);
_40.1.fld3 = _40.0.fld3 & _40.0.fld3;
place!(Field::<bool>(Variant(_32.1, 3), 0)) = Field::<bool>(Variant(_21.fld6.1, 3), 0);
_40.1.fld4.0 = (*_9) - (*_9);
_40.1.fld4.1 = _17 as i128;
_47 = Field::<isize>(Variant(_40.1.fld4.2, 3), 2) ^ _5;
_40.0.fld7 = _21.fld6.1;
_21.fld6 = (Field::<char>(Variant(_8, 3), 1), _21.fld7);
_21.fld3 = (-5157_i16) as i8;
(*_9) = _19 as f64;
(*_9) = Field::<f64>(Variant(_3.1.2, 3), 3) + Field::<f64>(Variant(_40.0.fld7, 3), 3);
place!(Field::<f64>(Variant(_3.1.2, 3), 3)) = (*_9) + (*_9);
_3.1.1 = Field::<i128>(Variant(_8, 3), 7) - Field::<i128>(Variant(_21.fld6.1, 3), 7);
(*_9) = Field::<u32>(Variant(_21.fld7, 3), 4) as f64;
_14 = 67428375988745766090715372901623307859_u128 >> _3.3;
match _36.1 {
0 => bb11,
1 => bb26,
2 => bb28,
_ => bb27
}
}
bb45 = {
_41.1.0 = _40.0.fld3;
_28 = -Field::<isize>(Variant(_32.1, 0), 2);
_54.1 = _17;
_53 = _34 | _34;
_40.0.fld7 = Adt18::Variant1 { fld0: Field::<u8>(Variant(_40.0.fld6.1, 1), 0),fld1: Field::<f32>(Variant(_40.0.fld6.1, 1), 1) };
_44 = &_23.0;
_54.1 = _23.1;
_51.0.fld6.1 = _21.fld7;
(*_9) = -Field::<f64>(Variant(_51.0.fld6.1, 3), 3);
_48 = (*_9) as f32;
_51.0.fld2 = Field::<(usize, usize)>(Variant(_51.2, 0), 0).1 as isize;
(*_11) = (*_7);
place!(Field::<char>(Variant(_21.fld6.1, 3), 1)) = Field::<char>(Variant(_21.fld7, 3), 1);
_58 = _21.fld5 + _24;
place!(Field::<bool>(Variant(_40.1.fld4.2, 3), 0)) = _21.fld0;
_61 = Field::<u8>(Variant(_40.1.fld4.2, 3), 6) & _34;
_21.fld7 = Adt18::Variant2 { fld0: 42445_u16,fld1: _50,fld2: Field::<u32>(Variant(_21.fld6.1, 3), 4) };
(*_9) = Field::<f64>(Variant(_40.1.fld4.2, 3), 3);
_66 = core::ptr::addr_of!((*RET));
_33 = _53 == Field::<u8>(Variant(_40.0.fld6.1, 1), 0);
match _25 {
340282366920938463463374607430164770606 => bb37,
_ => bb8
}
}
bb46 = {
_69 = !_30;
_23.1 = _17;
place!(Field::<isize>(Variant(_51.0.fld6.1, 3), 2)) = Field::<(usize, usize)>(Variant(_51.0.fld4, 0), 0).0 as isize;
(*_11) = [_25,_25,_25,_25];
(*_9) = _51.0.fld5 - _40.1.fld4.0;
(*_9) = _24;
_22 = _40.1.fld3 * Field::<i8>(Variant(_8, 0), 0);
_40.0.fld6.0 = _21.fld6.0;
_37 = Move(_60);
(*_11) = [_25,_25,_25,_25];
(*_9) = _13 as f64;
place!(Field::<isize>(Variant(_51.0.fld7, 0), 2)) = _51.0.fld0 as isize;
(*_9) = _20 as f64;
_76 = !Field::<bool>(Variant(_32.1, 3), 0);
Goto(bb47)
}
bb47 = {
_5 = -Field::<isize>(Variant(_51.0.fld7, 0), 2);
_51.0.fld3 = _72 as i8;
_8 = _21.fld6.1;
(*RET) = _4 as u128;
(*RET) = 289528111087267929800467258920186682596_u128;
place!(Field::<u32>(Variant(_21.fld6.1, 3), 4)) = !Field::<u32>(Variant(_32.1, 3), 4);
(*_9) = _24;
_40.0.fld6.0 = _51.0.fld6.0;
_21.fld4 = Adt58::Variant1 { fld0: _25,fld1: Field::<i128>(Variant(_8, 3), 7),fld2: Move(_66) };
_45 = Field::<f64>(Variant(_40.1.fld4.2, 3), 3) == _24;
place!(Field::<u8>(Variant(_32.1, 3), 6)) = !Field::<u8>(Variant(_40.0.fld6.1, 1), 0);
_60 = &_1;
(*_11) = [Field::<i32>(Variant(_21.fld4, 1), 0),_25,_25,Field::<i32>(Variant(_21.fld4, 1), 0)];
place!(Field::<f64>(Variant(_32.1, 3), 3)) = -(*_9);
place!(Field::<f64>(Variant(_40.1.fld4.2, 3), 3)) = -Field::<f64>(Variant(_8, 3), 3);
place!(Field::<char>(Variant(_40.1.fld4.2, 3), 1)) = _38;
_51.1.fld4.0 = (*RET) as f64;
_68 = &_25;
_58 = Field::<f64>(Variant(_32.1, 3), 3);
_51.1.fld2 = [_30,_30,_19,_30,_69,_51.1.fld1,_30,_30];
(*RET) = 246385807677873995987328807397256298437_u128 + 321969029416572512354195691789355117654_u128;
(*RET) = !163099990425472829283631434649419487299_u128;
place!(Field::<bool>(Variant(_8, 3), 0)) = Field::<bool>(Variant(_32.1, 3), 0) ^ _51.1.fld0;
(*_9) = -Field::<f64>(Variant(_21.fld6.1, 3), 3);
_51.0.fld6.1 = Adt18::Variant2 { fld0: 36156_u16,fld1: _4,fld2: Field::<u32>(Variant(_21.fld6.1, 3), 4) };
place!(Field::<i32>(Variant(_21.fld4, 1), 0)) = (*_68);
match (*_68) {
0 => bb48,
1 => bb49,
340282366920938463463374607430164770606 => bb51,
_ => bb50
}
}
bb48 = {
_25 = (-1603440850_i32);
_21.fld4 = Adt58::Variant0 { fld0: _36 };
(*_9) = (*RET) as f64;
(*RET) = 170176130626930996791637031325857647618_u128;
_8 = Adt18::Variant0 { fld0: _29,fld1: _32.0,fld2: Field::<isize>(Variant(_32.1, 3), 2) };
place!(Field::<u8>(Variant(_3.1.2, 3), 6)) = !Field::<u8>(Variant(_21.fld7, 3), 6);
place!(Field::<isize>(Variant(_3.1.2, 3), 2)) = Field::<isize>(Variant(_40.1.fld4.2, 3), 2);
place!(Field::<char>(Variant(_40.0.fld7, 3), 1)) = _32.0;
_23.1 = _21.fld6.0;
(*RET) = Field::<char>(Variant(_40.0.fld7, 3), 1) as u128;
_40.0.fld0 = Field::<u32>(Variant(_21.fld6.1, 3), 4) < Field::<u32>(Variant(_21.fld6.1, 3), 4);
_46 = !_40.0.fld0;
(*RET) = !59117884259506671978343079295843876407_u128;
(*_11) = [_25,_25,_25,_25];
place!(Field::<u8>(Variant(_3.1.2, 3), 6)) = Field::<u8>(Variant(_32.1, 3), 6);
(*RET) = 243775248301396634252114422904863553046_u128 >> _47;
_31 = Field::<f64>(Variant(_3.1.2, 3), 3) != _40.1.fld4.0;
_21.fld5 = (*_9) + Field::<f64>(Variant(_3.1.2, 3), 3);
_40.0.fld5 = Field::<f64>(Variant(_32.1, 3), 3);
(*_9) = Field::<f64>(Variant(_3.1.2, 3), 3);
(*RET) = 14267035018858761068881622138650521566_u128;
(*_9) = -Field::<f64>(Variant(_40.0.fld7, 3), 3);
_48 = _14 as f32;
(*_11) = [_25,_25,_25,_25];
place!(Field::<f64>(Variant(_21.fld7, 3), 3)) = (*_9);
place!(Field::<u8>(Variant(_32.1, 3), 6)) = Field::<u8>(Variant(_40.1.fld4.2, 3), 6);
(*_9) = (-1454_i16) as f64;
_32.1 = Adt18::Variant0 { fld0: Field::<i8>(Variant(_8, 0), 0),fld1: _40.0.fld6.0,fld2: Field::<isize>(Variant(_3.1.2, 3), 2) };
_3.1.0 = Field::<f64>(Variant(_3.1.2, 3), 3);
Call(_5 = core::intrinsics::transmute(_21.fld2), ReturnTo(bb29), UnwindUnreachable())
}
bb49 = {
(*_9) = (-8335179278092231749_i64) as f64;
place!(Field::<u8>(Variant(_8, 3), 6)) = !141_u8;
place!(Field::<u64>(Variant(_8, 3), 5)) = !_13;
place!(Field::<char>(Variant(_8, 3), 1)) = _10;
Goto(bb9)
}
bb50 = {
place!(Field::<(usize, usize)>(Variant(_21.fld4, 0), 0)) = (_36.1, _36.0);
Goto(bb30)
}
bb51 = {
_18 = _40.1.fld5 | Field::<i128>(Variant(_21.fld4, 1), 1);
_23 = Move(_54);
(*RET) = 219682679907523055173462615797160556357_u128;
_51.0.fld6.1 = Adt18::Variant1 { fld0: Field::<u8>(Variant(_40.1.fld4.2, 3), 6),fld1: _48 };
_40.1.fld4.1 = Field::<i128>(Variant(_8, 3), 7);
(*_11) = _6.0;
(*_11) = [(*_68),(*_68),(*_68),(*_68)];
_28 = (*RET) as isize;
_21.fld2 = -Field::<isize>(Variant(_51.0.fld7, 0), 2);
(*_11) = [(*_68),(*_68),(*_68),(*_68)];
_40.1.fld2 = [_51.1.fld1,_19,_30,_19,_30,_69,_69,_40.1.fld1];
_83.1.0 = _58 - _51.0.fld5;
place!(Field::<i32>(Variant(_21.fld4, 1), 0)) = (*_68);
_82 = [_45,_51.1.fld0,Field::<bool>(Variant(_8, 3), 0),_51.0.fld0,_51.1.fld0,Field::<bool>(Variant(_21.fld6.1, 3), 0),Field::<bool>(Variant(_32.1, 3), 0),Field::<bool>(Variant(_40.1.fld4.2, 3), 0)];
_36.0 = Field::<char>(Variant(_32.1, 3), 1) as usize;
(*_9) = _51.1.fld4.0;
_51.1.fld4.2 = _40.1.fld4.2;
_54.0 = core::ptr::addr_of_mut!(place!(Field::<f32>(Variant(_40.0.fld6.1, 1), 1)));
_88 = [42497_u16,32305_u16,38274_u16,62132_u16,12880_u16];
place!(Field::<char>(Variant(_21.fld7, 0), 1)) = _50;
_5 = _21.fld2 & Field::<isize>(Variant(_32.1, 3), 2);
_51.0.fld7 = Adt18::Variant0 { fld0: _40.1.fld3,fld1: _4,fld2: _5 };
Goto(bb52)
}
bb52 = {
Call(_90 = dump_var(Move(_53), Move(_82), Move(_46), Move(_36)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_90 = dump_var(Move(_18), Move(_55), Move(_20), Move(_25)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Call(_90 = dump_var(Move(_47), Move(_52), Move(_14), Move(_45)), ReturnTo(bb55), UnwindUnreachable())
}
bb55 = {
Call(_90 = dump_var(Move(_38), Move(_72), Move(_19), Move(_6)), ReturnTo(bb56), UnwindUnreachable())
}
bb56 = {
Call(_90 = dump_var(Move(_29), Move(_76), _91, _91), ReturnTo(bb57), UnwindUnreachable())
}
bb57 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn9(mut _1: [i32; 4],mut _2: [i32; 4]) -> f64 {
mir! {
type RET = f64;
let _3: u32;
let _4: i32;
let _5: &'static [i32; 4];
let _6: isize;
let _7: Adt58;
let _8: ((*const u128, char),);
let _9: f64;
let _10: &'static mut [i128; 7];
let _11: &'static *mut [i128; 7];
let _12: *mut u128;
let _13: u16;
let _14: &'static mut f64;
let _15: [usize; 1];
let _16: usize;
let _17: char;
let _18: &'static *mut [i128; 7];
let _19: &'static mut isize;
let _20: i64;
let _21: f32;
let _22: bool;
let _23: f64;
let _24: isize;
let _25: (&'static *const u128, (f64, i128, Adt18), [i32; 4], i128);
let _26: f64;
let _27: i128;
let _28: char;
let _29: [bool; 8];
let _30: &'static bool;
let _31: &'static *mut [i128; 7];
let _32: char;
let _33: usize;
let _34: f64;
let _35: isize;
let _36: &'static [usize; 1];
let _37: char;
let _38: &'static *const u128;
let _39: *const u128;
let _40: u64;
let _41: &'static mut Adt37;
let _42: (u16, bool, i128);
let _43: u64;
let _44: char;
let _45: &'static mut u128;
let _46: (Adt69, Adt56, Adt58);
let _47: (f64, i128, Adt18);
let _48: *mut [usize; 1];
let _49: i128;
let _50: *mut u128;
let _51: &'static *mut [i128; 7];
let _52: &'static *mut f32;
let _53: &'static *mut [i128; 7];
let _54: &'static (Adt58, u128);
let _55: f64;
let _56: f32;
let _57: &'static [usize; 1];
let _58: isize;
let _59: &'static [usize; 1];
let _60: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _61: *const u128;
let _62: bool;
let _63: &'static *const u128;
let _64: (&'static *const u128, (f64, i128, Adt18), [i32; 4], i128);
let _65: &'static mut Adt37;
let _66: (&'static *const u128, (f64, i128, Adt18), [i32; 4], i128);
let _67: (u32, &'static bool, u128, [i64; 8]);
let _68: u128;
let _69: char;
let _70: f64;
let _71: *const u128;
let _72: &'static i32;
let _73: &'static *const u128;
let _74: f32;
let _75: &'static [usize; 1];
let _76: [i128; 7];
let _77: isize;
let _78: *mut u128;
let _79: f64;
let _80: char;
let _81: &'static bool;
let _82: char;
let _83: i64;
let _84: [i32; 4];
let _85: *mut u128;
let _86: *mut [usize; 1];
let _87: i64;
let _88: &'static [i32; 4];
let _89: ();
let _90: ();
{
_2 = _1;
_1 = _2;
RET = 166499705994171522272548756908487228154_i128 as f64;
_2 = [(-588085299_i32),(-1004976280_i32),(-1019133395_i32),1673396177_i32];
RET = (-84_i8) as f64;
_1 = _2;
_2 = [367445404_i32,698001114_i32,1770147009_i32,(-603394251_i32)];
_2 = _1;
RET = 105_u8 as f64;
_2 = [1283747273_i32,957025374_i32,(-254192134_i32),(-2063146623_i32)];
_1 = [1724879542_i32,463998518_i32,(-979310281_i32),(-1378579440_i32)];
_2 = [(-1444521134_i32),1344251146_i32,712966184_i32,44131091_i32];
RET = (-8811877635891627335_i64) as f64;
_2 = [91403253_i32,1016566905_i32,(-1044025829_i32),1364047145_i32];
Goto(bb1)
}
bb1 = {
RET = 14521432391402797585_usize as f64;
_2 = _1;
_2 = _1;
RET = 132667291464056031809171777205957693446_u128 as f64;
_1 = _2;
_1 = _2;
_1 = [1541654911_i32,(-875784410_i32),1844078293_i32,(-1306161163_i32)];
_1 = [(-1757962006_i32),(-809588363_i32),1542735225_i32,227599478_i32];
RET = 1_usize as f64;
RET = (-9223372036854775808_isize) as f64;
_3 = !3176877647_u32;
_3 = 2096172771_u32 - 507364385_u32;
_1 = _2;
_5 = &_2;
_1 = [2030519331_i32,1860227454_i32,(-1938094469_i32),1851824476_i32];
RET = (-7885_i16) as f64;
_5 = &_1;
_1 = [1031261999_i32,1743285164_i32,(-89042097_i32),1579940300_i32];
_3 = 11360593175128772048_u64 as u32;
_1 = [(-446000489_i32),(-832802249_i32),(-2046476719_i32),(-1096323436_i32)];
_5 = &_2;
_4 = (-140592294_i32) - (-749408454_i32);
_5 = &_1;
Goto(bb2)
}
bb2 = {
RET = _3 as f64;
_5 = &_2;
_2 = [_4,_4,_4,_4];
_4 = (-552771702_i32) + 1158144247_i32;
RET = (-18259671490094046193209625614965831508_i128) as f64;
Goto(bb3)
}
bb3 = {
_2 = [_4,_4,_4,_4];
_5 = &_1;
RET = 77_i8 as f64;
_5 = &_2;
_6 = -(-9223372036854775808_isize);
_3 = 3941180833_u32 ^ 2140370113_u32;
_2 = [_4,_4,_4,_4];
_8.0.1 = '\u{ff2e2}';
_1 = [_4,_4,_4,_4];
_5 = &_1;
_5 = &_2;
_3 = 3425252199_u32 + 2113858486_u32;
_6 = 18_isize << _4;
RET = 172_u8 as f64;
_2 = [_4,_4,_4,_4];
_8.0.1 = '\u{ee605}';
_9 = -RET;
_5 = &_1;
_1 = [_4,_4,_4,_4];
RET = _9 + _9;
_8.0.1 = '\u{fd866}';
_6 = 72_isize << _4;
Goto(bb4)
}
bb4 = {
_3 = 4062543144_u32;
_8.0.1 = '\u{51e10}';
_1 = [_4,_4,_4,_4];
_5 = &_2;
_3 = 4241968418_u32;
_8.0.1 = '\u{dd5e9}';
_2 = [_4,_4,_4,_4];
RET = _9;
_2 = [_4,_4,_4,_4];
_9 = RET * RET;
_4 = (-136448496_i32) | 724751583_i32;
_2 = [_4,_4,_4,_4];
_1 = [_4,_4,_4,_4];
_8.0.1 = '\u{54ab0}';
match _3 {
0 => bb5,
1 => bb6,
2 => bb7,
3 => bb8,
4 => bb9,
4241968418 => bb11,
_ => bb10
}
}
bb5 = {
_2 = [_4,_4,_4,_4];
_5 = &_1;
RET = 77_i8 as f64;
_5 = &_2;
_6 = -(-9223372036854775808_isize);
_3 = 3941180833_u32 ^ 2140370113_u32;
_2 = [_4,_4,_4,_4];
_8.0.1 = '\u{ff2e2}';
_1 = [_4,_4,_4,_4];
_5 = &_1;
_5 = &_2;
_3 = 3425252199_u32 + 2113858486_u32;
_6 = 18_isize << _4;
RET = 172_u8 as f64;
_2 = [_4,_4,_4,_4];
_8.0.1 = '\u{ee605}';
_9 = -RET;
_5 = &_1;
_1 = [_4,_4,_4,_4];
RET = _9 + _9;
_8.0.1 = '\u{fd866}';
_6 = 72_isize << _4;
Goto(bb4)
}
bb6 = {
RET = _3 as f64;
_5 = &_2;
_2 = [_4,_4,_4,_4];
_4 = (-552771702_i32) + 1158144247_i32;
RET = (-18259671490094046193209625614965831508_i128) as f64;
Goto(bb3)
}
bb7 = {
RET = 14521432391402797585_usize as f64;
_2 = _1;
_2 = _1;
RET = 132667291464056031809171777205957693446_u128 as f64;
_1 = _2;
_1 = _2;
_1 = [1541654911_i32,(-875784410_i32),1844078293_i32,(-1306161163_i32)];
_1 = [(-1757962006_i32),(-809588363_i32),1542735225_i32,227599478_i32];
RET = 1_usize as f64;
RET = (-9223372036854775808_isize) as f64;
_3 = !3176877647_u32;
_3 = 2096172771_u32 - 507364385_u32;
_1 = _2;
_5 = &_2;
_1 = [2030519331_i32,1860227454_i32,(-1938094469_i32),1851824476_i32];
RET = (-7885_i16) as f64;
_5 = &_1;
_1 = [1031261999_i32,1743285164_i32,(-89042097_i32),1579940300_i32];
_3 = 11360593175128772048_u64 as u32;
_1 = [(-446000489_i32),(-832802249_i32),(-2046476719_i32),(-1096323436_i32)];
_5 = &_2;
_4 = (-140592294_i32) - (-749408454_i32);
_5 = &_1;
Goto(bb2)
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
_8.0.1 = '\u{185ed}';
_6 = (-9223372036854775808_isize) << _4;
_4 = -1640119463_i32;
_4 = 1334527981_i32 ^ (-138901076_i32);
_13 = 29276_u16 * 4647_u16;
_6 = (-16_isize) ^ (-38_isize);
_3 = 3315136367_u32 - 4130241831_u32;
_9 = RET * RET;
_5 = &_1;
_6 = (-12998_i16) as isize;
_1 = [_4,_4,_4,_4];
_14 = &mut _9;
(*_14) = _13 as f64;
(*_14) = RET;
_2 = _1;
(*_14) = RET;
(*_14) = -RET;
(*_14) = RET;
(*_14) = RET - RET;
(*_14) = RET + RET;
(*_14) = RET + RET;
RET = (*_14) - (*_14);
(*_14) = RET;
Call((*_14) = fn10(Move(_5), _13, _3, _6, RET, _8.0.1, _6, _1, RET, _6, _2, _6), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
(*_14) = RET * RET;
_3 = 287483441_u32 - 3893749636_u32;
(*_14) = RET;
(*_14) = RET + RET;
(*_14) = RET * RET;
(*_14) = -RET;
(*_14) = 65570460975842565373875925020036029260_i128 as f64;
_8.0.1 = '\u{a80da}';
(*_14) = _3 as f64;
(*_14) = -RET;
_16 = 22750_i16 as usize;
_8.0.1 = '\u{fc26f}';
(*_14) = -RET;
(*_14) = RET - RET;
_15 = [_16];
(*_14) = (-34_i8) as f64;
(*_14) = _13 as f64;
(*_14) = RET;
_6 = (-27_isize);
(*_14) = RET - RET;
(*_14) = RET - RET;
_17 = _8.0.1;
(*_14) = RET + RET;
_3 = 1042717532_u32 - 4078246718_u32;
(*_14) = _6 as f64;
(*_14) = -RET;
match _6 {
0 => bb1,
1 => bb10,
2 => bb3,
3 => bb11,
4 => bb9,
5 => bb6,
340282366920938463463374607431768211429 => bb13,
_ => bb7
}
}
bb13 = {
_8.0.1 = _17;
(*_14) = RET * RET;
_8.0.1 = _17;
_3 = 3782433741_u32 << _4;
_16 = 5144762905315149087_usize + 2980625136862964888_usize;
(*_14) = RET;
(*_14) = 68_i8 as f64;
_2 = [_4,_4,_4,_4];
(*_14) = RET - RET;
_6 = 4871047680074506257_i64 as isize;
(*_14) = -RET;
_8.0.1 = _17;
_19 = &mut _6;
(*_19) = 82_i8 as isize;
(*_19) = 118_isize - (-19_isize);
(*_19) = 9223372036854775807_isize;
(*_19) = 247096425281364299308101576390229715637_u128 as isize;
(*_19) = 611437001826418643_u64 as isize;
(*_14) = RET;
(*_19) = _13 as isize;
Goto(bb14)
}
bb14 = {
(*_14) = _13 as f64;
(*_14) = -RET;
_16 = 3335525704681098720_usize << (*_19);
_24 = !(*_19);
_21 = (*_19) as f32;
_3 = 4021967547_u32 | 1914915901_u32;
(*_14) = RET * RET;
_5 = &_1;
(*_19) = 7712353335214681612_i64 as isize;
(*_14) = -RET;
_23 = -(*_14);
Call((*_19) = fn11(Move(_5), (*_14)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
(*_19) = _24;
(*_14) = _23;
_25.3 = _3 as i128;
(*_19) = _4 as isize;
_15 = [_16];
(*_19) = _24 << _16;
_25.1.1 = _25.3;
(*_14) = _4 as f64;
(*_19) = -_24;
_4 = _21 as i32;
(*_19) = _24 | _24;
_25.1.0 = (-53_i8) as f64;
(*_14) = RET;
(*_14) = 78_i8 as f64;
(*_14) = _23;
_26 = (*_14);
(*_19) = _24 << _24;
_20 = (-6543344029306020863_i64);
_13 = 8499_u16 ^ 12896_u16;
_25.2 = [_4,_4,_4,_4];
(*_14) = _16 as f64;
(*_19) = -_24;
_25.1.2 = Adt18::Variant0 { fld0: (-64_i8),fld1: _8.0.1,fld2: (*_19) };
(*_14) = _26;
_22 = (*_14) >= (*_14);
Call((*_14) = fn13(Move(_19)), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
(*_14) = _26 - RET;
place!(Field::<isize>(Variant(_25.1.2, 0), 2)) = _21 as isize;
_16 = 14481434423028966633_usize;
(*_14) = 17_i8 as f64;
_3 = 2153123656_u32 + 3970906105_u32;
(*_14) = RET - RET;
(*_14) = -RET;
_30 = &_22;
_19 = &mut _24;
(*_14) = _23;
match _16 {
0 => bb1,
1 => bb8,
2 => bb12,
3 => bb9,
4 => bb5,
14481434423028966633 => bb17,
_ => bb10
}
}
bb17 = {
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) ^ Field::<isize>(Variant(_25.1.2, 0), 2);
_2 = _25.2;
(*_14) = RET * RET;
_8.0.1 = _17;
(*_14) = RET * RET;
(*_14) = -_26;
(*_14) = RET;
_5 = &_1;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) - Field::<isize>(Variant(_25.1.2, 0), 2);
(*_14) = _20 as f64;
(*_14) = RET - RET;
_35 = !(*_19);
_33 = !_16;
match _16 {
14481434423028966633 => bb18,
_ => bb15
}
}
bb18 = {
_27 = _25.3 & _25.1.1;
_25.3 = -_25.1.1;
(*_14) = _23 + _26;
_22 = (*_14) < (*_14);
_34 = 9904037437795856993_u64 as f64;
(*_19) = _35 - _35;
Goto(bb19)
}
bb19 = {
(*_14) = _25.1.0;
_20 = 8803954305136953129_i64 >> (*_19);
Goto(bb20)
}
bb20 = {
_25.2 = [_4,_4,_4,_4];
(*_14) = _26 - _26;
_23 = -(*_14);
(*_14) = RET + _23;
_19 = &mut _35;
_36 = &_15;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2);
(*_14) = _25.1.0 + _23;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) & Field::<isize>(Variant(_25.1.2, 0), 2);
_28 = _8.0.1;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) >> Field::<isize>(Variant(_25.1.2, 0), 2);
(*_19) = 3867476553340781133_u64 as isize;
_26 = (*_14);
(*_14) = (*_19) as f64;
Goto(bb21)
}
bb21 = {
(*_14) = (-10719_i16) as f64;
_37 = _8.0.1;
_40 = 10815781785249456382_u64 & 3177908035122214050_u64;
(*_14) = _26 * _26;
place!(Field::<i8>(Variant(_25.1.2, 0), 0)) = -40_i8;
Goto(bb22)
}
bb22 = {
_19 = &mut place!(Field::<isize>(Variant(_25.1.2, 0), 2));
(*_19) = _16 as isize;
_2 = [_4,_4,_4,_4];
_16 = !_33;
_8.0.1 = _17;
_21 = 10858_i16 as f32;
(*_14) = _40 as f64;
_42.1 = _22;
_29 = [_42.1,_22,_22,_42.1,_22,_42.1,_22,_42.1];
(*_14) = _23 - _23;
_27 = -37523516468485729502736942961300287480_i128;
Goto(bb23)
}
bb23 = {
_42.0 = _13 >> _20;
_21 = (-11797_i16) as f32;
_21 = (*_19) as f32;
(*_19) = (-75_isize) >> _33;
(*_14) = _23 * RET;
_42 = (_13, _22, _27);
(*_14) = -_26;
_46.1.fld3 = !94_i8;
_42.2 = -_27;
(*_19) = (-9223372036854775808_isize) * (-9223372036854775808_isize);
_8.0.1 = _28;
_46.1.fld5 = _27 * _27;
_46.1.fld3 = (-74_i8);
_42.2 = _46.1.fld5 >> (*_19);
(*_14) = _23 + _34;
(*_19) = !25_isize;
(*_14) = _23 * RET;
(*_14) = RET - RET;
Goto(bb24)
}
bb24 = {
_46.0.fld7 = Adt18::Variant0 { fld0: _46.1.fld3,fld1: _37,fld2: (*_19) };
_32 = Field::<char>(Variant(_46.0.fld7, 0), 1);
_22 = (*_14) < (*_14);
_46.1.fld4.1 = _42.2 ^ _42.2;
_33 = _16;
_46.1.fld4.0 = (*_14) + (*_14);
(*_14) = _46.1.fld4.0 + _46.1.fld4.0;
_42.0 = _13 << _40;
_15 = [_33];
_46.0.fld6.0 = _8.0.1;
(*_14) = _26 - _46.1.fld4.0;
_46.1.fld2 = [_20,_20,_20,_20,_20,_20,_20,_20];
_46.1.fld1 = _20 << (*_19);
_4 = (-1892914774_i32);
place!(Field::<char>(Variant(_46.0.fld7, 0), 1)) = _32;
(*_14) = -_46.1.fld4.0;
(*_19) = !Field::<isize>(Variant(_46.0.fld7, 0), 2);
_46.0.fld3 = _46.1.fld3 + Field::<i8>(Variant(_46.0.fld7, 0), 0);
(*_19) = Field::<isize>(Variant(_46.0.fld7, 0), 2) << _20;
_46.0.fld3 = Field::<i8>(Variant(_46.0.fld7, 0), 0);
_16 = 73883943646420449607052984018404350466_u128 as usize;
(*_14) = _46.1.fld4.0 + _46.1.fld4.0;
_42.2 = 17337_i16 as i128;
_32 = _37;
_46.0.fld6.0 = _17;
match Field::<i8>(Variant(_46.0.fld7, 0), 0) {
0 => bb21,
340282366920938463463374607431768211382 => bb25,
_ => bb8
}
}
bb25 = {
(*_14) = -_46.1.fld4.0;
_46.0.fld6 = (_32, _46.0.fld7);
_30 = &_42.1;
(*_19) = Field::<isize>(Variant(_46.0.fld6.1, 0), 2) + Field::<isize>(Variant(_46.0.fld7, 0), 2);
(*_14) = _13 as f64;
_5 = &_2;
(*_14) = _46.1.fld4.0;
_46.0.fld3 = Field::<i8>(Variant(_46.0.fld7, 0), 0);
(*_14) = RET + _46.1.fld4.0;
_47.1 = !_46.1.fld5;
_4 = 1269080671_i32 * (-1174009582_i32);
_46.1.fld4.1 = _47.1 << _3;
_46.1.fld4.1 = _47.1;
_44 = _28;
_17 = _44;
(*_14) = (*_19) as f64;
(*_19) = -Field::<isize>(Variant(_46.0.fld6.1, 0), 2);
(*_14) = RET - _34;
_15 = [_16];
_26 = (*_14) * (*_14);
_48 = core::ptr::addr_of_mut!(_15);
Goto(bb26)
}
bb26 = {
(*_19) = Field::<isize>(Variant(_46.0.fld7, 0), 2) + Field::<isize>(Variant(_46.0.fld7, 0), 2);
(*_19) = Field::<isize>(Variant(_46.0.fld6.1, 0), 2);
(*_48) = [_16];
(*_14) = _21 as f64;
_46.1.fld4.1 = !_47.1;
(*_48) = [_16];
(*_19) = -Field::<isize>(Variant(_46.0.fld6.1, 0), 2);
_49 = _46.1.fld5 * _47.1;
(*_48) = [_16];
_48 = core::ptr::addr_of_mut!((*_48));
(*_14) = _26 * _46.1.fld4.0;
_46.0.fld5 = (*_14);
(*_14) = _23;
_37 = _44;
place!(Field::<i8>(Variant(_46.0.fld7, 0), 0)) = Field::<i8>(Variant(_46.0.fld6.1, 0), 0);
_48 = core::ptr::addr_of_mut!((*_48));
(*_14) = _23;
_49 = _46.1.fld5;
(*_19) = Field::<isize>(Variant(_46.0.fld7, 0), 2) & Field::<isize>(Variant(_46.0.fld6.1, 0), 2);
_29 = [(*_30),(*_30),(*_30),(*_30),(*_30),(*_30),(*_30),(*_30)];
_1 = (*_5);
_46.0.fld7 = _46.0.fld6.1;
(*_48) = [_16];
Goto(bb27)
}
bb27 = {
_59 = &(*_48);
_55 = -(*_14);
_46.1.fld4.2 = Adt18::Variant3 { fld0: (*_30),fld1: _37,fld2: (*_19),fld3: (*_14),fld4: _3,fld5: _40,fld6: 237_u8,fld7: _42.2 };
_34 = (*_14) + (*_14);
(*_19) = Field::<isize>(Variant(_46.0.fld7, 0), 2) - Field::<isize>(Variant(_46.1.fld4.2, 3), 2);
(*_14) = _46.0.fld5;
(*_19) = Field::<isize>(Variant(_46.0.fld6.1, 0), 2);
_46.1.fld2 = [_46.1.fld1,_20,_20,_20,_46.1.fld1,_46.1.fld1,_46.1.fld1,_46.1.fld1];
(*_14) = Field::<i8>(Variant(_46.0.fld7, 0), 0) as f64;
_26 = _46.0.fld5;
(*_14) = _55;
match Field::<i8>(Variant(_46.0.fld6.1, 0), 0) {
0 => bb28,
1 => bb29,
2 => bb30,
3 => bb31,
4 => bb32,
5 => bb33,
340282366920938463463374607431768211382 => bb35,
_ => bb34
}
}
bb28 = {
(*_14) = _25.1.0;
_20 = 8803954305136953129_i64 >> (*_19);
Goto(bb20)
}
bb29 = {
Return()
}
bb30 = {
_27 = _25.3 & _25.1.1;
_25.3 = -_25.1.1;
(*_14) = _23 + _26;
_22 = (*_14) < (*_14);
_34 = 9904037437795856993_u64 as f64;
(*_19) = _35 - _35;
Goto(bb19)
}
bb31 = {
_8.0.1 = _17;
(*_14) = RET * RET;
_8.0.1 = _17;
_3 = 3782433741_u32 << _4;
_16 = 5144762905315149087_usize + 2980625136862964888_usize;
(*_14) = RET;
(*_14) = 68_i8 as f64;
_2 = [_4,_4,_4,_4];
(*_14) = RET - RET;
_6 = 4871047680074506257_i64 as isize;
(*_14) = -RET;
_8.0.1 = _17;
_19 = &mut _6;
(*_19) = 82_i8 as isize;
(*_19) = 118_isize - (-19_isize);
(*_19) = 9223372036854775807_isize;
(*_19) = 247096425281364299308101576390229715637_u128 as isize;
(*_19) = 611437001826418643_u64 as isize;
(*_14) = RET;
(*_19) = _13 as isize;
Goto(bb14)
}
bb32 = {
RET = _3 as f64;
_5 = &_2;
_2 = [_4,_4,_4,_4];
_4 = (-552771702_i32) + 1158144247_i32;
RET = (-18259671490094046193209625614965831508_i128) as f64;
Goto(bb3)
}
bb33 = {
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) ^ Field::<isize>(Variant(_25.1.2, 0), 2);
_2 = _25.2;
(*_14) = RET * RET;
_8.0.1 = _17;
(*_14) = RET * RET;
(*_14) = -_26;
(*_14) = RET;
_5 = &_1;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) - Field::<isize>(Variant(_25.1.2, 0), 2);
(*_14) = _20 as f64;
(*_14) = RET - RET;
_35 = !(*_19);
_33 = !_16;
match _16 {
14481434423028966633 => bb18,
_ => bb15
}
}
bb34 = {
_25.2 = [_4,_4,_4,_4];
(*_14) = _26 - _26;
_23 = -(*_14);
(*_14) = RET + _23;
_19 = &mut _35;
_36 = &_15;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2);
(*_14) = _25.1.0 + _23;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) & Field::<isize>(Variant(_25.1.2, 0), 2);
_28 = _8.0.1;
(*_19) = Field::<isize>(Variant(_25.1.2, 0), 2) >> Field::<isize>(Variant(_25.1.2, 0), 2);
(*_19) = 3867476553340781133_u64 as isize;
_26 = (*_14);
(*_14) = (*_19) as f64;
Goto(bb21)
}
bb35 = {
(*_14) = _55 - _26;
place!(Field::<char>(Variant(_46.1.fld4.2, 3), 1)) = _28;
_5 = &_1;
(*_19) = Field::<isize>(Variant(_46.0.fld7, 0), 2) ^ Field::<isize>(Variant(_46.1.fld4.2, 3), 2);
(*_14) = _21 as f64;
(*_14) = _26 + _26;
(*_14) = _26;
(*_48) = [_16];
match Field::<i8>(Variant(_46.0.fld6.1, 0), 0) {
0 => bb3,
340282366920938463463374607431768211382 => bb37,
_ => bb36
}
}
bb36 = {
(*_14) = _13 as f64;
(*_14) = -RET;
_16 = 3335525704681098720_usize << (*_19);
_24 = !(*_19);
_21 = (*_19) as f32;
_3 = 4021967547_u32 | 1914915901_u32;
(*_14) = RET * RET;
_5 = &_1;
(*_19) = 7712353335214681612_i64 as isize;
(*_14) = -RET;
_23 = -(*_14);
Call((*_19) = fn11(Move(_5), (*_14)), ReturnTo(bb15), UnwindUnreachable())
}
bb37 = {
(*_48) = [_33];
_47.1 = _49 + _46.1.fld4.1;
_44 = _28;
(*_14) = _49 as f64;
_47 = ((*_14), _46.1.fld5, _46.0.fld6.1);
_8.0.1 = Field::<char>(Variant(_46.0.fld7, 0), 1);
(*_19) = Field::<isize>(Variant(_46.0.fld6.1, 0), 2) & Field::<isize>(Variant(_46.0.fld6.1, 0), 2);
_55 = (*_14);
_58 = (*_19);
(*_48) = [_33];
(*_19) = _58;
place!(Field::<u8>(Variant(_46.1.fld4.2, 3), 6)) = 151_u8 | 155_u8;
_64.1.2 = _46.1.fld4.2;
(*_48) = [_16];
match Field::<i8>(Variant(_47.2, 0), 0) {
340282366920938463463374607431768211382 => bb38,
_ => bb34
}
}
bb38 = {
(*_48) = [_16];
(*_14) = -_23;
(*_19) = Field::<i8>(Variant(_46.0.fld6.1, 0), 0) as isize;
_46.1.fld2 = [_46.1.fld1,_20,_20,_20,_46.1.fld1,_46.1.fld1,_46.1.fld1,_20];
place!(Field::<char>(Variant(_46.0.fld6.1, 0), 1)) = _37;
_47 = _46.1.fld4;
(*_48) = [_16];
(*_19) = !Field::<isize>(Variant(_47.2, 3), 2);
_67.2 = 17798382860756241602357072808120987445_u128 ^ 227476130952350570166974015373817972071_u128;
_47.0 = _26 - _26;
(*_19) = Field::<isize>(Variant(_64.1.2, 3), 2) >> Field::<isize>(Variant(_46.0.fld7, 0), 2);
place!(Field::<u32>(Variant(_47.2, 3), 4)) = Field::<u32>(Variant(_64.1.2, 3), 4);
(*_19) = !Field::<isize>(Variant(_46.1.fld4.2, 3), 2);
place!(Field::<bool>(Variant(_64.1.2, 3), 0)) = (*_30);
(*_19) = _58 - Field::<isize>(Variant(_64.1.2, 3), 2);
(*_19) = Field::<isize>(Variant(_46.0.fld6.1, 0), 2);
(*_48) = [_33];
place!(Field::<u8>(Variant(_46.1.fld4.2, 3), 6)) = Field::<u8>(Variant(_64.1.2, 3), 6) & Field::<u8>(Variant(_47.2, 3), 6);
place!(Field::<u8>(Variant(_64.1.2, 3), 6)) = Field::<u8>(Variant(_46.1.fld4.2, 3), 6) ^ Field::<u8>(Variant(_47.2, 3), 6);
_64.3 = Field::<u8>(Variant(_46.1.fld4.2, 3), 6) as i128;
_20 = -_46.1.fld1;
place!(Field::<isize>(Variant(_46.0.fld6.1, 0), 2)) = (*_19) + Field::<isize>(Variant(_47.2, 3), 2);
(*_14) = Field::<f64>(Variant(_47.2, 3), 3);
Call(_16 = core::intrinsics::bswap(_33), ReturnTo(bb39), UnwindUnreachable())
}
bb39 = {
_64.1.1 = _47.1 ^ _64.3;
_57 = &(*_48);
(*_48) = [_33];
match Field::<i8>(Variant(_46.0.fld6.1, 0), 0) {
0 => bb20,
1 => bb38,
2 => bb29,
3 => bb6,
4 => bb11,
340282366920938463463374607431768211382 => bb41,
_ => bb40
}
}
bb40 = {
RET = _3 as f64;
_5 = &_2;
_2 = [_4,_4,_4,_4];
_4 = (-552771702_i32) + 1158144247_i32;
RET = (-18259671490094046193209625614965831508_i128) as f64;
Goto(bb3)
}
bb41 = {
(*_14) = _26 * _26;
place!(Field::<isize>(Variant(_46.0.fld6.1, 0), 2)) = !(*_19);
(*_48) = [_16];
_20 = -_46.1.fld1;
(*_48) = [_33];
_16 = _33 + _33;
_66.1.1 = _64.3;
_42.0 = !_13;
(*_19) = Field::<isize>(Variant(_64.1.2, 3), 2);
_47.1 = _66.1.1 & _27;
(*_19) = !Field::<isize>(Variant(_64.1.2, 3), 2);
_66.1.2 = _64.1.2;
_16 = (-12973_i16) as usize;
place!(Field::<f64>(Variant(_64.1.2, 3), 3)) = Field::<u32>(Variant(_64.1.2, 3), 4) as f64;
place!(Field::<u32>(Variant(_47.2, 3), 4)) = !_3;
_66.1.0 = (*_14) * (*_14);
_64.1.1 = Field::<i128>(Variant(_64.1.2, 3), 7);
_71 = core::ptr::addr_of!(_67.2);
_23 = -(*_14);
_68 = !(*_71);
(*_71) = _68;
_46.0.fld0 = (*_14) >= (*_14);
match Field::<i8>(Variant(_46.0.fld6.1, 0), 0) {
0 => bb42,
340282366920938463463374607431768211382 => bb44,
_ => bb43
}
}
bb42 = {
RET = _3 as f64;
_5 = &_2;
_2 = [_4,_4,_4,_4];
_4 = (-552771702_i32) + 1158144247_i32;
RET = (-18259671490094046193209625614965831508_i128) as f64;
Goto(bb3)
}
bb43 = {
RET = _3 as f64;
_5 = &_2;
_2 = [_4,_4,_4,_4];
_4 = (-552771702_i32) + 1158144247_i32;
RET = (-18259671490094046193209625614965831508_i128) as f64;
Goto(bb3)
}
bb44 = {
_46.1.fld4.2 = _66.1.2;
(*_71) = _68 ^ _68;
(*_19) = -_58;
_46.1.fld5 = _47.1 & _64.1.1;
_46.1.fld4.1 = _46.1.fld5 + _64.3;
place!(Field::<isize>(Variant(_46.0.fld6.1, 0), 2)) = Field::<isize>(Variant(_46.1.fld4.2, 3), 2) | (*_19);
_12 = core::ptr::addr_of_mut!((*_71));
(*_71) = _68 - _68;
(*_48) = [_33];
_67.2 = _68;
_72 = &_4;
(*_48) = [_33];
(*_14) = -_47.0;
_55 = (*_19) as f64;
place!(Field::<i128>(Variant(_47.2, 3), 7)) = Field::<char>(Variant(_66.1.2, 3), 1) as i128;
(*_48) = [_16];
_66.1.2 = _46.1.fld4.2;
_67 = (Field::<u32>(Variant(_66.1.2, 3), 4), Move(_30), _68, _46.1.fld2);
Goto(bb45)
}
bb45 = {
_56 = _21 - _21;
_22 = !_46.0.fld0;
_19 = &mut place!(Field::<isize>(Variant(_46.1.fld4.2, 3), 2));
place!(Field::<u32>(Variant(_47.2, 3), 4)) = _13 as u32;
place!(Field::<isize>(Variant(_47.2, 3), 2)) = !(*_19);
_62 = Field::<bool>(Variant(_66.1.2, 3), 0);
(*_71) = _68 ^ _68;
Goto(bb46)
}
bb46 = {
_64.3 = _47.1 - _49;
place!(Field::<i128>(Variant(_64.1.2, 3), 7)) = _49 & Field::<i128>(Variant(_47.2, 3), 7);
(*_19) = Field::<isize>(Variant(_64.1.2, 3), 2) - _58;
(*_48) = [_16];
Goto(bb47)
}
bb47 = {
_42.2 = !_47.1;
(*_71) = Field::<u8>(Variant(_64.1.2, 3), 6) as u128;
(*_48) = [_16];
_63 = &_71;
_64 = (Move(_63), _66.1, (*_5), _47.1);
(*_14) = _42.0 as f64;
(*_48) = [_16];
_84 = (*_5);
place!(Field::<f64>(Variant(_64.1.2, 3), 3)) = _66.1.0 * _66.1.0;
_67.0 = Field::<u32>(Variant(_66.1.2, 3), 4) & _3;
_63 = &_71;
(*_48) = [_33];
_26 = Field::<f64>(Variant(_64.1.2, 3), 3) - _64.1.0;
_42.2 = _47.1 >> Field::<i128>(Variant(_66.1.2, 3), 7);
(*_48) = [_16];
_55 = Field::<f64>(Variant(_64.1.2, 3), 3) - _23;
(*_14) = 17840_i16 as f64;
_28 = _37;
_8.0 = (Move(_71), Field::<char>(Variant(_64.1.2, 3), 1));
_45 = &mut _68;
place!(Field::<u32>(Variant(_64.1.2, 3), 4)) = !_67.0;
(*_14) = _23 * Field::<f64>(Variant(_64.1.2, 3), 3);
Goto(bb48)
}
bb48 = {
(*_45) = _67.2 << (*_72);
_70 = _56 as f64;
_50 = core::ptr::addr_of_mut!((*_45));
(*_14) = _16 as f64;
(*_45) = _67.2 >> Field::<u8>(Variant(_66.1.2, 3), 6);
(*_14) = Field::<u8>(Variant(_64.1.2, 3), 6) as f64;
(*_19) = !_58;
(*_45) = _67.2 - _67.2;
_69 = _37;
_22 = _62 & _62;
_47.0 = _26 + _23;
_37 = _69;
_59 = Move(_57);
Goto(bb49)
}
bb49 = {
(*_45) = _67.2 * _67.2;
Goto(bb50)
}
bb50 = {
Call(_89 = dump_var(Move(_44), Move(_27), Move(_15), Move(_58)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_89 = dump_var(Move(_16), Move(_24), Move(_29), Move(_49)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_89 = dump_var(Move(_62), Move(_17), Move(_20), Move(_69)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_89 = dump_var(Move(_3), Move(_13), _90, _90), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn10(mut _1: &'static [i32; 4],mut _2: u16,mut _3: u32,mut _4: isize,mut _5: f64,mut _6: char,mut _7: isize,mut _8: [i32; 4],mut _9: f64,mut _10: isize,mut _11: [i32; 4],mut _12: isize) -> f64 {
mir! {
type RET = f64;
let _13: *const u128;
let _14: &'static mut u128;
let _15: ();
let _16: ();
{
_6 = '\u{71840}';
_7 = _10 + _10;
_1 = &_8;
_12 = _7 - _7;
_9 = -_5;
_6 = '\u{80403}';
_9 = _5 - _5;
RET = -_9;
_2 = 32154_u16 >> _12;
_1 = &_11;
_9 = RET * RET;
_3 = (-8052712495885691962_i64) as u32;
_12 = _10;
_2 = 7933_u16 | 10410_u16;
_4 = -_12;
_4 = _7;
_2 = 49131_u16;
_12 = _10;
RET = _9 + _9;
_5 = RET * RET;
_3 = !1386243628_u32;
Goto(bb1)
}
bb1 = {
Call(_15 = dump_var(Move(_10), Move(_2), Move(_12), Move(_11)), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn11(mut _1: &'static [i32; 4],mut _2: f64) -> isize {
mir! {
type RET = isize;
let _3: &'static bool;
let _4: (usize, usize);
let _5: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _6: &'static *const u128;
let _7: isize;
let _8: [i16; 6];
let _9: *mut f32;
let _10: usize;
let _11: *const u128;
let _12: Adt69;
let _13: u16;
let _14: char;
let _15: (u16, bool, i128);
let _16: isize;
let _17: bool;
let _18: &'static mut f64;
let _19: *mut [usize; 1];
let _20: [char; 4];
let _21: *const isize;
let _22: u8;
let _23: &'static u64;
let _24: char;
let _25: char;
let _26: &'static [i32; 4];
let _27: u128;
let _28: &'static (Adt58, u128);
let _29: bool;
let _30: f64;
let _31: *const isize;
let _32: *mut [i32; 4];
let _33: &'static mut [isize; 3];
let _34: (u8, &'static mut [isize; 3], i64, f64);
let _35: f32;
let _36: isize;
let _37: bool;
let _38: f32;
let _39: &'static mut (Adt18, [usize; 1]);
let _40: ();
let _41: ();
{
RET = (-9223372036854775808_isize);
_2 = 14_i8 as f64;
match RET {
0 => bb1,
1 => bb2,
2 => bb3,
3 => bb4,
4 => bb5,
5 => bb6,
340282366920938463454151235394913435648 => bb8,
_ => bb7
}
}
bb1 = {
Return()
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
_2 = 1956486859_i32 as f64;
_4.1 = (-21859_i16) as usize;
_4 = (4_usize, 1_usize);
_4.0 = _4.1 * _4.1;
_4.1 = !_4.0;
_4 = (15100033465498590549_usize, 7_usize);
_4.1 = 17356_u16 as usize;
_7 = RET - RET;
RET = _7 << _4.0;
Call(_4.1 = fn12(RET, RET, RET, RET, _7, _7, _7, _7, RET, RET, _4.0, _2), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_4.0 = !_4.1;
_4.1 = !_4.0;
_7 = _4.1 as isize;
Goto(bb10)
}
bb10 = {
_8 = [(-18239_i16),8087_i16,(-15744_i16),5294_i16,(-17953_i16),31825_i16];
_4 = (7_usize, 1_usize);
_4.0 = _4.1 | _4.1;
_10 = _4.0 << _7;
_7 = 5890_i16 as isize;
RET = _7 | _7;
_7 = 36184827407322307319047329650833423250_i128 as isize;
_7 = 21955_i16 as isize;
_4.1 = _10;
_12.fld6.0 = '\u{2a8a0}';
_12.fld2 = RET + RET;
_10 = _4.1 & _4.1;
_12.fld6.1 = Adt18::Variant2 { fld0: 20041_u16,fld1: _12.fld6.0,fld2: 849206473_u32 };
_12.fld0 = !true;
_7 = RET;
Goto(bb11)
}
bb11 = {
_12.fld3 = 12527_u16 as i8;
_3 = &_12.fld0;
Goto(bb12)
}
bb12 = {
_12.fld6.0 = Field::<char>(Variant(_12.fld6.1, 2), 1);
place!(Field::<char>(Variant(_12.fld6.1, 2), 1)) = _12.fld6.0;
_4.1 = !_10;
Call(_10 = core::intrinsics::transmute(RET), ReturnTo(bb13), UnwindUnreachable())
}
bb13 = {
place!(Field::<u32>(Variant(_12.fld6.1, 2), 2)) = 3784108026_u32 << _4.0;
_7 = _12.fld3 as isize;
_12.fld5 = _2;
Goto(bb14)
}
bb14 = {
place!(Field::<char>(Variant(_12.fld6.1, 2), 1)) = _12.fld6.0;
_12.fld7 = Adt18::Variant3 { fld0: (*_3),fld1: _12.fld6.0,fld2: _12.fld2,fld3: _12.fld5,fld4: Field::<u32>(Variant(_12.fld6.1, 2), 2),fld5: 14372387368164695300_u64,fld6: 211_u8,fld7: (-72599661288295385243182640977361691454_i128) };
_7 = -_12.fld2;
_13 = 43114_u16 - 51215_u16;
place!(Field::<u16>(Variant(_12.fld6.1, 2), 0)) = !_13;
_15.2 = -(-162398612360202875252334214437333886307_i128);
_12.fld6.1 = Adt18::Variant3 { fld0: (*_3),fld1: Field::<char>(Variant(_12.fld7, 3), 1),fld2: Field::<isize>(Variant(_12.fld7, 3), 2),fld3: _2,fld4: Field::<u32>(Variant(_12.fld7, 3), 4),fld5: 13637266910401053942_u64,fld6: 131_u8,fld7: _15.2 };
_15 = (_13, (*_3), Field::<i128>(Variant(_12.fld6.1, 3), 7));
place!(Field::<u64>(Variant(_12.fld7, 3), 5)) = 9212017921900050812_u64 >> RET;
place!(Field::<f64>(Variant(_12.fld6.1, 3), 3)) = _2;
_12.fld2 = Field::<u32>(Variant(_12.fld7, 3), 4) as isize;
_12.fld7 = Adt18::Variant2 { fld0: _15.0,fld1: _12.fld6.0,fld2: Field::<u32>(Variant(_12.fld6.1, 3), 4) };
place!(Field::<u32>(Variant(_12.fld6.1, 3), 4)) = Field::<u16>(Variant(_12.fld7, 2), 0) as u32;
_12.fld6.1 = _12.fld7;
_12.fld6.0 = Field::<char>(Variant(_12.fld7, 2), 1);
_15.2 = 149164840917168956907864835502253127416_i128 + 166343676679572832415989058327299756214_i128;
_12.fld6.0 = Field::<char>(Variant(_12.fld6.1, 2), 1);
_14 = Field::<char>(Variant(_12.fld7, 2), 1);
_18 = &mut _12.fld5;
(*_18) = _2 + _2;
_3 = &_15.1;
(*_18) = _2 + _2;
_4.0 = _4.1 * _4.1;
(*_18) = _2 - _2;
Goto(bb15)
}
bb15 = {
(*_18) = _2 - _2;
(*_18) = _2 * _2;
_15 = (_13, false, 89101099337597184985870813150983288332_i128);
(*_18) = 159868059705902039976081684820472549098_u128 as f64;
_8 = [22102_i16,(-1259_i16),(-24754_i16),7656_i16,(-7034_i16),16449_i16];
(*_18) = -_2;
Goto(bb16)
}
bb16 = {
_20 = [_14,_14,_14,_14];
_7 = RET;
(*_18) = _2 + _2;
Goto(bb17)
}
bb17 = {
(*_18) = -_2;
_18 = &mut _2;
_4.0 = !_4.1;
(*_18) = _13 as f64;
(*_18) = 1556222073_u32 as f64;
_10 = _4.0 & _4.0;
_15.2 = (-128859993580193000053047536217754526204_i128);
_21 = core::ptr::addr_of!(RET);
_24 = _14;
_22 = 31_u8 >> _4.1;
(*_18) = 118_i8 as f64;
(*_21) = _7 - _7;
(*_18) = _15.2 as f64;
Goto(bb18)
}
bb18 = {
_16 = -(*_21);
(*_18) = _13 as f64;
(*_21) = _7;
(*_21) = _16 >> _4.1;
(*_18) = _22 as f64;
(*_18) = 3589561462190526820_u64 as f64;
_17 = _15.1 & _15.1;
_30 = (*_18) + (*_18);
(*_21) = 1921204576_i32 as isize;
_25 = _14;
match _15.2 {
0 => bb6,
1 => bb2,
2 => bb19,
3 => bb20,
4 => bb21,
211422373340745463410327071214013685252 => bb23,
_ => bb22
}
}
bb19 = {
_2 = 1956486859_i32 as f64;
_4.1 = (-21859_i16) as usize;
_4 = (4_usize, 1_usize);
_4.0 = _4.1 * _4.1;
_4.1 = !_4.0;
_4 = (15100033465498590549_usize, 7_usize);
_4.1 = 17356_u16 as usize;
_7 = RET - RET;
RET = _7 << _4.0;
Call(_4.1 = fn12(RET, RET, RET, RET, _7, _7, _7, _7, RET, RET, _4.0, _2), ReturnTo(bb9), UnwindUnreachable())
}
bb20 = {
Return()
}
bb21 = {
(*_18) = _2 - _2;
(*_18) = _2 * _2;
_15 = (_13, false, 89101099337597184985870813150983288332_i128);
(*_18) = 159868059705902039976081684820472549098_u128 as f64;
_8 = [22102_i16,(-1259_i16),(-24754_i16),7656_i16,(-7034_i16),16449_i16];
(*_18) = -_2;
Goto(bb16)
}
bb22 = {
_8 = [(-18239_i16),8087_i16,(-15744_i16),5294_i16,(-17953_i16),31825_i16];
_4 = (7_usize, 1_usize);
_4.0 = _4.1 | _4.1;
_10 = _4.0 << _7;
_7 = 5890_i16 as isize;
RET = _7 | _7;
_7 = 36184827407322307319047329650833423250_i128 as isize;
_7 = 21955_i16 as isize;
_4.1 = _10;
_12.fld6.0 = '\u{2a8a0}';
_12.fld2 = RET + RET;
_10 = _4.1 & _4.1;
_12.fld6.1 = Adt18::Variant2 { fld0: 20041_u16,fld1: _12.fld6.0,fld2: 849206473_u32 };
_12.fld0 = !true;
_7 = RET;
Goto(bb11)
}
bb23 = {
(*_21) = _16;
(*_18) = _15.2 as f64;
(*_21) = _16;
_20 = [_24,_25,_24,_24];
(*_18) = (*_21) as f64;
(*_18) = _30 * _30;
_8 = [25971_i16,(-11947_i16),18225_i16,2495_i16,(-6464_i16),(-16573_i16)];
_16 = _15.2 as isize;
_17 = RET <= (*_21);
_27 = 70556235363828208482002134379833713206_u128 * 175333191921144819401616066412476073844_u128;
RET = _16;
(*_18) = _30 * _30;
(*_18) = _30;
_4.0 = _4.1 * _10;
(*_21) = _16 << _10;
RET = _16 ^ _7;
(*_21) = -_7;
_15.1 = _17;
(*_21) = -_7;
Goto(bb24)
}
bb24 = {
_7 = _4.0 as isize;
(*_21) = _22 as isize;
(*_21) = (-2008382007_i32) as isize;
_8 = [13842_i16,4777_i16,3337_i16,20688_i16,18557_i16,(-7792_i16)];
_20 = [_24,_24,_25,_25];
(*_21) = _7 + _7;
_3 = &_17;
RET = _7 ^ _7;
(*_18) = _22 as f64;
_7 = !(*_21);
Goto(bb25)
}
bb25 = {
Call(_40 = dump_var(Move(_24), Move(_20), Move(_10), Move(_17)), ReturnTo(bb26), UnwindUnreachable())
}
bb26 = {
Call(_40 = dump_var(Move(_25), Move(_22), Move(_13), _41), ReturnTo(bb27), UnwindUnreachable())
}
bb27 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn12(mut _1: isize,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: isize,mut _10: isize,mut _11: usize,mut _12: f64) -> usize {
mir! {
type RET = usize;
let _13: (Adt18, [usize; 1]);
let _14: i8;
let _15: u128;
let _16: isize;
let _17: f64;
let _18: [isize; 3];
let _19: bool;
let _20: [isize; 3];
let _21: (u16, bool, i128);
let _22: i128;
let _23: ();
let _24: ();
{
_4 = _1 | _9;
_3 = _10 + _9;
_12 = 118_u8 as f64;
_12 = (-43455690948049819050044101534585422955_i128) as f64;
_13.1 = [_11];
_13.1 = [_11];
_12 = 14404429627666333062_u64 as f64;
_12 = 81_u8 as f64;
_4 = -_7;
_15 = 28948_u16 as u128;
_15 = !54134375228310823830707285004523276015_u128;
_12 = 1106_u16 as f64;
_6 = _5 - _10;
_6 = -_2;
_3 = _7 ^ _4;
_4 = _6 ^ _2;
Goto(bb1)
}
bb1 = {
_14 = !50_i8;
_11 = true as usize;
_13.0 = Adt18::Variant2 { fld0: 11147_u16,fld1: '\u{fd49}',fld2: 2185936553_u32 };
_4 = _1 - _9;
place!(Field::<char>(Variant(_13.0, 2), 1)) = '\u{da9a5}';
place!(Field::<u32>(Variant(_13.0, 2), 2)) = _14 as u32;
_3 = _7 + _2;
_12 = 11922891171470092093_u64 as f64;
_6 = _4 & _5;
_9 = _3;
_13.0 = Adt18::Variant3 { fld0: true,fld1: '\u{1ccb7}',fld2: _1,fld3: _12,fld4: 2075169841_u32,fld5: 6898315169391448251_u64,fld6: 127_u8,fld7: (-89575231577246719427926674690423409584_i128) };
_9 = Field::<isize>(Variant(_13.0, 3), 2) * _6;
_9 = Field::<isize>(Variant(_13.0, 3), 2) >> _1;
place!(Field::<u64>(Variant(_13.0, 3), 5)) = 14089125196484306905_u64;
RET = _11;
place!(Field::<isize>(Variant(_13.0, 3), 2)) = _4 << _8;
match Field::<u64>(Variant(_13.0, 3), 5) {
14089125196484306905 => bb3,
_ => bb2
}
}
bb2 = {
Return()
}
bb3 = {
RET = _11;
_1 = _6;
Goto(bb4)
}
bb4 = {
place!(Field::<u8>(Variant(_13.0, 3), 6)) = 146_u8;
_8 = _4;
place!(Field::<bool>(Variant(_13.0, 3), 0)) = _1 == _4;
_11 = !RET;
_2 = -_6;
_15 = 121461991032832647432968051703625751963_u128 >> Field::<isize>(Variant(_13.0, 3), 2);
_1 = -_2;
_2 = _3 ^ Field::<isize>(Variant(_13.0, 3), 2);
_8 = _3 >> _15;
_19 = _2 < _8;
_21.0 = 20605_u16;
_13.1 = [_11];
_21.1 = Field::<bool>(Variant(_13.0, 3), 0) == _19;
_1 = _8;
_2 = _7 ^ _1;
Goto(bb5)
}
bb5 = {
_13.0 = Adt18::Variant0 { fld0: _14,fld1: '\u{8a633}',fld2: _8 };
_20 = [Field::<isize>(Variant(_13.0, 0), 2),_2,_8];
_5 = _2;
_19 = _1 != Field::<isize>(Variant(_13.0, 0), 2);
_20 = [_2,_5,Field::<isize>(Variant(_13.0, 0), 2)];
_5 = _2 - _8;
_17 = -_12;
_21.2 = 1919845298806581348_u64 as i128;
_4 = !_5;
_11 = RET << _6;
_15 = 283077196773656861666949879077588192702_u128;
_16 = _5 << _2;
_4 = !_6;
RET = _11 * _11;
_15 = 160891146123105108698705788591899008279_u128 ^ 138930189629195951356560125077996198960_u128;
Goto(bb6)
}
bb6 = {
Call(_23 = dump_var(Move(_20), Move(_4), Move(_21), Move(_8)), ReturnTo(bb7), UnwindUnreachable())
}
bb7 = {
Call(_23 = dump_var(Move(_19), Move(_16), Move(_15), Move(_7)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn13(mut _1: &'static mut isize) -> f64 {
mir! {
type RET = f64;
let _2: *mut [usize; 1];
let _3: Adt41;
let _4: *const u128;
let _5: Adt18;
let _6: (&'static *const u128, (f64, i128, Adt18), [i32; 4], i128);
let _7: Adt58;
let _8: &'static mut [isize; 3];
let _9: f64;
let _10: f32;
let _11: char;
let _12: i128;
let _13: &'static mut [isize; 3];
let _14: isize;
let _15: &'static mut f64;
let _16: *mut [usize; 1];
let _17: &'static i32;
let _18: &'static u64;
let _19: i8;
let _20: i32;
let _21: bool;
let _22: [bool; 3];
let _23: *mut u128;
let _24: usize;
let _25: ((*const u128, char),);
let _26: isize;
let _27: *mut u128;
let _28: char;
let _29: char;
let _30: i64;
let _31: &'static [i32; 4];
let _32: u32;
let _33: isize;
let _34: [char; 1];
let _35: &'static *const u128;
let _36: u64;
let _37: isize;
let _38: &'static mut [isize; 3];
let _39: i8;
let _40: *mut [i128; 7];
let _41: ([u64; 6], [char; 2], i16, *mut u128);
let _42: (*const u128, char);
let _43: u32;
let _44: char;
let _45: &'static mut Adt37;
let _46: f32;
let _47: char;
let _48: i16;
let _49: [usize; 1];
let _50: &'static mut [i128; 7];
let _51: u8;
let _52: [i64; 6];
let _53: u8;
let _54: isize;
let _55: ((*const u128, char),);
let _56: u128;
let _57: &'static u64;
let _58: &'static u64;
let _59: &'static i32;
let _60: u64;
let _61: (u32, &'static bool, u128, [i64; 8]);
let _62: &'static *const u128;
let _63: f32;
let _64: u32;
let _65: isize;
let _66: Adt37;
let _67: *const u128;
let _68: *const isize;
let _69: isize;
let _70: i32;
let _71: (i8, u32, [usize; 1], Adt47);
let _72: f32;
let _73: &'static bool;
let _74: Adt18;
let _75: *mut f32;
let _76: Adt41;
let _77: &'static u64;
let _78: &'static [i32; 4];
let _79: &'static mut isize;
let _80: Adt56;
let _81: isize;
let _82: Adt18;
let _83: f32;
let _84: char;
let _85: &'static *mut f32;
let _86: f64;
let _87: &'static mut (u8, &'static mut [isize; 3], i64, f64);
let _88: &'static mut f64;
let _89: &'static bool;
let _90: &'static mut isize;
let _91: i64;
let _92: &'static bool;
let _93: char;
let _94: isize;
let _95: &'static mut u128;
let _96: i128;
let _97: bool;
let _98: *mut [i128; 7];
let _99: [i64; 6];
let _100: *mut f32;
let _101: char;
let _102: *const u128;
let _103: ();
let _104: ();
{
RET = 7522306318143172256_i64 as f64;
RET = 16254924031656894154_usize as f64;
RET = (-104_isize) as f64;
RET = (-5514981650078178861_i64) as f64;
RET = 4974676375536676947_u64 as f64;
RET = 27928_i16 as f64;
RET = 16713_i16 as f64;
RET = 181682352_i32 as f64;
RET = (-5541332307014820788_i64) as f64;
Goto(bb1)
}
bb1 = {
RET = (-581091439_i32) as f64;
RET = 338696168443448015939254585769816998798_u128 as f64;
RET = 158_u8 as f64;
RET = 11091_u16 as f64;
RET = 217_u8 as f64;
RET = 63067673564042388242965911502672133324_u128 as f64;
RET = 134302535560967568313493737479698608464_u128 as f64;
RET = 7211_i16 as f64;
RET = 2760_i16 as f64;
RET = 3_u8 as f64;
RET = 600475178_u32 as f64;
RET = 7705715671805282521_u64 as f64;
RET = 46810_u16 as f64;
RET = 980863863_u32 as f64;
RET = (-2247462279562479846_i64) as f64;
Goto(bb2)
}
bb2 = {
_6.3 = false as i128;
_6.1.0 = -RET;
_6.1.0 = RET;
_6.1.1 = _6.3 << _6.3;
_6.1.0 = _6.1.1 as f64;
_6.2 = [12989668_i32,(-258154315_i32),85374286_i32,615858126_i32];
_6.3 = _6.1.1 + _6.1.1;
_5 = Adt18::Variant0 { fld0: 61_i8,fld1: '\u{afd15}',fld2: 9223372036854775807_isize };
_6.3 = _6.1.1 << _6.1.1;
_6.3 = _6.1.1 * _6.1.1;
place!(Field::<i8>(Variant(_5, 0), 0)) = 517_u16 as i8;
place!(Field::<isize>(Variant(_5, 0), 2)) = (-28_isize);
_9 = (-5231_i16) as f64;
place!(Field::<char>(Variant(_5, 0), 1)) = '\u{5cbef}';
_6.1 = (RET, _6.3, _5);
place!(Field::<i8>(Variant(_5, 0), 0)) = Field::<i8>(Variant(_6.1.2, 0), 0);
place!(Field::<i8>(Variant(_5, 0), 0)) = -Field::<i8>(Variant(_6.1.2, 0), 0);
_1 = &mut place!(Field::<isize>(Variant(_5, 0), 2));
_6.3 = _6.1.1;
match (*_1) {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
5 => bb8,
6 => bb9,
340282366920938463463374607431768211428 => bb11,
_ => bb10
}
}
bb3 = {
RET = (-581091439_i32) as f64;
RET = 338696168443448015939254585769816998798_u128 as f64;
RET = 158_u8 as f64;
RET = 11091_u16 as f64;
RET = 217_u8 as f64;
RET = 63067673564042388242965911502672133324_u128 as f64;
RET = 134302535560967568313493737479698608464_u128 as f64;
RET = 7211_i16 as f64;
RET = 2760_i16 as f64;
RET = 3_u8 as f64;
RET = 600475178_u32 as f64;
RET = 7705715671805282521_u64 as f64;
RET = 46810_u16 as f64;
RET = 980863863_u32 as f64;
RET = (-2247462279562479846_i64) as f64;
Goto(bb2)
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
Return()
}
bb10 = {
Return()
}
bb11 = {
(*_1) = -Field::<isize>(Variant(_6.1.2, 0), 2);
_6.2 = [(-1592088927_i32),(-1596059455_i32),416639083_i32,(-1776015919_i32)];
(*_1) = -Field::<isize>(Variant(_6.1.2, 0), 2);
_12 = _6.1.1 + _6.3;
RET = (-11792_i16) as f64;
_10 = (*_1) as f32;
(*_1) = Field::<isize>(Variant(_6.1.2, 0), 2) - Field::<isize>(Variant(_6.1.2, 0), 2);
_12 = 3144402085896034257_usize as i128;
_6.1.2 = Adt18::Variant3 { fld0: true,fld1: '\u{72c2b}',fld2: (*_1),fld3: RET,fld4: 2438637806_u32,fld5: 7263444272510704597_u64,fld6: 73_u8,fld7: _6.1.1 };
(*_1) = Field::<isize>(Variant(_6.1.2, 3), 2) + Field::<isize>(Variant(_6.1.2, 3), 2);
_6.2 = [607080292_i32,1095273643_i32,(-1533369098_i32),(-76700783_i32)];
_11 = '\u{b25c0}';
(*_1) = Field::<isize>(Variant(_6.1.2, 3), 2);
place!(Field::<isize>(Variant(_6.1.2, 3), 2)) = (*_1) << (*_1);
_6.3 = _6.1.1 - _6.1.1;
_6.1.1 = Field::<i128>(Variant(_6.1.2, 3), 7) >> (*_1);
(*_1) = Field::<isize>(Variant(_6.1.2, 3), 2) >> Field::<isize>(Variant(_6.1.2, 3), 2);
place!(Field::<bool>(Variant(_6.1.2, 3), 0)) = false & false;
place!(Field::<bool>(Variant(_6.1.2, 3), 0)) = !true;
place!(Field::<i128>(Variant(_6.1.2, 3), 7)) = _6.3 - _6.1.1;
Goto(bb12)
}
bb12 = {
_6.1.2 = Adt18::Variant3 { fld0: false,fld1: _11,fld2: (*_1),fld3: RET,fld4: 2248193160_u32,fld5: 10267499041336004793_u64,fld6: 148_u8,fld7: _6.1.1 };
Goto(bb13)
}
bb13 = {
(*_1) = Field::<isize>(Variant(_6.1.2, 3), 2) >> Field::<isize>(Variant(_6.1.2, 3), 2);
place!(Field::<f64>(Variant(_6.1.2, 3), 3)) = _9 - RET;
(*_1) = Field::<isize>(Variant(_6.1.2, 3), 2) * Field::<isize>(Variant(_6.1.2, 3), 2);
Goto(bb14)
}
bb14 = {
_6.2 = [(-2024993142_i32),(-453704399_i32),(-139121468_i32),(-163321192_i32)];
(*_1) = Field::<isize>(Variant(_6.1.2, 3), 2) & Field::<isize>(Variant(_6.1.2, 3), 2);
_15 = &mut _6.1.0;
_19 = 80168558378896019117280997647807578761_u128 as i8;
(*_15) = RET;
(*_15) = _12 as f64;
(*_1) = (-9223372036854775808_isize) << _12;
_19 = _12 as i8;
(*_15) = RET + RET;
(*_1) = 8_isize;
match (*_1) {
0 => bb15,
8 => bb17,
_ => bb16
}
}
bb15 = {
RET = (-581091439_i32) as f64;
RET = 338696168443448015939254585769816998798_u128 as f64;
RET = 158_u8 as f64;
RET = 11091_u16 as f64;
RET = 217_u8 as f64;
RET = 63067673564042388242965911502672133324_u128 as f64;
RET = 134302535560967568313493737479698608464_u128 as f64;
RET = 7211_i16 as f64;
RET = 2760_i16 as f64;
RET = 3_u8 as f64;
RET = 600475178_u32 as f64;
RET = 7705715671805282521_u64 as f64;
RET = 46810_u16 as f64;
RET = 980863863_u32 as f64;
RET = (-2247462279562479846_i64) as f64;
Goto(bb2)
}
bb16 = {
_6.1.2 = Adt18::Variant3 { fld0: false,fld1: _11,fld2: (*_1),fld3: RET,fld4: 2248193160_u32,fld5: 10267499041336004793_u64,fld6: 148_u8,fld7: _6.1.1 };
Goto(bb13)
}
bb17 = {
(*_1) = 13941_u16 as isize;
(*_1) = 25_isize ^ (-9223372036854775808_isize);
(*_1) = 9223372036854775807_isize;
(*_1) = 57_isize >> _12;
(*_15) = 28690_i16 as f64;
(*_1) = (-9223372036854775808_isize);
(*_1) = (-9223372036854775808_isize) >> _12;
(*_15) = RET;
(*_15) = -_9;
(*_1) = -(-62_isize);
(*_15) = _19 as f64;
RET = (*_15) * (*_15);
(*_15) = (*_1) as f64;
Goto(bb18)
}
bb18 = {
_10 = (*_15) as f32;
_25.0.1 = _11;
(*_15) = RET - _9;
(*_15) = RET;
(*_15) = RET + _9;
(*_1) = 9223372036854775807_isize;
(*_15) = _9;
_9 = _12 as f64;
(*_1) = 9223372036854775807_isize + (-9223372036854775808_isize);
_20 = (-940672223_i32) - 948470304_i32;
(*_15) = _10 as f64;
(*_15) = _9 - RET;
(*_1) = 5594398552076398205_usize as isize;
(*_1) = (-9223372036854775808_isize);
(*_15) = RET;
_19 = (-92_i8) >> (*_1);
(*_1) = (-126_isize);
(*_15) = -_9;
Goto(bb19)
}
bb19 = {
_14 = (*_1);
(*_15) = _20 as f64;
(*_1) = _14 ^ _14;
_17 = &_20;
(*_15) = RET;
Goto(bb20)
}
bb20 = {
_15 = &mut _9;
_24 = (*_1) as usize;
_15 = &mut RET;
_11 = _25.0.1;
(*_15) = _19 as f64;
_25.0.1 = _11;
(*_15) = 720570177_u32 as f64;
_29 = _25.0.1;
(*_1) = _14;
_29 = _25.0.1;
(*_15) = 11399942638486680365_u64 as f64;
_21 = (*_17) != (*_17);
(*_1) = _14 >> (*_17);
_22 = [_21,_21,_21];
_22 = [_21,_21,_21];
(*_1) = _14;
(*_1) = 18369735491943986076_u64 as isize;
(*_1) = _12 as isize;
_11 = _29;
_1 = &mut _14;
Goto(bb21)
}
bb21 = {
_19 = (-74_i8) ^ 111_i8;
_34 = [_11];
(*_15) = (-1325529681997693413_i64) as f64;
(*_1) = (-9223372036854775808_isize) << (*_17);
(*_15) = 165_u8 as f64;
(*_15) = (-2329403025305639546_i64) as f64;
_11 = _29;
(*_1) = (*_15) as isize;
(*_1) = 9223372036854775807_isize;
(*_1) = (*_17) as isize;
(*_15) = _24 as f64;
(*_15) = 31793_u16 as f64;
(*_15) = 168_u8 as f64;
(*_15) = (*_1) as f64;
_29 = _11;
(*_1) = (-9223372036854775808_isize) << (*_17);
(*_1) = 9223372036854775807_isize ^ 9223372036854775807_isize;
_36 = !6128523556467677191_u64;
_34 = [_11];
(*_1) = !95_isize;
(*_15) = _24 as f64;
(*_1) = 9223372036854775807_isize | 9223372036854775807_isize;
_33 = -(*_1);
(*_1) = _33 * _33;
_34 = [_25.0.1];
Call((*_1) = fn14((*_17), _20, (*_15), (*_17), _34, Move(_17), Move(_15), _25.0.1, _25.0.1, (*_15), (*_17), _29), ReturnTo(bb22), UnwindUnreachable())
}
bb22 = {
_18 = &_36;
(*_1) = -_33;
(*_1) = _33;
_24 = !7765922399101275061_usize;
_19 = (-61_i8) | 80_i8;
(*_1) = _33 - _33;
_20 = (*_18) as i32;
(*_1) = _33 - _33;
_33 = (*_1) << (*_1);
(*_1) = _33 - _33;
_17 = &_20;
_21 = false | false;
_19 = 94_u8 as i8;
_10 = _19 as f32;
(*_1) = _33;
_1 = &mut _33;
(*_1) = (-9223372036854775808_isize) * 9223372036854775807_isize;
_26 = !(*_1);
(*_1) = _26 + _26;
(*_1) = _26 * _26;
_28 = _29;
(*_1) = _26 * _26;
_41.1 = [_11,_11];
(*_1) = _21 as isize;
_37 = _19 as isize;
(*_1) = 187_u8 as isize;
Call(_32 = core::intrinsics::transmute((*_17)), ReturnTo(bb23), UnwindUnreachable())
}
bb23 = {
_11 = _25.0.1;
_37 = (*_1) & (*_1);
_26 = 63219362638470553176445902385809541658_u128 as isize;
_12 = (*_18) as i128;
_21 = (*_1) == (*_1);
(*_1) = _37;
_25.0.1 = _28;
(*_1) = _26 + _37;
_30 = (-381270518319789972_i64) * (-1325613916400422411_i64);
(*_1) = _37 << _32;
(*_1) = _37 + _37;
_44 = _28;
_44 = _29;
Goto(bb24)
}
bb24 = {
(*_1) = _26 << _12;
(*_1) = _37 << (*_18);
_21 = _26 != (*_1);
_20 = (-587971636_i32) * (-301173310_i32);
(*_1) = _26;
_42.1 = _29;
_24 = 3_usize + 0_usize;
_39 = !_19;
_37 = (*_1) + (*_1);
_11 = _44;
(*_1) = !_26;
_36 = 14361259841408243840_u64;
match _36 {
0 => bb22,
1 => bb9,
2 => bb19,
3 => bb25,
14361259841408243840 => bb27,
_ => bb26
}
}
bb25 = {
Return()
}
bb26 = {
Return()
}
bb27 = {
_42.1 = _25.0.1;
_19 = _39 >> (*_1);
(*_1) = _21 as isize;
(*_1) = -_37;
(*_1) = 26_u8 as isize;
(*_1) = _37 ^ _26;
(*_1) = _26 << _26;
(*_1) = 188_u8 as isize;
(*_1) = _37 << _24;
_42.1 = _25.0.1;
(*_1) = _37;
_46 = -_10;
_41.2 = 21429_i16;
(*_1) = _26 & _37;
_12 = 58604596530083729092687638727269003000_u128 as i128;
_12 = 13643739801780711576775800125273273614_i128 - (-129084023900126807364574878758475641744_i128);
(*_1) = _19 as isize;
(*_1) = _37 | _37;
_41.0 = [_36,_36,_36,_36,_36,_36];
(*_1) = _37 ^ _26;
(*_1) = _37 & _37;
Goto(bb28)
}
bb28 = {
(*_1) = _37 & _37;
_25.0.1 = _28;
_25.0.1 = _29;
(*_1) = _37 - _26;
Goto(bb29)
}
bb29 = {
_36 = _12 as u64;
_43 = _32;
_32 = _43;
_28 = _44;
_47 = _42.1;
_28 = _29;
(*_1) = _21 as isize;
_20 = 292371195300841249439593205331368243850_u128 as i32;
_28 = _44;
(*_1) = -_37;
_28 = _11;
(*_1) = _37 | _26;
_43 = !_32;
(*_1) = _19 as isize;
(*_1) = _26;
_41.2 = 27197_i16;
_48 = _30 as i16;
_25.0.1 = _47;
_41.0 = [_36,_36,_36,_36,_36,_36];
match _41.2 {
27197 => bb30,
_ => bb27
}
}
bb30 = {
_21 = _26 != (*_1);
_43 = _32 | _32;
(*_1) = _26;
_48 = _41.2 - _41.2;
_10 = -_46;
(*_1) = _26 << _12;
_2 = core::ptr::addr_of_mut!(_49);
(*_2) = [_24];
(*_1) = _37 & _26;
_36 = 16299210721106628645_u64 + 2296310110312208615_u64;
_16 = Move(_2);
_25.0.0 = core::ptr::addr_of!(_56);
(*_1) = -_37;
_41.0 = [_36,_36,_36,_36,_36,_36];
(*_1) = _37 >> _19;
(*_1) = _42.1 as isize;
(*_1) = _26;
(*_1) = 51423576461416476059127252368070647473_u128 as isize;
(*_1) = _37 * _37;
_21 = _24 > _24;
_23 = core::ptr::addr_of_mut!(_56);
_46 = _10;
_49 = [_24];
_41.3 = core::ptr::addr_of_mut!((*_23));
Call((*_23) = core::intrinsics::bswap(71998253233415110594128013963462252137_u128), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
(*_1) = _37 ^ _26;
_12 = -81419359644794351830672790453128212787_i128;
_55 = Move(_25);
_4 = core::ptr::addr_of!((*_23));
(*_4) = _21 as u128;
_20 = !(-222972026_i32);
(*_23) = 86768282414642055155568170194716733187_u128;
_34 = [_11];
(*_1) = _26 >> (*_23);
(*_23) = 153893222453546974264572595269650187632_u128 | 174715136079073287332646136659643841995_u128;
_25 = Move(_55);
_55 = Move(_25);
(*_23) = !143770951720594524749699111441843661191_u128;
(*_23) = _12 as u128;
_30 = _43 as i64;
_42.1 = _28;
_53 = 95_u8 * 120_u8;
_26 = _48 as isize;
_48 = _41.2 - _41.2;
(*_23) = 293785818513495145387841351493182254292_u128;
(*_1) = _37 - _26;
_30 = (*_1) as i64;
(*_1) = !_26;
_51 = (*_23) as u8;
_35 = &_4;
(*_23) = _12 as u128;
_52 = [_30,_30,_30,_30,_30,_30];
_39 = _19;
Goto(bb32)
}
bb32 = {
_51 = _53 * _53;
(*_1) = _37 + _26;
(*_1) = -_37;
_25.0 = (Move(_4), _42.1);
(*_1) = _26 | _26;
_61.0 = _43 & _32;
_1 = &mut _37;
_59 = Move(_17);
_54 = _61.0 as isize;
_32 = !_61.0;
_60 = !_36;
(*_1) = -_54;
Goto(bb33)
}
bb33 = {
Goto(bb34)
}
bb34 = {
_10 = -_46;
_62 = &_25.0.0;
_49 = [_24];
(*_23) = _21 as u128;
_36 = _60 + _60;
(*_1) = _54 + _26;
_46 = _10;
_61.0 = !_43;
_52 = [_30,_30,_30,_30,_30,_30];
_61.2 = !(*_23);
(*_23) = !_61.2;
_55.0.1 = _29;
_26 = (*_1);
_2 = Move(_16);
(*_23) = _61.2;
(*_23) = _61.2 >> (*_1);
_44 = _25.0.1;
_65 = -(*_1);
_64 = _61.0 ^ _43;
_49 = [_24];
(*_23) = _61.2 & _61.2;
(*_23) = !_61.2;
_42.0 = core::ptr::addr_of!((*_23));
(*_23) = _39 as u128;
_67 = core::ptr::addr_of!((*_23));
_27 = core::ptr::addr_of_mut!((*_67));
_10 = _20 as f32;
Goto(bb35)
}
bb35 = {
(*_23) = !_61.2;
_67 = core::ptr::addr_of!(_61.2);
_65 = !(*_1);
(*_1) = _26 >> (*_67);
_65 = (*_1) - (*_1);
_57 = &_36;
(*_23) = (*_67);
_53 = _12 as u8;
_27 = core::ptr::addr_of_mut!((*_23));
(*_1) = _26 >> (*_67);
_25.0.0 = core::ptr::addr_of!((*_67));
(*_27) = (*_67);
_16 = Move(_2);
_41.3 = core::ptr::addr_of_mut!((*_23));
(*_23) = _20 as u128;
(*_23) = (*_67) | (*_67);
_61.3 = [_30,_30,_30,_30,_30,_30,_30,_30];
(*_67) = (*_23) | (*_23);
_25.0.0 = core::ptr::addr_of!((*_23));
(*_1) = _65 * _65;
_42.0 = core::ptr::addr_of!((*_67));
(*_67) = _43 as u128;
(*_1) = _26 >> (*_23);
match _41.2 {
0 => bb11,
1 => bb8,
2 => bb36,
3 => bb37,
27197 => bb39,
_ => bb38
}
}
bb36 = {
RET = (-581091439_i32) as f64;
RET = 338696168443448015939254585769816998798_u128 as f64;
RET = 158_u8 as f64;
RET = 11091_u16 as f64;
RET = 217_u8 as f64;
RET = 63067673564042388242965911502672133324_u128 as f64;
RET = 134302535560967568313493737479698608464_u128 as f64;
RET = 7211_i16 as f64;
RET = 2760_i16 as f64;
RET = 3_u8 as f64;
RET = 600475178_u32 as f64;
RET = 7705715671805282521_u64 as f64;
RET = 46810_u16 as f64;
RET = 980863863_u32 as f64;
RET = (-2247462279562479846_i64) as f64;
Goto(bb2)
}
bb37 = {
_11 = _25.0.1;
_37 = (*_1) & (*_1);
_26 = 63219362638470553176445902385809541658_u128 as isize;
_12 = (*_18) as i128;
_21 = (*_1) == (*_1);
(*_1) = _37;
_25.0.1 = _28;
(*_1) = _26 + _37;
_30 = (-381270518319789972_i64) * (-1325613916400422411_i64);
(*_1) = _37 << _32;
(*_1) = _37 + _37;
_44 = _28;
_44 = _29;
Goto(bb24)
}
bb38 = {
_6.1.2 = Adt18::Variant3 { fld0: false,fld1: _11,fld2: (*_1),fld3: RET,fld4: 2248193160_u32,fld5: 10267499041336004793_u64,fld6: 148_u8,fld7: _6.1.1 };
Goto(bb13)
}
bb39 = {
_34 = [_47];
(*_67) = _46 as u128;
_43 = _64 * _61.0;
_4 = core::ptr::addr_of!((*_23));
_32 = _43;
_27 = core::ptr::addr_of_mut!((*_4));
_65 = (*_1);
_34 = [_11];
_2 = Move(_16);
(*_27) = _30 as u128;
(*_67) = (*_23) << (*_1);
_67 = core::ptr::addr_of!((*_4));
_2 = core::ptr::addr_of_mut!(_49);
(*_2) = [_24];
Call((*_27) = core::intrinsics::bswap(_61.2), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
(*_27) = _61.2;
(*_23) = _61.2 + _61.2;
_71.1 = _43 | _64;
_17 = &_20;
(*_1) = (*_57) as isize;
_73 = &_21;
_63 = _10;
(*_1) = -_65;
_65 = (*_1) ^ (*_1);
(*_2) = [_24];
(*_2) = [_24];
_75 = core::ptr::addr_of_mut!(_46);
(*_2) = [_24];
_69 = (*_1);
(*_23) = _61.2 * _61.2;
Goto(bb41)
}
bb41 = {
(*_23) = _61.2 << (*_57);
_71.0 = _19 << (*_1);
(*_23) = !_61.2;
_29 = _47;
(*_23) = (*_17) as u128;
_46 = _10 + _63;
_76 = Adt41::Variant3 { fld0: _52,fld1: _43,fld2: (*_57),fld3: _30 };
(*_23) = _61.2 | _61.2;
(*_23) = _61.2 ^ _61.2;
(*_1) = _65;
(*_1) = (*_73) as isize;
_2 = core::ptr::addr_of_mut!((*_2));
(*_23) = _61.2;
_47 = _55.0.1;
(*_23) = _61.2 >> _69;
_29 = _11;
(*_1) = _65 ^ _65;
(*_1) = -_65;
(*_1) = _69;
(*_2) = [_24];
_51 = _53 << _56;
(*_2) = [_24];
_28 = _47;
(*_2) = [_24];
_1 = &mut _69;
(*_23) = _71.1 as u128;
Goto(bb42)
}
bb42 = {
(*_2) = [_24];
(*_1) = _65;
(*_2) = [_24];
Goto(bb43)
}
bb43 = {
(*_2) = [_24];
_16 = Move(_2);
(*_75) = _41.2 as f32;
_55.0.1 = _25.0.1;
_39 = _71.0 ^ _71.0;
Call((*_1) = core::intrinsics::bswap(_65), ReturnTo(bb44), UnwindUnreachable())
}
bb44 = {
_48 = -_41.2;
_61.1 = &(*_73);
_85 = &_75;
_82 = Adt18::Variant1 { fld0: _51,fld1: (*_75) };
_79 = &mut (*_1);
_52 = Field::<[i64; 6]>(Variant(_76, 3), 0);
_64 = _32;
place!(Field::<f32>(Variant(_82, 1), 1)) = (*_75) + (*_75);
(*_75) = 49276_u16 as f32;
Goto(bb45)
}
bb45 = {
_11 = _55.0.1;
_74 = Adt18::Variant2 { fld0: 14328_u16,fld1: _11,fld2: _71.1 };
_68 = core::ptr::addr_of!(_54);
_46 = Field::<f32>(Variant(_82, 1), 1) * Field::<f32>(Variant(_82, 1), 1);
(*_79) = _39 as isize;
_56 = _61.2 >> Field::<u32>(Variant(_76, 3), 1);
_63 = -(*_75);
_80.fld2 = [Field::<i64>(Variant(_76, 3), 3),Field::<i64>(Variant(_76, 3), 3),_30,_30,_30,_30,Field::<i64>(Variant(_76, 3), 3),_30];
place!(Field::<u64>(Variant(_76, 3), 2)) = !(*_57);
_44 = _28;
_72 = (*_75) - (*_75);
_71.2 = [_24];
(*_79) = (*_68) | _65;
_58 = Move(_57);
_25.0.1 = _42.1;
_80.fld4.1 = _32 as i128;
(*_75) = Field::<f32>(Variant(_82, 1), 1);
_55 = Move(_25);
(*_68) = (*_79) * (*_79);
(*_79) = (*_68) & _54;
(*_23) = _61.2;
(*_75) = -_72;
(*_68) = (*_79) + _65;
_80.fld5 = _80.fld4.1;
_65 = (*_23) as isize;
_41.2 = _48 >> (*_79);
(*_68) = _44 as isize;
Goto(bb46)
}
bb46 = {
(*_68) = _56 as isize;
(*_75) = -_63;
(*_79) = _54 * (*_68);
(*_68) = -(*_79);
_41.1 = [_44,_42.1];
_25.0.0 = Move(_42.0);
_28 = _55.0.1;
place!(Field::<u16>(Variant(_74, 2), 0)) = Field::<i64>(Variant(_76, 3), 3) as u16;
(*_68) = -(*_79);
_63 = (*_75) - (*_75);
_39 = -_71.0;
(*_79) = _24 as isize;
_41.0 = [Field::<u64>(Variant(_76, 3), 2),_60,_36,_36,Field::<u64>(Variant(_76, 3), 2),_36];
(*_23) = _61.2 >> _48;
(*_23) = !_61.2;
place!(Field::<[i64; 6]>(Variant(_76, 3), 0)) = _52;
_80.fld0 = !(*_73);
_89 = &(*_73);
_67 = core::ptr::addr_of!((*_23));
(*_67) = _61.2 & _61.2;
(*_75) = _72 - _72;
Goto(bb47)
}
bb47 = {
(*_79) = !(*_68);
_26 = (*_79) >> (*_79);
_11 = _55.0.1;
_86 = _39 as f64;
(*_23) = _61.2;
(*_68) = -(*_79);
_61 = (Field::<u32>(Variant(_74, 2), 2), Move(_73), (*_23), _80.fld2);
place!(Field::<u8>(Variant(_82, 1), 0)) = (*_23) as u8;
_56 = _61.2 * _61.2;
_4 = core::ptr::addr_of!(_61.2);
_28 = Field::<char>(Variant(_74, 2), 1);
_48 = _41.2;
_41.2 = _48 ^ _48;
(*_23) = (*_4) >> _48;
(*_4) = Field::<u8>(Variant(_82, 1), 0) as u128;
_77 = Move(_18);
(*_4) = (*_23) - (*_23);
_28 = _11;
_29 = _55.0.1;
_80.fld4.2 = _82;
_23 = core::ptr::addr_of_mut!((*_23));
_39 = Field::<u16>(Variant(_74, 2), 0) as i8;
_1 = &mut (*_68);
(*_4) = !(*_23);
(*_4) = (*_23);
Goto(bb48)
}
bb48 = {
_10 = (*_75) - (*_75);
_41.3 = core::ptr::addr_of_mut!((*_4));
(*_1) = (*_79);
(*_4) = !(*_23);
(*_79) = (*_1);
(*_4) = (*_23) & (*_23);
(*_1) = _36 as isize;
(*_1) = (*_79) & (*_79);
_80.fld0 = (*_89);
_63 = _46 - (*_75);
_88 = &mut _86;
(*_88) = _36 as f64;
_61.0 = _64 * _43;
place!(Field::<char>(Variant(_74, 2), 1)) = _44;
(*_23) = (*_4);
_35 = Move(_62);
(*_75) = _63;
_73 = &(*_89);
_25 = Move(_55);
_42 = (Move(_4), _29);
_80.fld1 = Field::<i64>(Variant(_76, 3), 3) ^ Field::<i64>(Variant(_76, 3), 3);
_41.0 = [_36,Field::<u64>(Variant(_76, 3), 2),Field::<u64>(Variant(_76, 3), 2),_60,_60,_60];
Call((*_1) = core::intrinsics::transmute(_71.2), ReturnTo(bb49), UnwindUnreachable())
}
bb49 = {
_52 = Field::<[i64; 6]>(Variant(_76, 3), 0);
Goto(bb50)
}
bb50 = {
Call(_103 = dump_var(Move(_29), Move(_11), Move(_34), Move(_37)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_103 = dump_var(Move(_54), Move(_20), Move(_30), Move(_48)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_103 = dump_var(Move(_19), Move(_44), Move(_14), Move(_22)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_103 = dump_var(Move(_32), Move(_12), Move(_60), Move(_64)), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn14(mut _1: i32,mut _2: i32,mut _3: f64,mut _4: i32,mut _5: [char; 1],mut _6: &'static i32,mut _7: &'static mut f64,mut _8: char,mut _9: char,mut _10: f64,mut _11: i32,mut _12: char) -> isize {
mir! {
type RET = isize;
let _13: *const isize;
let _14: &'static [usize; 1];
let _15: &'static (Adt58, u128);
let _16: u8;
let _17: [i64; 8];
let _18: f64;
let _19: ([bool; 3], &'static mut f64, f32);
let _20: char;
let _21: u128;
let _22: &'static bool;
let _23: u64;
let _24: u8;
let _25: &'static mut [i128; 7];
let _26: [i8; 6];
let _27: isize;
let _28: i16;
let _29: Adt63;
let _30: u128;
let _31: i128;
let _32: Adt47;
let _33: f32;
let _34: &'static bool;
let _35: bool;
let _36: *mut [i128; 7];
let _37: isize;
let _38: bool;
let _39: f32;
let _40: f64;
let _41: f32;
let _42: f64;
let _43: char;
let _44: (Adt37, (i8, u32, [usize; 1], Adt47));
let _45: (i8, u32, [usize; 1], Adt47);
let _46: [u16; 5];
let _47: i16;
let _48: *mut ([i32; 4],);
let _49: char;
let _50: (char, Adt18);
let _51: f32;
let _52: u8;
let _53: &'static mut [i128; 7];
let _54: u128;
let _55: ((*const u128, char),);
let _56: (i8, u32, [usize; 1], Adt47);
let _57: &'static mut Adt37;
let _58: ();
let _59: ();
{
_1 = -_4;
_1 = _4;
_7 = &mut _10;
(*_7) = 777115106_u32 as f64;
_1 = true as i32;
(*_7) = _3 + _3;
(*_7) = _3 + _3;
Goto(bb1)
}
bb1 = {
_9 = _12;
(*_7) = -_3;
(*_7) = 8431707147385748154_u64 as f64;
_7 = &mut _3;
Call((*_7) = fn15(_12, _9, _1, _8, _4, _12, _8, _4, _2, _8, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_9 = _8;
(*_7) = (-77272462625510751919383383023598974429_i128) as f64;
(*_7) = (-5_isize) as f64;
(*_7) = 844660858795421730_u64 as f64;
(*_7) = 12697_i16 as f64;
(*_7) = 38001_u16 as f64;
(*_7) = 33_i8 as f64;
(*_7) = 41_i8 as f64;
(*_7) = _4 as f64;
_9 = _12;
_6 = &_2;
(*_7) = 1715309590_u32 as f64;
_13 = core::ptr::addr_of!(RET);
(*_13) = false as isize;
(*_7) = 5917293838206428360_i64 as f64;
(*_7) = 178946546393532775624504451448803263942_u128 as f64;
(*_7) = 13783663110257654072_usize as f64;
(*_13) = 9223372036854775807_isize;
(*_7) = 25245_u16 as f64;
(*_7) = 42828_u16 as f64;
(*_7) = 38_i8 as f64;
match (*_13) {
0 => bb3,
1 => bb4,
2 => bb5,
3 => bb6,
4 => bb7,
9223372036854775807 => bb9,
_ => bb8
}
}
bb3 = {
_9 = _12;
(*_7) = -_3;
(*_7) = 8431707147385748154_u64 as f64;
_7 = &mut _3;
Call((*_7) = fn15(_12, _9, _1, _8, _4, _12, _8, _4, _2, _8, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
Return()
}
bb8 = {
Return()
}
bb9 = {
_12 = _9;
_4 = _2;
(*_7) = 11575_i16 as f64;
(*_13) = -(-9223372036854775808_isize);
(*_13) = 9223372036854775807_isize;
(*_13) = -9223372036854775807_isize;
(*_13) = 110_isize | (-9223372036854775808_isize);
(*_13) = (-9223372036854775808_isize);
(*_13) = (-7_isize) * 62_isize;
(*_7) = (*_13) as f64;
_12 = _9;
(*_13) = (-9223372036854775808_isize) + (-64_isize);
Goto(bb10)
}
bb10 = {
(*_7) = (-142548537130680345859710392059802224280_i128) as f64;
_11 = (*_6) - (*_6);
(*_13) = (-6995661339516121572_i64) as isize;
RET = (-9223372036854775808_isize);
_4 = (*_6);
(*_13) = (-9223372036854775808_isize);
_11 = (*_6);
(*_7) = 13579323712415572751_u64 as f64;
_1 = (*_6);
(*_7) = 111_u16 as f64;
(*_7) = 109_u8 as f64;
(*_7) = 12559237842704522396859032851569692116_u128 as f64;
(*_7) = (*_13) as f64;
_5 = [_9];
(*_13) = (-9223372036854775808_isize) >> (*_6);
_13 = core::ptr::addr_of!((*_13));
(*_7) = 217267760244168868808684404620665718201_u128 as f64;
_4 = !(*_6);
_1 = 25666_i16 as i32;
_1 = -_11;
(*_13) = 60_isize - (-9223372036854775808_isize);
RET = (-9223372036854775808_isize);
(*_13) = 9223372036854775807_isize >> (*_6);
_4 = (*_6) << (*_6);
Goto(bb11)
}
bb11 = {
(*_13) = 61992_u16 as isize;
(*_7) = 8784_i16 as f64;
(*_7) = 3476343566279972249_usize as f64;
(*_13) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_13) = -(-9_isize);
(*_13) = (-92_i8) as isize;
_9 = _12;
_12 = _9;
_20 = _12;
(*_7) = 3_usize as f64;
(*_13) = -9223372036854775807_isize;
_19.1 = &mut (*_7);
(*_13) = (-18452_i16) as isize;
(*_13) = 9223372036854775807_isize - (-82_isize);
(*_13) = 9223372036854775807_isize;
_16 = 6_u8 << (*_13);
_21 = RET as u128;
(*_13) = 9223372036854775807_isize;
_16 = 253_u8 | 223_u8;
(*_13) = 9223372036854775807_isize * 9223372036854775807_isize;
(*_13) = -9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> (*_6);
(*_13) = 5_isize;
(*_13) = 127_isize + 9223372036854775807_isize;
RET = 818_i16 as isize;
(*_13) = 9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> _1;
Goto(bb12)
}
bb12 = {
(*_13) = (-9223372036854775808_isize) * (-9223372036854775808_isize);
_23 = 9742173353312936037_u64 - 8561333783394802943_u64;
(*_13) = 49_i8 as isize;
_4 = 1009358726_u32 as i32;
_19.1 = Move(_7);
(*_13) = (-34_isize) & (-9223372036854775808_isize);
(*_13) = (-9223372036854775808_isize);
_24 = _16 & _16;
(*_13) = (*_6) as isize;
_4 = _1 ^ (*_6);
Goto(bb13)
}
bb13 = {
(*_13) = (-123_isize) << (*_6);
(*_13) = _23 as isize;
Goto(bb14)
}
bb14 = {
_19.0 = [true,false,false];
(*_13) = (-9223372036854775808_isize) * (-9223372036854775808_isize);
_19.0 = [false,true,true];
(*_13) = !(-9223372036854775808_isize);
(*_13) = _12 as isize;
(*_13) = _23 as isize;
_1 = !(*_6);
(*_13) = !3_isize;
_17 = [(-1467130292869938089_i64),(-5442444008745194567_i64),(-1814255514751851106_i64),(-223987048766295689_i64),(-2684525761750733101_i64),747576428089932752_i64,(-8414426158912187656_i64),(-1098808507389005088_i64)];
(*_13) = _9 as isize;
(*_13) = 9223372036854775807_isize << (*_6);
_20 = _8;
_26 = [62_i8,113_i8,40_i8,57_i8,(-123_i8),50_i8];
_20 = _9;
(*_13) = (-9223372036854775808_isize);
(*_13) = (-100_isize);
_24 = _16 + _16;
(*_13) = 88_isize;
_1 = (*_6) << (*_6);
_19.0 = [true,false,true];
(*_13) = 9223372036854775807_isize ^ (-57_isize);
_19.2 = 100916343675350924141462599096041796969_i128 as f32;
_18 = (*_6) as f64;
_7 = &mut _18;
(*_13) = 90_isize;
Goto(bb15)
}
bb15 = {
_11 = (*_6);
(*_7) = _19.2 as f64;
_27 = (*_13);
(*_13) = _27 >> _1;
(*_7) = 2353653262_u32 as f64;
_9 = _20;
(*_13) = _27 | _27;
(*_7) = 7_i8 as f64;
_28 = (-22734_i16) * 27585_i16;
(*_13) = _27 * _27;
(*_13) = _27 * _27;
(*_13) = _27 + _27;
_16 = _24;
(*_7) = _19.2 as f64;
(*_7) = _21 as f64;
(*_13) = -_27;
(*_13) = !_27;
_30 = _21 - _21;
(*_7) = _19.2 as f64;
(*_7) = 37904_u16 as f64;
_5 = [_8];
(*_13) = (*_7) as isize;
Goto(bb16)
}
bb16 = {
_33 = _19.2;
_5 = [_8];
_28 = (*_6) as i16;
(*_13) = !_27;
_31 = !(-97129672801915100727815063340857023741_i128);
(*_7) = 46_i8 as f64;
match _27 {
0 => bb9,
1 => bb3,
2 => bb17,
3 => bb18,
4 => bb19,
5 => bb20,
6 => bb21,
90 => bb23,
_ => bb22
}
}
bb17 = {
Return()
}
bb18 = {
_19.0 = [true,false,false];
(*_13) = (-9223372036854775808_isize) * (-9223372036854775808_isize);
_19.0 = [false,true,true];
(*_13) = !(-9223372036854775808_isize);
(*_13) = _12 as isize;
(*_13) = _23 as isize;
_1 = !(*_6);
(*_13) = !3_isize;
_17 = [(-1467130292869938089_i64),(-5442444008745194567_i64),(-1814255514751851106_i64),(-223987048766295689_i64),(-2684525761750733101_i64),747576428089932752_i64,(-8414426158912187656_i64),(-1098808507389005088_i64)];
(*_13) = _9 as isize;
(*_13) = 9223372036854775807_isize << (*_6);
_20 = _8;
_26 = [62_i8,113_i8,40_i8,57_i8,(-123_i8),50_i8];
_20 = _9;
(*_13) = (-9223372036854775808_isize);
(*_13) = (-100_isize);
_24 = _16 + _16;
(*_13) = 88_isize;
_1 = (*_6) << (*_6);
_19.0 = [true,false,true];
(*_13) = 9223372036854775807_isize ^ (-57_isize);
_19.2 = 100916343675350924141462599096041796969_i128 as f32;
_18 = (*_6) as f64;
_7 = &mut _18;
(*_13) = 90_isize;
Goto(bb15)
}
bb19 = {
(*_13) = (-123_isize) << (*_6);
(*_13) = _23 as isize;
Goto(bb14)
}
bb20 = {
(*_13) = (-9223372036854775808_isize) * (-9223372036854775808_isize);
_23 = 9742173353312936037_u64 - 8561333783394802943_u64;
(*_13) = 49_i8 as isize;
_4 = 1009358726_u32 as i32;
_19.1 = Move(_7);
(*_13) = (-34_isize) & (-9223372036854775808_isize);
(*_13) = (-9223372036854775808_isize);
_24 = _16 & _16;
(*_13) = (*_6) as isize;
_4 = _1 ^ (*_6);
Goto(bb13)
}
bb21 = {
(*_13) = 61992_u16 as isize;
(*_7) = 8784_i16 as f64;
(*_7) = 3476343566279972249_usize as f64;
(*_13) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_13) = -(-9_isize);
(*_13) = (-92_i8) as isize;
_9 = _12;
_12 = _9;
_20 = _12;
(*_7) = 3_usize as f64;
(*_13) = -9223372036854775807_isize;
_19.1 = &mut (*_7);
(*_13) = (-18452_i16) as isize;
(*_13) = 9223372036854775807_isize - (-82_isize);
(*_13) = 9223372036854775807_isize;
_16 = 6_u8 << (*_13);
_21 = RET as u128;
(*_13) = 9223372036854775807_isize;
_16 = 253_u8 | 223_u8;
(*_13) = 9223372036854775807_isize * 9223372036854775807_isize;
(*_13) = -9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> (*_6);
(*_13) = 5_isize;
(*_13) = 127_isize + 9223372036854775807_isize;
RET = 818_i16 as isize;
(*_13) = 9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> _1;
Goto(bb12)
}
bb22 = {
(*_7) = (-142548537130680345859710392059802224280_i128) as f64;
_11 = (*_6) - (*_6);
(*_13) = (-6995661339516121572_i64) as isize;
RET = (-9223372036854775808_isize);
_4 = (*_6);
(*_13) = (-9223372036854775808_isize);
_11 = (*_6);
(*_7) = 13579323712415572751_u64 as f64;
_1 = (*_6);
(*_7) = 111_u16 as f64;
(*_7) = 109_u8 as f64;
(*_7) = 12559237842704522396859032851569692116_u128 as f64;
(*_7) = (*_13) as f64;
_5 = [_9];
(*_13) = (-9223372036854775808_isize) >> (*_6);
_13 = core::ptr::addr_of!((*_13));
(*_7) = 217267760244168868808684404620665718201_u128 as f64;
_4 = !(*_6);
_1 = 25666_i16 as i32;
_1 = -_11;
(*_13) = 60_isize - (-9223372036854775808_isize);
RET = (-9223372036854775808_isize);
(*_13) = 9223372036854775807_isize >> (*_6);
_4 = (*_6) << (*_6);
Goto(bb11)
}
bb23 = {
_12 = _20;
_4 = _24 as i32;
_17 = [(-3657228496356332249_i64),6583042348424442724_i64,4447414054940758023_i64,5066286410515235641_i64,(-7039233496271051441_i64),(-2938900199272173782_i64),(-3668363641720503151_i64),1224104237137182855_i64];
(*_7) = _16 as f64;
(*_13) = _27;
_9 = _20;
_8 = _20;
_1 = (*_6) >> (*_6);
_1 = -_4;
_21 = !_30;
(*_13) = _27 * _27;
(*_7) = _33 as f64;
_23 = 17065136758854759105_u64;
(*_7) = _24 as f64;
_13 = core::ptr::addr_of!(_27);
_35 = _1 >= (*_6);
(*_7) = _31 as f64;
(*_13) = 12195601719167529161_usize as isize;
_22 = &_35;
(*_7) = (-4965312217343893107_i64) as f64;
_19.1 = &mut (*_7);
(*_13) = RET;
match _23 {
0 => bb24,
1 => bb25,
17065136758854759105 => bb27,
_ => bb26
}
}
bb24 = {
(*_13) = 61992_u16 as isize;
(*_7) = 8784_i16 as f64;
(*_7) = 3476343566279972249_usize as f64;
(*_13) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_13) = -(-9_isize);
(*_13) = (-92_i8) as isize;
_9 = _12;
_12 = _9;
_20 = _12;
(*_7) = 3_usize as f64;
(*_13) = -9223372036854775807_isize;
_19.1 = &mut (*_7);
(*_13) = (-18452_i16) as isize;
(*_13) = 9223372036854775807_isize - (-82_isize);
(*_13) = 9223372036854775807_isize;
_16 = 6_u8 << (*_13);
_21 = RET as u128;
(*_13) = 9223372036854775807_isize;
_16 = 253_u8 | 223_u8;
(*_13) = 9223372036854775807_isize * 9223372036854775807_isize;
(*_13) = -9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> (*_6);
(*_13) = 5_isize;
(*_13) = 127_isize + 9223372036854775807_isize;
RET = 818_i16 as isize;
(*_13) = 9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> _1;
Goto(bb12)
}
bb25 = {
Return()
}
bb26 = {
_9 = _12;
(*_7) = -_3;
(*_7) = 8431707147385748154_u64 as f64;
_7 = &mut _3;
Call((*_7) = fn15(_12, _9, _1, _8, _4, _12, _8, _4, _2, _8, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb27 = {
_7 = Move(_19.1);
_26 = [127_i8,3_i8,88_i8,22_i8,(-5_i8),(-55_i8)];
_23 = 16956556607780889762_u64 + 10594565261377737246_u64;
_39 = _33 * _33;
_38 = !(*_22);
_31 = 141234551797079309103060496528848500258_i128;
(*_13) = RET;
_1 = _21 as i32;
_39 = 1596868239_u32 as f32;
_13 = core::ptr::addr_of!((*_13));
match _31 {
0 => bb25,
1 => bb11,
2 => bb14,
3 => bb16,
4 => bb28,
5 => bb29,
6 => bb30,
141234551797079309103060496528848500258 => bb32,
_ => bb31
}
}
bb28 = {
Return()
}
bb29 = {
(*_7) = (-142548537130680345859710392059802224280_i128) as f64;
_11 = (*_6) - (*_6);
(*_13) = (-6995661339516121572_i64) as isize;
RET = (-9223372036854775808_isize);
_4 = (*_6);
(*_13) = (-9223372036854775808_isize);
_11 = (*_6);
(*_7) = 13579323712415572751_u64 as f64;
_1 = (*_6);
(*_7) = 111_u16 as f64;
(*_7) = 109_u8 as f64;
(*_7) = 12559237842704522396859032851569692116_u128 as f64;
(*_7) = (*_13) as f64;
_5 = [_9];
(*_13) = (-9223372036854775808_isize) >> (*_6);
_13 = core::ptr::addr_of!((*_13));
(*_7) = 217267760244168868808684404620665718201_u128 as f64;
_4 = !(*_6);
_1 = 25666_i16 as i32;
_1 = -_11;
(*_13) = 60_isize - (-9223372036854775808_isize);
RET = (-9223372036854775808_isize);
(*_13) = 9223372036854775807_isize >> (*_6);
_4 = (*_6) << (*_6);
Goto(bb11)
}
bb30 = {
(*_13) = 61992_u16 as isize;
(*_7) = 8784_i16 as f64;
(*_7) = 3476343566279972249_usize as f64;
(*_13) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_13) = -(-9_isize);
(*_13) = (-92_i8) as isize;
_9 = _12;
_12 = _9;
_20 = _12;
(*_7) = 3_usize as f64;
(*_13) = -9223372036854775807_isize;
_19.1 = &mut (*_7);
(*_13) = (-18452_i16) as isize;
(*_13) = 9223372036854775807_isize - (-82_isize);
(*_13) = 9223372036854775807_isize;
_16 = 6_u8 << (*_13);
_21 = RET as u128;
(*_13) = 9223372036854775807_isize;
_16 = 253_u8 | 223_u8;
(*_13) = 9223372036854775807_isize * 9223372036854775807_isize;
(*_13) = -9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> (*_6);
(*_13) = 5_isize;
(*_13) = 127_isize + 9223372036854775807_isize;
RET = 818_i16 as isize;
(*_13) = 9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> _1;
Goto(bb12)
}
bb31 = {
_9 = _12;
(*_7) = -_3;
(*_7) = 8431707147385748154_u64 as f64;
_7 = &mut _3;
Call((*_7) = fn15(_12, _9, _1, _8, _4, _12, _8, _4, _2, _8, _11), ReturnTo(bb2), UnwindUnreachable())
}
bb32 = {
_16 = _24 << (*_13);
_16 = !_24;
(*_13) = RET ^ RET;
_37 = (*_13) | (*_13);
(*_13) = -_37;
(*_13) = _37 ^ _37;
(*_13) = -_37;
RET = !(*_13);
_13 = core::ptr::addr_of!((*_13));
_22 = &_38;
Goto(bb33)
}
bb33 = {
(*_13) = _37 << (*_6);
_24 = _16;
_12 = _8;
Goto(bb34)
}
bb34 = {
_26 = [15_i8,49_i8,(-58_i8),(-112_i8),(-61_i8),78_i8];
_34 = &(*_22);
_20 = _8;
(*_13) = RET >> (*_6);
(*_13) = _37;
Goto(bb35)
}
bb35 = {
_41 = (*_6) as f32;
_26 = [(-97_i8),78_i8,(-107_i8),45_i8,(-105_i8),127_i8];
_17 = [3776540300599576985_i64,(-382701841058643232_i64),(-5734973822209848647_i64),(-2779715524200546291_i64),3229374041321351155_i64,(-2343583208498436074_i64),(-2945638303572816157_i64),(-5834846326566318410_i64)];
_28 = 26025_i16;
RET = _37;
(*_13) = !RET;
_17 = [(-2468355415995340060_i64),(-8421738670402165416_i64),6467512191869232458_i64,5010517785892342216_i64,1517000631676530222_i64,5080195867617084595_i64,3815730214638692891_i64,(-8996929971191373044_i64)];
Goto(bb36)
}
bb36 = {
_17 = [2158918632460700355_i64,5061726474781056001_i64,(-8758928673611261470_i64),5310810455473573066_i64,(-8390511463677623371_i64),9220200611408170395_i64,3714522214494635890_i64,(-7303438109247576523_i64)];
(*_13) = 56138_u16 as isize;
_30 = !_21;
RET = (*_13) + (*_13);
_8 = _20;
(*_13) = _23 as isize;
_4 = (*_6) ^ _11;
_26 = [(-10_i8),58_i8,(-77_i8),79_i8,(-74_i8),(-99_i8)];
_44.1.2 = [4255337702653541056_usize];
_2 = -_1;
(*_13) = !RET;
RET = (*_13) >> _23;
_6 = &_1;
_38 = _35;
_2 = (*_6) + (*_6);
_45.2 = [1_usize];
_1 = _4 * _4;
(*_13) = -_37;
(*_13) = _37;
match _28 {
0 => bb37,
1 => bb38,
2 => bb39,
26025 => bb41,
_ => bb40
}
}
bb37 = {
(*_7) = (-142548537130680345859710392059802224280_i128) as f64;
_11 = (*_6) - (*_6);
(*_13) = (-6995661339516121572_i64) as isize;
RET = (-9223372036854775808_isize);
_4 = (*_6);
(*_13) = (-9223372036854775808_isize);
_11 = (*_6);
(*_7) = 13579323712415572751_u64 as f64;
_1 = (*_6);
(*_7) = 111_u16 as f64;
(*_7) = 109_u8 as f64;
(*_7) = 12559237842704522396859032851569692116_u128 as f64;
(*_7) = (*_13) as f64;
_5 = [_9];
(*_13) = (-9223372036854775808_isize) >> (*_6);
_13 = core::ptr::addr_of!((*_13));
(*_7) = 217267760244168868808684404620665718201_u128 as f64;
_4 = !(*_6);
_1 = 25666_i16 as i32;
_1 = -_11;
(*_13) = 60_isize - (-9223372036854775808_isize);
RET = (-9223372036854775808_isize);
(*_13) = 9223372036854775807_isize >> (*_6);
_4 = (*_6) << (*_6);
Goto(bb11)
}
bb38 = {
_11 = (*_6);
(*_7) = _19.2 as f64;
_27 = (*_13);
(*_13) = _27 >> _1;
(*_7) = 2353653262_u32 as f64;
_9 = _20;
(*_13) = _27 | _27;
(*_7) = 7_i8 as f64;
_28 = (-22734_i16) * 27585_i16;
(*_13) = _27 * _27;
(*_13) = _27 * _27;
(*_13) = _27 + _27;
_16 = _24;
(*_7) = _19.2 as f64;
(*_7) = _21 as f64;
(*_13) = -_27;
(*_13) = !_27;
_30 = _21 - _21;
(*_7) = _19.2 as f64;
(*_7) = 37904_u16 as f64;
_5 = [_8];
(*_13) = (*_7) as isize;
Goto(bb16)
}
bb39 = {
(*_13) = 61992_u16 as isize;
(*_7) = 8784_i16 as f64;
(*_7) = 3476343566279972249_usize as f64;
(*_13) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_13) = -(-9_isize);
(*_13) = (-92_i8) as isize;
_9 = _12;
_12 = _9;
_20 = _12;
(*_7) = 3_usize as f64;
(*_13) = -9223372036854775807_isize;
_19.1 = &mut (*_7);
(*_13) = (-18452_i16) as isize;
(*_13) = 9223372036854775807_isize - (-82_isize);
(*_13) = 9223372036854775807_isize;
_16 = 6_u8 << (*_13);
_21 = RET as u128;
(*_13) = 9223372036854775807_isize;
_16 = 253_u8 | 223_u8;
(*_13) = 9223372036854775807_isize * 9223372036854775807_isize;
(*_13) = -9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> (*_6);
(*_13) = 5_isize;
(*_13) = 127_isize + 9223372036854775807_isize;
RET = 818_i16 as isize;
(*_13) = 9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> _1;
Goto(bb12)
}
bb40 = {
(*_7) = (-142548537130680345859710392059802224280_i128) as f64;
_11 = (*_6) - (*_6);
(*_13) = (-6995661339516121572_i64) as isize;
RET = (-9223372036854775808_isize);
_4 = (*_6);
(*_13) = (-9223372036854775808_isize);
_11 = (*_6);
(*_7) = 13579323712415572751_u64 as f64;
_1 = (*_6);
(*_7) = 111_u16 as f64;
(*_7) = 109_u8 as f64;
(*_7) = 12559237842704522396859032851569692116_u128 as f64;
(*_7) = (*_13) as f64;
_5 = [_9];
(*_13) = (-9223372036854775808_isize) >> (*_6);
_13 = core::ptr::addr_of!((*_13));
(*_7) = 217267760244168868808684404620665718201_u128 as f64;
_4 = !(*_6);
_1 = 25666_i16 as i32;
_1 = -_11;
(*_13) = 60_isize - (-9223372036854775808_isize);
RET = (-9223372036854775808_isize);
(*_13) = 9223372036854775807_isize >> (*_6);
_4 = (*_6) << (*_6);
Goto(bb11)
}
bb41 = {
_40 = _23 as f64;
_42 = _40 + _40;
_6 = &_2;
(*_13) = _37 - _37;
(*_13) = _37 - _37;
_19.2 = _33;
(*_13) = _37 | _37;
(*_13) = _37 - _37;
_34 = &_35;
_43 = _20;
(*_13) = _37;
(*_13) = RET | RET;
(*_13) = 2389669430_u32 as isize;
_45.0 = (-126_i8) ^ (-112_i8);
(*_13) = _37 >> _16;
match _31 {
0 => bb42,
141234551797079309103060496528848500258 => bb44,
_ => bb43
}
}
bb42 = {
(*_13) = 61992_u16 as isize;
(*_7) = 8784_i16 as f64;
(*_7) = 3476343566279972249_usize as f64;
(*_13) = 9223372036854775807_isize + (-9223372036854775808_isize);
(*_13) = -(-9_isize);
(*_13) = (-92_i8) as isize;
_9 = _12;
_12 = _9;
_20 = _12;
(*_7) = 3_usize as f64;
(*_13) = -9223372036854775807_isize;
_19.1 = &mut (*_7);
(*_13) = (-18452_i16) as isize;
(*_13) = 9223372036854775807_isize - (-82_isize);
(*_13) = 9223372036854775807_isize;
_16 = 6_u8 << (*_13);
_21 = RET as u128;
(*_13) = 9223372036854775807_isize;
_16 = 253_u8 | 223_u8;
(*_13) = 9223372036854775807_isize * 9223372036854775807_isize;
(*_13) = -9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> (*_6);
(*_13) = 5_isize;
(*_13) = 127_isize + 9223372036854775807_isize;
RET = 818_i16 as isize;
(*_13) = 9223372036854775807_isize;
(*_13) = 9223372036854775807_isize >> _1;
Goto(bb12)
}
bb43 = {
(*_7) = (-142548537130680345859710392059802224280_i128) as f64;
_11 = (*_6) - (*_6);
(*_13) = (-6995661339516121572_i64) as isize;
RET = (-9223372036854775808_isize);
_4 = (*_6);
(*_13) = (-9223372036854775808_isize);
_11 = (*_6);
(*_7) = 13579323712415572751_u64 as f64;
_1 = (*_6);
(*_7) = 111_u16 as f64;
(*_7) = 109_u8 as f64;
(*_7) = 12559237842704522396859032851569692116_u128 as f64;
(*_7) = (*_13) as f64;
_5 = [_9];
(*_13) = (-9223372036854775808_isize) >> (*_6);
_13 = core::ptr::addr_of!((*_13));
(*_7) = 217267760244168868808684404620665718201_u128 as f64;
_4 = !(*_6);
_1 = 25666_i16 as i32;
_1 = -_11;
(*_13) = 60_isize - (-9223372036854775808_isize);
RET = (-9223372036854775808_isize);
(*_13) = 9223372036854775807_isize >> (*_6);
_4 = (*_6) << (*_6);
Goto(bb11)
}
bb44 = {
_7 = &mut _42;
(*_13) = _37;
(*_13) = _37 ^ _37;
(*_13) = RET + _37;
(*_7) = _19.2 as f64;
(*_7) = -_40;
(*_13) = !_37;
(*_7) = _40;
(*_7) = _40 - _40;
_47 = -_28;
(*_13) = _37;
_4 = !(*_6);
(*_7) = _40 - _40;
(*_7) = _40 + _40;
(*_13) = _40 as isize;
(*_7) = _40 * _40;
_46 = [50525_u16,51547_u16,42009_u16,34138_u16,9567_u16];
_30 = _21 >> (*_13);
(*_13) = RET ^ RET;
(*_7) = _40 * _40;
(*_13) = RET | _37;
match _31 {
141234551797079309103060496528848500258 => bb45,
_ => bb39
}
}
bb45 = {
_37 = (*_13) & RET;
_12 = _8;
_33 = _39;
_31 = (-144990227271099746717801541306240657842_i128);
_21 = _30 + _30;
Goto(bb46)
}
bb46 = {
_6 = &_11;
(*_7) = -_40;
(*_13) = !_37;
_19.1 = &mut (*_7);
_21 = _30 << (*_13);
_37 = _23 as isize;
match _28 {
0 => bb45,
1 => bb40,
2 => bb21,
3 => bb20,
4 => bb47,
26025 => bb49,
_ => bb48
}
}
bb47 = {
_17 = [2158918632460700355_i64,5061726474781056001_i64,(-8758928673611261470_i64),5310810455473573066_i64,(-8390511463677623371_i64),9220200611408170395_i64,3714522214494635890_i64,(-7303438109247576523_i64)];
(*_13) = 56138_u16 as isize;
_30 = !_21;
RET = (*_13) + (*_13);
_8 = _20;
(*_13) = _23 as isize;
_4 = (*_6) ^ _11;
_26 = [(-10_i8),58_i8,(-77_i8),79_i8,(-74_i8),(-99_i8)];
_44.1.2 = [4255337702653541056_usize];
_2 = -_1;
(*_13) = !RET;
RET = (*_13) >> _23;
_6 = &_1;
_38 = _35;
_2 = (*_6) + (*_6);
_45.2 = [1_usize];
_1 = _4 * _4;
(*_13) = -_37;
(*_13) = _37;
match _28 {
0 => bb37,
1 => bb38,
2 => bb39,
26025 => bb41,
_ => bb40
}
}
bb48 = {
Return()
}
bb49 = {
(*_13) = _37 - _37;
_27 = _37;
_50.0 = _8;
(*_13) = !_37;
_44.1.1 = 3828888216_u32;
_34 = &_38;
_11 = _1;
_28 = _47;
_50.0 = _12;
_26 = [_45.0,_45.0,_45.0,_45.0,_45.0,_45.0];
_43 = _8;
_26 = [_45.0,_45.0,_45.0,_45.0,_45.0,_45.0];
_33 = _39;
_35 = _38 >= (*_34);
_45.0 = (-103_i8) - 124_i8;
_54 = _21 + _21;
_37 = 2703525116078695244_usize as isize;
_50.1 = Adt18::Variant3 { fld0: (*_34),fld1: _9,fld2: (*_13),fld3: _40,fld4: _44.1.1,fld5: _23,fld6: _16,fld7: _31 };
_24 = !Field::<u8>(Variant(_50.1, 3), 6);
_14 = &_44.1.2;
(*_13) = Field::<isize>(Variant(_50.1, 3), 2) >> _11;
_19.1 = &mut place!(Field::<f64>(Variant(_50.1, 3), 3));
_45.1 = _44.1.1 | _44.1.1;
_23 = 9498789586779837939_u64 - 7734932595611945305_u64;
_40 = _47 as f64;
(*_13) = RET;
(*_13) = _28 as isize;
_1 = _4 * _11;
Goto(bb50)
}
bb50 = {
Call(_58 = dump_var(Move(_9), Move(_12), Move(_28), Move(_24)), ReturnTo(bb51), UnwindUnreachable())
}
bb51 = {
Call(_58 = dump_var(Move(_43), Move(_38), Move(_23), Move(_20)), ReturnTo(bb52), UnwindUnreachable())
}
bb52 = {
Call(_58 = dump_var(Move(_46), Move(_37), Move(_1), Move(_4)), ReturnTo(bb53), UnwindUnreachable())
}
bb53 = {
Call(_58 = dump_var(Move(_30), _59, _59, _59), ReturnTo(bb54), UnwindUnreachable())
}
bb54 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn15(mut _1: char,mut _2: char,mut _3: i32,mut _4: char,mut _5: i32,mut _6: char,mut _7: char,mut _8: i32,mut _9: i32,mut _10: char,mut _11: i32) -> f64 {
mir! {
type RET = f64;
let _12: bool;
let _13: *const isize;
let _14: *mut [i32; 4];
let _15: &'static i32;
let _16: u128;
let _17: f32;
let _18: Adt63;
let _19: *const isize;
let _20: *mut [usize; 1];
let _21: isize;
let _22: isize;
let _23: &'static *mut f32;
let _24: u128;
let _25: u32;
let _26: isize;
let _27: f32;
let _28: isize;
let _29: isize;
let _30: char;
let _31: ((*const u128, char),);
let _32: u16;
let _33: u64;
let _34: f64;
let _35: isize;
let _36: i32;
let _37: isize;
let _38: &'static [i32; 4];
let _39: i16;
let _40: bool;
let _41: f64;
let _42: [i16; 6];
let _43: &'static mut Adt37;
let _44: &'static (Adt58, u128);
let _45: i32;
let _46: &'static [i32; 4];
let _47: isize;
let _48: &'static mut (Adt18, [usize; 1]);
let _49: (usize, usize);
let _50: i32;
let _51: isize;
let _52: &'static mut (Adt18, [usize; 1]);
let _53: isize;
let _54: [bool; 3];
let _55: [bool; 3];
let _56: i32;
let _57: u128;
let _58: *mut [i128; 7];
let _59: f32;
let _60: (usize, usize);
let _61: i128;
let _62: u8;
let _63: char;
let _64: u128;
let _65: *mut ([i32; 4],);
let _66: f32;
let _67: &'static mut isize;
let _68: isize;
let _69: *mut [i128; 7];
let _70: f32;
let _71: i32;
let _72: u32;
let _73: i128;
let _74: isize;
let _75: u8;
let _76: &'static mut Adt37;
let _77: &'static bool;
let _78: [isize; 3];
let _79: &'static mut [isize; 3];
let _80: &'static mut [isize; 3];
let _81: char;
let _82: *mut u128;
let _83: (Adt58, u128);
let _84: ();
let _85: ();
{
_4 = _7;
_7 = _6;
_4 = _1;
_12 = _4 != _6;
_3 = _9;
_1 = _2;
_2 = _4;
_10 = _7;
_2 = _7;
_7 = _10;
_2 = _10;
_10 = _4;
_4 = _1;
_5 = _8;
_3 = _11 ^ _9;
_17 = 84084992603279049961809562139801013234_i128 as f32;
_15 = &_5;
RET = 1261_u16 as f64;
_4 = _7;
_5 = -_3;
_9 = 142014752339918830344771133513832646324_u128 as i32;
Goto(bb1)
}
bb1 = {
_12 = false;
_16 = 192888419272528315321665732916865396399_u128 - 123626365790233711937389518543225674130_u128;
_7 = _10;
_3 = _5 & _8;
_6 = _10;
_8 = _5 + _11;
_15 = &_8;
_2 = _10;
_4 = _7;
_1 = _2;
_4 = _1;
Goto(bb2)
}
bb2 = {
_12 = false;
RET = _16 as f64;
_10 = _4;
_2 = _10;
_13 = core::ptr::addr_of!(_21);
(*_13) = (-20980306019368192920715750976394244352_i128) as isize;
(*_13) = -101_isize;
(*_13) = _8 as isize;
(*_13) = 108_isize << _3;
_21 = (-9223372036854775808_isize) << (*_15);
Goto(bb3)
}
bb3 = {
(*_13) = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_7 = _1;
_8 = !_3;
_22 = (*_13) - (*_13);
(*_13) = _22 & _22;
(*_13) = _22;
(*_13) = _22 & _22;
(*_13) = 52540568562578137393716430611607872426_i128 as isize;
(*_13) = -_22;
(*_13) = _3 as isize;
(*_13) = -_22;
_17 = _8 as f32;
_4 = _7;
(*_13) = _22;
_19 = core::ptr::addr_of!((*_13));
_22 = (*_13) - (*_19);
(*_19) = _22 + _22;
(*_13) = !_22;
(*_13) = _22;
(*_13) = _4 as isize;
_22 = (*_13);
(*_13) = -_22;
(*_13) = _22 ^ _22;
RET = 171_u8 as f64;
Goto(bb4)
}
bb4 = {
(*_13) = _3 as isize;
(*_13) = _22 + _22;
_10 = _4;
_15 = &_5;
_17 = 11416322136511422011_usize as f32;
(*_13) = !_22;
_25 = !3954504579_u32;
Goto(bb5)
}
bb5 = {
(*_13) = _22 - _22;
_24 = _16;
(*_13) = !_22;
(*_13) = 63948714871216485806260620312063208067_i128 as isize;
_1 = _4;
(*_13) = _22 * _22;
(*_13) = _22 >> (*_15);
_22 = !(*_13);
_8 = (*_15) ^ (*_15);
_22 = -(*_13);
_1 = _4;
_1 = _10;
_27 = RET as f32;
(*_13) = _17 as isize;
(*_13) = -_22;
(*_13) = -_22;
_8 = 184_u8 as i32;
Goto(bb6)
}
bb6 = {
_1 = _4;
(*_13) = -_22;
_28 = -(*_13);
_34 = RET;
_29 = (*_13) >> (*_13);
_1 = _10;
(*_13) = _29;
_10 = _1;
_24 = _16 - _16;
_31.0.0 = core::ptr::addr_of!(_16);
_32 = _12 as u16;
_21 = -_22;
_30 = _7;
_6 = _7;
_26 = (*_13) - (*_13);
_24 = _16 | _16;
_37 = (*_13) << _26;
_7 = _4;
(*_13) = _28 & _37;
_25 = 2783640323_u32;
_22 = (*_13);
(*_13) = 10809_i16 as isize;
match _25 {
0 => bb7,
1 => bb8,
2 => bb9,
3 => bb10,
4 => bb11,
5 => bb12,
6 => bb13,
2783640323 => bb15,
_ => bb14
}
}
bb7 = {
(*_13) = _22 - _22;
_24 = _16;
(*_13) = !_22;
(*_13) = 63948714871216485806260620312063208067_i128 as isize;
_1 = _4;
(*_13) = _22 * _22;
(*_13) = _22 >> (*_15);
_22 = !(*_13);
_8 = (*_15) ^ (*_15);
_22 = -(*_13);
_1 = _4;
_1 = _10;
_27 = RET as f32;
(*_13) = _17 as isize;
(*_13) = -_22;
(*_13) = -_22;
_8 = 184_u8 as i32;
Goto(bb6)
}
bb8 = {
(*_13) = _3 as isize;
(*_13) = _22 + _22;
_10 = _4;
_15 = &_5;
_17 = 11416322136511422011_usize as f32;
(*_13) = !_22;
_25 = !3954504579_u32;
Goto(bb5)
}
bb9 = {
(*_13) = (-9223372036854775808_isize) ^ (-9223372036854775808_isize);
_7 = _1;
_8 = !_3;
_22 = (*_13) - (*_13);
(*_13) = _22 & _22;
(*_13) = _22;
(*_13) = _22 & _22;
(*_13) = 52540568562578137393716430611607872426_i128 as isize;
(*_13) = -_22;
(*_13) = _3 as isize;
(*_13) = -_22;
_17 = _8 as f32;
_4 = _7;
(*_13) = _22;
_19 = core::ptr::addr_of!((*_13));
_22 = (*_13) - (*_19);
(*_19) = _22 + _22;
(*_13) = !_22;
(*_13) = _22;
(*_13) = _4 as isize;
_22 = (*_13);
(*_13) = -_22;
(*_13) = _22 ^ _22;
RET = 171_u8 as f64;
Goto(bb4)
}
bb10 = {
_12 = false;
RET = _16 as f64;
_10 = _4;
_2 = _10;
_13 = core::ptr::addr_of!(_21);
(*_13) = (-20980306019368192920715750976394244352_i128) as isize;
(*_13) = -101_isize;
(*_13) = _8 as isize;
(*_13) = 108_isize << _3;
_21 = (-9223372036854775808_isize) << (*_15);
Goto(bb3)
}
bb11 = {
_12 = false;
_16 = 192888419272528315321665732916865396399_u128 - 123626365790233711937389518543225674130_u128;
_7 = _10;
_3 = _5 & _8;
_6 = _10;
_8 = _5 + _11;
_15 = &_8;
_2 = _10;
_4 = _7;
_1 = _2;
_4 = _1;
Goto(bb2)
}
bb12 = {
Return()
}
bb13 = {
Return()
}
bb14 = {
Return()
}
bb15 = {
(*_13) = _28 | _26;
_3 = (*_15);
(*_13) = -_37;
(*_13) = _29 ^ _26;
_15 = &_9;
_25 = _6 as u32;
(*_13) = _24 as isize;
(*_13) = _37 + _26;
_19 = core::ptr::addr_of!(_21);
(*_13) = _26 + _37;
_29 = (*_13);
_24 = _16;
(*_13) = !_26;
(*_13) = 0_usize as isize;
(*_13) = _29 >> _29;
Goto(bb16)
}
bb16 = {
_30 = _7;
(*_13) = (*_15) as isize;
_11 = (*_15) >> _26;
_29 = _28 & (*_13);
_1 = _6;
_25 = 4141131734_u32 * 3288888834_u32;
_11 = (*_15) - (*_15);
_9 = _3 & _5;
(*_13) = _17 as isize;
(*_13) = _37;
_31.0.0 = core::ptr::addr_of!(_16);
_19 = core::ptr::addr_of!(_22);
_8 = 16657065573268853536_usize as i32;
RET = -_34;
(*_19) = !(*_13);
Call(_28 = fn16(Move(_19), Move(_15), (*_19), Move(_13), (*_19), (*_19), _29, (*_19), (*_19), (*_13), Move(_31.0.0), RET), ReturnTo(bb17), UnwindUnreachable())
}
bb17 = {
_35 = !_37;
_8 = _5;
_31.0.0 = core::ptr::addr_of!(_24);
_15 = &_3;
_9 = (*_15) << _21;
_29 = _28 & _35;
Goto(bb18)
}
bb18 = {
_36 = (*_15);
Goto(bb19)
}
bb19 = {
_34 = RET + RET;
_29 = 122_i8 as isize;
_19 = core::ptr::addr_of!(_37);
(*_19) = _22 | _28;
(*_19) = _12 as isize;
_27 = _17;
_47 = _32 as isize;
(*_19) = _35;
_28 = (*_19) ^ (*_19);
_47 = (*_19);
(*_19) = -_22;
_33 = !3958940356916548557_u64;
(*_19) = _22 * _22;
_6 = _30;
(*_19) = -_47;
_31.0.1 = _30;
_31.0.1 = _7;
_13 = core::ptr::addr_of!((*_19));
_22 = (*_19) | (*_13);
(*_13) = _35 >> _11;
Goto(bb20)
}
bb20 = {
_39 = (-3690_i16);
(*_19) = _47 & _47;
_7 = _2;
(*_19) = -_21;
_42 = [_39,_39,_39,_39,_39,_39];
(*_19) = 8583347955674702578_i64 as isize;
(*_19) = _28;
_49.1 = !4995887773616983991_usize;
_47 = (*_19);
(*_19) = _22 + _47;
(*_19) = _4 as isize;
_49.0 = !_49.1;
_33 = !9238234634186592420_u64;
_19 = core::ptr::addr_of!(_35);
_45 = (*_15) & (*_15);
_41 = -_34;
(*_19) = _28;
_26 = (*_19);
_16 = _24 - _24;
(*_19) = _28 * _22;
_32 = !47531_u16;
_3 = -_9;
(*_19) = _26 << _47;
_8 = _32 as i32;
_9 = _45 | _3;
(*_19) = !_21;
Call((*_19) = core::intrinsics::bswap(_47), ReturnTo(bb21), UnwindUnreachable())
}
bb21 = {
_4 = _31.0.1;
_13 = core::ptr::addr_of!((*_19));
match _39 {
0 => bb20,
1 => bb22,
2 => bb23,
3 => bb24,
4 => bb25,
5 => bb26,
6 => bb27,
340282366920938463463374607431768207766 => bb29,
_ => bb28
}
}
bb22 = {
_39 = (-3690_i16);
(*_19) = _47 & _47;
_7 = _2;
(*_19) = -_21;
_42 = [_39,_39,_39,_39,_39,_39];
(*_19) = 8583347955674702578_i64 as isize;
(*_19) = _28;
_49.1 = !4995887773616983991_usize;
_47 = (*_19);
(*_19) = _22 + _47;
(*_19) = _4 as isize;
_49.0 = !_49.1;
_33 = !9238234634186592420_u64;
_19 = core::ptr::addr_of!(_35);
_45 = (*_15) & (*_15);
_41 = -_34;
(*_19) = _28;
_26 = (*_19);
_16 = _24 - _24;
(*_19) = _28 * _22;
_32 = !47531_u16;
_3 = -_9;
(*_19) = _26 << _47;
_8 = _32 as i32;
_9 = _45 | _3;
(*_19) = !_21;
Call((*_19) = core::intrinsics::bswap(_47), ReturnTo(bb21), UnwindUnreachable())
}
bb23 = {
_34 = RET + RET;
_29 = 122_i8 as isize;
_19 = core::ptr::addr_of!(_37);
(*_19) = _22 | _28;
(*_19) = _12 as isize;
_27 = _17;
_47 = _32 as isize;
(*_19) = _35;
_28 = (*_19) ^ (*_19);
_47 = (*_19);
(*_19) = -_22;
_33 = !3958940356916548557_u64;
(*_19) = _22 * _22;
_6 = _30;
(*_19) = -_47;
_31.0.1 = _30;
_31.0.1 = _7;
_13 = core::ptr::addr_of!((*_19));
_22 = (*_19) | (*_13);
(*_13) = _35 >> _11;
Goto(bb20)
}
bb24 = {
_36 = (*_15);
Goto(bb19)
}
bb25 = {
_35 = !_37;
_8 = _5;
_31.0.0 = core::ptr::addr_of!(_24);
_15 = &_3;
_9 = (*_15) << _21;
_29 = _28 & _35;
Goto(bb18)
}
bb26 = {
(*_13) = _22 - _22;
_24 = _16;
(*_13) = !_22;
(*_13) = 63948714871216485806260620312063208067_i128 as isize;
_1 = _4;
(*_13) = _22 * _22;
(*_13) = _22 >> (*_15);
_22 = !(*_13);
_8 = (*_15) ^ (*_15);
_22 = -(*_13);
_1 = _4;
_1 = _10;
_27 = RET as f32;
(*_13) = _17 as isize;
(*_13) = -_22;
(*_13) = -_22;
_8 = 184_u8 as i32;
Goto(bb6)
}
bb27 = {
(*_13) = _22 - _22;
_24 = _16;
(*_13) = !_22;
(*_13) = 63948714871216485806260620312063208067_i128 as isize;
_1 = _4;
(*_13) = _22 * _22;
(*_13) = _22 >> (*_15);
_22 = !(*_13);
_8 = (*_15) ^ (*_15);
_22 = -(*_13);
_1 = _4;
_1 = _10;
_27 = RET as f32;
(*_13) = _17 as isize;
(*_13) = -_22;
(*_13) = -_22;
_8 = 184_u8 as i32;
Goto(bb6)
}
bb28 = {
Return()
}
bb29 = {
_26 = _16 as isize;
_56 = (-18_i8) as i32;
_49.1 = _49.0 >> (*_19);
(*_19) = _47;
_27 = _17;
_11 = _9 * _9;
(*_19) = !_47;
_39 = -15407_i16;
RET = _34 * _41;
_15 = &_56;
_41 = RET - RET;
_55 = [_12,_12,_12];
_3 = _11;
(*_19) = 110_u8 as isize;
Call((*_19) = core::intrinsics::bswap(_21), ReturnTo(bb30), UnwindUnreachable())
}
bb30 = {
_42 = [_39,_39,_39,_39,_39,_39];
_51 = _47 + _28;
_5 = _11 ^ (*_15);
_53 = (*_19) - _22;
_19 = Move(_13);
_53 = _51 ^ _21;
_40 = _11 >= _11;
_55 = [_40,_40,_40];
_49.0 = !_49.1;
_49.0 = !_49.1;
Goto(bb31)
}
bb31 = {
_36 = _2 as i32;
_24 = _16 + _16;
_56 = _5 + _5;
_35 = _53;
_50 = _16 as i32;
_60.0 = _49.1 + _49.0;
RET = (-80_i8) as f64;
_61 = (-91951143631886497776545698542414614026_i128) * (-17916316544946570003046912273718312406_i128);
_2 = _1;
_13 = core::ptr::addr_of!(_26);
(*_13) = _53;
Goto(bb32)
}
bb32 = {
RET = -_41;
_29 = (*_13) * (*_13);
_40 = (*_13) == (*_13);
_60 = _49;
_15 = &_3;
Goto(bb33)
}
bb33 = {
_62 = !145_u8;
_9 = !_5;
_55 = [_40,_40,_40];
_4 = _31.0.1;
_30 = _7;
_59 = _27 * _27;
_17 = _27;
_29 = !(*_13);
_31.0.0 = core::ptr::addr_of!(_16);
_64 = _16 | _16;
(*_13) = _53;
_19 = core::ptr::addr_of!((*_13));
(*_13) = _22 - _51;
(*_13) = _60.0 as isize;
_9 = -_3;
_39 = -24984_i16;
(*_13) = _62 as isize;
_42 = [_39,_39,_39,_39,_39,_39];
Goto(bb34)
}
bb34 = {
_16 = _62 as u128;
_26 = _64 as isize;
_34 = _41 + RET;
_56 = _45;
_40 = !_12;
_31.0.1 = _7;
_22 = -_29;
(*_13) = _21 + _35;
_27 = -_59;
_49 = (_60.0, _60.0);
_54 = [_40,_12,_12];
_3 = _11 >> (*_13);
_30 = _2;
_60 = _49;
_53 = (*_13) << _51;
_6 = _30;
_9 = _3;
_49 = _60;
_54 = [_40,_12,_12];
_56 = _3 << (*_13);
_64 = _16 & _24;
_67 = &mut _29;
_7 = _1;
Goto(bb35)
}
bb35 = {
(*_67) = _25 as isize;
_68 = (*_13);
_33 = 11726947117449702910_u64 << (*_13);
_55 = [_12,_40,_12];
Goto(bb36)
}
bb36 = {
_64 = _24 + _16;
(*_13) = !_21;
(*_67) = _51;
_66 = _27;
(*_13) = (*_67) >> _33;
_54 = [_12,_12,_12];
_64 = _24;
_49.1 = _49.0;
_49 = (_60.1, _60.1);
_26 = _47;
_50 = -_5;
_49.0 = _60.1 | _60.0;
_66 = _61 as f32;
(*_13) = (*_67) - _53;
_63 = _31.0.1;
_7 = _1;
(*_13) = (*_67) << _9;
_47 = _35 << (*_13);
(*_67) = (-45_i8) as isize;
(*_67) = _24 as isize;
_51 = (*_13) & _68;
(*_67) = (*_13) & (*_13);
Goto(bb37)
}
bb37 = {
(*_67) = (*_13);
_41 = -_34;
(*_13) = _28;
_81 = _7;
_49 = _60;
_45 = _56 | _9;
_67 = &mut _47;
_77 = &_12;
_81 = _30;
_83.1 = _64 ^ _24;
(*_13) = !(*_67);
_73 = _83.1 as i128;
RET = _34 + _34;
_82 = core::ptr::addr_of_mut!(_24);
Goto(bb38)
}
bb38 = {
Call(_84 = dump_var(Move(_62), Move(_33), Move(_60), Move(_26)), ReturnTo(bb39), UnwindUnreachable())
}
bb39 = {
Call(_84 = dump_var(Move(_81), Move(_10), Move(_56), Move(_25)), ReturnTo(bb40), UnwindUnreachable())
}
bb40 = {
Call(_84 = dump_var(Move(_12), Move(_63), Move(_22), Move(_35)), ReturnTo(bb41), UnwindUnreachable())
}
bb41 = {
Call(_84 = dump_var(Move(_24), Move(_68), Move(_29), Move(_1)), ReturnTo(bb42), UnwindUnreachable())
}
bb42 = {
Call(_84 = dump_var(Move(_36), Move(_2), Move(_9), Move(_11)), ReturnTo(bb43), UnwindUnreachable())
}
bb43 = {
Call(_84 = dump_var(Move(_53), Move(_3), Move(_30), _85), ReturnTo(bb44), UnwindUnreachable())
}
bb44 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn16(mut _1: *const isize,mut _2: &'static i32,mut _3: isize,mut _4: *const isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: isize,mut _10: isize,mut _11: *const u128,mut _12: f64) -> isize {
mir! {
type RET = isize;
let _13: f64;
let _14: Adt41;
let _15: *mut [usize; 1];
let _16: char;
let _17: isize;
let _18: ();
let _19: ();
{
_10 = true as isize;
RET = _9 - _5;
_13 = _12;
_6 = _8;
_9 = _3 ^ RET;
_12 = _13 + _13;
_10 = RET;
_9 = _3;
_6 = (-17553_i16) as isize;
_8 = RET ^ _10;
_5 = _8 + _3;
_1 = core::ptr::addr_of!(_8);
(*_1) = (-18604_i16) as isize;
RET = '\u{fcdf0}' as isize;
_5 = -_3;
Call((*_1) = fn17(Move(_4), _9, Move(_1), Move(_11), _7), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_16 = '\u{98eab}';
_10 = _7 >> _8;
_10 = !_8;
_13 = _12 + _12;
_4 = core::ptr::addr_of!(_3);
(*_4) = -_7;
(*_4) = _9;
(*_4) = _10;
Call((*_4) = fn18(Move(_4), RET, RET, _7, _6, _10, _10, _5, _8), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
_8 = _9;
_1 = core::ptr::addr_of!(RET);
(*_1) = _6 & _3;
(*_1) = _13 as isize;
(*_1) = 0_usize as isize;
_7 = 3235698054393197854_i64 as isize;
(*_1) = 3767405883949505219_i64 as isize;
(*_1) = _5 - _8;
RET = _10;
(*_1) = _16 as isize;
(*_1) = _10;
(*_1) = _5;
_4 = core::ptr::addr_of!(_7);
(*_4) = -(*_1);
_6 = _5;
(*_1) = _7 ^ (*_4);
(*_1) = !(*_4);
Goto(bb3)
}
bb3 = {
Call(_18 = dump_var(Move(_7), Move(_10), Move(_6), Move(_3)), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn17(mut _1: *const isize,mut _2: isize,mut _3: *const isize,mut _4: *const u128,mut _5: isize) -> isize {
mir! {
type RET = isize;
let _6: &'static [i32; 4];
let _7: &'static mut [i128; 7];
let _8: *const u128;
let _9: u8;
let _10: &'static i32;
let _11: (Adt18, [usize; 1]);
let _12: f64;
let _13: (usize, usize);
let _14: Adt41;
let _15: *const u128;
let _16: [i64; 8];
let _17: (Adt69, Adt56, Adt58);
let _18: (Adt18, [usize; 1]);
let _19: u16;
let _20: char;
let _21: u128;
let _22: isize;
let _23: f32;
let _24: &'static [usize; 1];
let _25: u16;
let _26: f32;
let _27: ((*const u128, char),);
let _28: u8;
let _29: i64;
let _30: isize;
let _31: &'static [i32; 4];
let _32: [u64; 6];
let _33: *mut ([i32; 4],);
let _34: u8;
let _35: *mut u128;
let _36: i32;
let _37: [u64; 6];
let _38: isize;
let _39: bool;
let _40: ();
let _41: ();
{
_2 = _5 - _5;
RET = _5;
_1 = core::ptr::addr_of!(_5);
(*_1) = '\u{30557}' as isize;
(*_1) = -_2;
_3 = core::ptr::addr_of!(_2);
(*_1) = (*_3) - (*_3);
(*_1) = '\u{1069bd}' as isize;
(*_3) = -(*_1);
(*_3) = 2861643717_u32 as isize;
(*_3) = (-1558508210094226024_i64) as isize;
(*_1) = RET * RET;
(*_3) = (*_1);
(*_1) = (*_3) >> (*_3);
_5 = (*_3);
(*_1) = -(*_3);
Goto(bb1)
}
bb1 = {
(*_3) = (*_1) + (*_1);
(*_3) = _5;
_5 = 6215409570344612340_i64 as isize;
(*_3) = (*_1);
(*_1) = -(*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) ^ (*_3);
(*_1) = (*_3) ^ (*_3);
(*_3) = (*_1) * RET;
(*_3) = !(*_1);
(*_3) = 13952_u16 as isize;
(*_3) = -(*_1);
(*_1) = !RET;
(*_3) = (*_1) * (*_1);
_2 = (*_1);
_13.0 = 17902519807614622102_usize;
(*_3) = (*_1) << (*_1);
(*_3) = (*_1) >> (*_1);
(*_1) = (-1936590694_i32) as isize;
(*_3) = !(*_1);
RET = !(*_1);
(*_1) = (*_3) << (*_3);
(*_3) = (*_1);
(*_3) = 337489972777327421670691376292342323998_u128 as isize;
(*_3) = (*_1);
(*_3) = 198_u8 as isize;
_5 = (*_3) + (*_3);
match _13.0 {
0 => bb2,
1 => bb3,
17902519807614622102 => bb5,
_ => bb4
}
}
bb2 = {
Return()
}
bb3 = {
Return()
}
bb4 = {
Return()
}
bb5 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb6 = {
Return()
}
bb7 = {
_18.1 = [_13.0];
_17.2 = Adt58::Variant1 { fld0: (-197523424_i32),fld1: _17.1.fld4.1,fld2: Move(_4) };
_17.1.fld5 = !Field::<i128>(Variant(_17.2, 1), 1);
_11.0 = Adt18::Variant0 { fld0: _17.1.fld3,fld1: _17.0.fld6.0,fld2: (*_1) };
_8 = Move(Field::<*const u128>(Variant(_17.2, 1), 2));
_15 = Move(_8);
_17.0.fld2 = -(*_1);
_17.1.fld4.0 = (-32755_i16) as f64;
_17.0.fld6.1 = Adt18::Variant0 { fld0: _17.1.fld3,fld1: Field::<char>(Variant(_11.0, 0), 1),fld2: (*_1) };
_17.1.fld0 = !true;
_17.1.fld5 = !Field::<i128>(Variant(_17.2, 1), 1);
_17.0.fld4 = Adt58::Variant0 { fld0: _13 };
_2 = Field::<isize>(Variant(_11.0, 0), 2);
(*_1) = _2;
place!(Field::<char>(Variant(_17.0.fld6.1, 0), 1)) = Field::<char>(Variant(_11.0, 0), 1);
_11.1 = _18.1;
_15 = core::ptr::addr_of!(_21);
_17.0.fld3 = _17.0.fld6.0 as i8;
(*_15) = 296885164808784688264492778195174206497_u128 ^ 82573802283035890584382570401448125871_u128;
_17.0.fld5 = (-30551_i16) as f64;
(*_1) = RET & Field::<isize>(Variant(_17.0.fld6.1, 0), 2);
_18.0 = Adt18::Variant3 { fld0: _17.1.fld0,fld1: _17.0.fld6.0,fld2: (*_1),fld3: _17.1.fld4.0,fld4: 2826787469_u32,fld5: 7518213900879831971_u64,fld6: 201_u8,fld7: _17.1.fld4.1 };
_17.2 = Adt58::Variant0 { fld0: _13 };
place!(Field::<char>(Variant(_18.0, 3), 1)) = Field::<char>(Variant(_11.0, 0), 1);
match Field::<(usize, usize)>(Variant(_17.2, 0), 0).1 {
0 => bb8,
17902519807614622102 => bb10,
_ => bb9
}
}
bb8 = {
Return()
}
bb9 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb10 = {
(*_15) = 332799504621491332754067737223230654079_u128 * 134874200519395531336702955997203639661_u128;
_17.1.fld0 = (*_1) < (*_1);
place!(Field::<u64>(Variant(_18.0, 3), 5)) = 4955266448098432596_u64;
place!(Field::<(usize, usize)>(Variant(_17.2, 0), 0)).0 = !Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).0;
place!(Field::<char>(Variant(_11.0, 0), 1)) = Field::<char>(Variant(_17.0.fld6.1, 0), 1);
match Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).1 {
17902519807614622102 => bb12,
_ => bb11
}
}
bb11 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb12 = {
_24 = &_18.1;
(*_1) = RET << Field::<isize>(Variant(_18.0, 3), 2);
_23 = _17.1.fld5 as f32;
_25 = (*_15) as u16;
place!(Field::<isize>(Variant(_11.0, 0), 2)) = _25 as isize;
_17.1.fld5 = Field::<i128>(Variant(_18.0, 3), 7);
(*_1) = _17.0.fld2;
_17.0.fld4 = Move(_17.2);
RET = !(*_1);
(*_1) = Field::<isize>(Variant(_11.0, 0), 2) << (*_15);
place!(Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0)).0 = Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).1;
_29 = 6175727585377676185_i64;
(*_15) = !299409514722074799063140719531257588020_u128;
_17.0.fld0 = _17.1.fld0;
_17.0.fld4 = Adt58::Variant0 { fld0: _13 };
(*_1) = !Field::<isize>(Variant(_18.0, 3), 2);
(*_1) = !Field::<isize>(Variant(_18.0, 3), 2);
match Field::<u64>(Variant(_18.0, 3), 5) {
0 => bb1,
1 => bb2,
2 => bb8,
3 => bb11,
4 => bb10,
5 => bb6,
6 => bb7,
4955266448098432596 => bb14,
_ => bb13
}
}
bb13 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb14 = {
place!(Field::<isize>(Variant(_17.0.fld6.1, 0), 2)) = -(*_1);
_17.0.fld6 = (Field::<char>(Variant(_11.0, 0), 1), _11.0);
_3 = core::ptr::addr_of!(_2);
(*_3) = _5 + (*_1);
Goto(bb15)
}
bb15 = {
_17.0.fld4 = Adt58::Variant0 { fld0: _13 };
_17.1.fld4 = (_17.0.fld5, _17.1.fld5, _17.0.fld6.1);
place!(Field::<char>(Variant(_18.0, 3), 1)) = _17.0.fld6.0;
_29 = Field::<i8>(Variant(_17.0.fld6.1, 0), 0) as i64;
_17.1.fld1 = _29 & _29;
_18 = (_11.0, _11.1);
_11.1 = [_13.1];
_17.1.fld2 = [_17.1.fld1,_17.1.fld1,_29,_17.1.fld1,_29,_29,_29,_29];
match _13.1 {
0 => bb16,
1 => bb17,
2 => bb18,
3 => bb19,
4 => bb20,
5 => bb21,
17902519807614622102 => bb23,
_ => bb22
}
}
bb16 = {
(*_3) = (*_1) + (*_1);
(*_3) = _5;
_5 = 6215409570344612340_i64 as isize;
(*_3) = (*_1);
(*_1) = -(*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) ^ (*_3);
(*_1) = (*_3) ^ (*_3);
(*_3) = (*_1) * RET;
(*_3) = !(*_1);
(*_3) = 13952_u16 as isize;
(*_3) = -(*_1);
(*_1) = !RET;
(*_3) = (*_1) * (*_1);
_2 = (*_1);
_13.0 = 17902519807614622102_usize;
(*_3) = (*_1) << (*_1);
(*_3) = (*_1) >> (*_1);
(*_1) = (-1936590694_i32) as isize;
(*_3) = !(*_1);
RET = !(*_1);
(*_1) = (*_3) << (*_3);
(*_3) = (*_1);
(*_3) = 337489972777327421670691376292342323998_u128 as isize;
(*_3) = (*_1);
(*_3) = 198_u8 as isize;
_5 = (*_3) + (*_3);
match _13.0 {
0 => bb2,
1 => bb3,
17902519807614622102 => bb5,
_ => bb4
}
}
bb17 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb18 = {
Return()
}
bb19 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb20 = {
(*_15) = 332799504621491332754067737223230654079_u128 * 134874200519395531336702955997203639661_u128;
_17.1.fld0 = (*_1) < (*_1);
place!(Field::<u64>(Variant(_18.0, 3), 5)) = 4955266448098432596_u64;
place!(Field::<(usize, usize)>(Variant(_17.2, 0), 0)).0 = !Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).0;
place!(Field::<char>(Variant(_11.0, 0), 1)) = Field::<char>(Variant(_17.0.fld6.1, 0), 1);
match Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).1 {
17902519807614622102 => bb12,
_ => bb11
}
}
bb21 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb22 = {
Return()
}
bb23 = {
place!(Field::<isize>(Variant(_11.0, 0), 2)) = 27_u8 as isize;
_17.0.fld5 = _17.1.fld4.0 * _17.1.fld4.0;
_17.0.fld7 = Adt18::Variant3 { fld0: _17.1.fld0,fld1: Field::<char>(Variant(_11.0, 0), 1),fld2: (*_1),fld3: _17.0.fld5,fld4: 3745066365_u32,fld5: 9189745087284437092_u64,fld6: 225_u8,fld7: _17.1.fld5 };
_9 = 245_u8;
(*_3) = (*_1) - (*_1);
_4 = core::ptr::addr_of!((*_15));
match _13.1 {
0 => bb20,
1 => bb8,
2 => bb24,
3 => bb25,
17902519807614622102 => bb27,
_ => bb26
}
}
bb24 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb25 = {
Return()
}
bb26 = {
(*_3) = !(*_1);
RET = (*_3);
(*_3) = (*_1) << (*_1);
(*_1) = (*_3) >> (*_3);
_13.1 = _13.0;
(*_1) = (*_3);
(*_1) = (*_3) + (*_3);
_3 = core::ptr::addr_of!((*_1));
(*_3) = RET | _2;
(*_1) = 1535958967301564809_i64 as isize;
_17.1.fld3 = 66_i8 << (*_1);
_13.0 = _17.1.fld3 as usize;
_17.1.fld4.1 = true as i128;
_17.0.fld3 = (*_1) as i8;
_17.0.fld6.0 = '\u{cb3de}';
match _13.1 {
17902519807614622102 => bb7,
_ => bb6
}
}
bb27 = {
(*_4) = _17.0.fld3 as u128;
(*_4) = !195327371125416892440846054068277890785_u128;
(*_15) = 258795797106869182837199820463249707976_u128;
place!(Field::<bool>(Variant(_17.0.fld7, 3), 0)) = Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).0 <= Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).0;
_8 = core::ptr::addr_of!((*_15));
(*_8) = 12744005663260697335075878586557283831_u128 | 248171218982423283181646883810979902274_u128;
_12 = (*_15) as f64;
_17.0.fld7 = _17.0.fld6.1;
place!(Field::<isize>(Variant(_11.0, 0), 2)) = (-143079147_i32) as isize;
_16 = _17.1.fld2;
(*_1) = Field::<isize>(Variant(_11.0, 0), 2) + (*_3);
(*_1) = (*_3);
_18.0 = _17.0.fld7;
(*_8) = !105420573458734961864458757800606143643_u128;
(*_3) = (*_1);
(*_8) = 233893542180220362404452517740199865565_u128 + 93552349079242461212847611418383557512_u128;
_2 = (*_1) | (*_1);
(*_1) = _17.0.fld3 as isize;
_17.0.fld6 = (Field::<char>(Variant(_18.0, 0), 1), _18.0);
(*_1) = (*_3) << (*_3);
place!(Field::<i8>(Variant(_18.0, 0), 0)) = Field::<i8>(Variant(_17.0.fld6.1, 0), 0);
(*_15) = 327968219789108010346796679173476328500_u128 | 282992948187718088203117107679737281842_u128;
match Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).1 {
17902519807614622102 => bb29,
_ => bb28
}
}
bb28 = {
Return()
}
bb29 = {
_17.0.fld3 = !_17.1.fld3;
RET = -(*_1);
(*_3) = (*_1) >> Field::<isize>(Variant(_17.0.fld7, 0), 2);
(*_15) = 191590102071846397913459031211762768300_u128 >> (*_1);
_18.1 = _11.1;
_25 = !16325_u16;
_17.0.fld3 = Field::<i8>(Variant(_11.0, 0), 0) | Field::<i8>(Variant(_11.0, 0), 0);
(*_3) = _5 >> (*_1);
_21 = !270100372181028973857001887359473122283_u128;
_36 = -891493842_i32;
_13.0 = Field::<(usize, usize)>(Variant(_17.0.fld4, 0), 0).0;
_26 = _23 - _23;
_5 = (*_3) ^ (*_3);
(*_1) = RET;
_17.2 = Move(_17.0.fld4);
Goto(bb30)
}
bb30 = {
Call(_40 = dump_var(Move(_16), Move(_36), Move(_29), Move(_25)), ReturnTo(bb31), UnwindUnreachable())
}
bb31 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
fn fn18(mut _1: *const isize,mut _2: isize,mut _3: isize,mut _4: isize,mut _5: isize,mut _6: isize,mut _7: isize,mut _8: isize,mut _9: isize) -> isize {
mir! {
type RET = isize;
let _10: isize;
let _11: [i64; 8];
let _12: f64;
let _13: (usize, usize);
let _14: &'static mut u128;
let _15: i32;
let _16: Adt18;
let _17: f32;
let _18: f32;
let _19: &'static mut (Adt18, [usize; 1]);
let _20: &'static *mut f32;
let _21: f64;
let _22: ();
let _23: ();
{
_8 = 66_u8 as isize;
_5 = _9;
_9 = _7;
Goto(bb1)
}
bb1 = {
_1 = core::ptr::addr_of!(_7);
(*_1) = 13181626505390817522325090692882976619_u128 as isize;
(*_1) = _5 & _9;
(*_1) = _5 << _9;
_7 = 187552552052119078991804683484419587251_u128 as isize;
_10 = _6;
(*_1) = _5;
(*_1) = false as isize;
_1 = core::ptr::addr_of!(_4);
_13.0 = 6104_i16 as usize;
_13 = (14611445036862633975_usize, 14496817915280792562_usize);
(*_1) = _10;
(*_1) = _6 << _6;
(*_1) = _10 & _9;
(*_1) = _6 << _6;
(*_1) = _10;
_13.1 = !_13.0;
Call((*_1) = core::intrinsics::bswap(_5), ReturnTo(bb2), UnwindUnreachable())
}
bb2 = {
(*_1) = _6 * _5;
_1 = core::ptr::addr_of!((*_1));
(*_1) = !_5;
_13.0 = 1732201267_u32 as usize;
_11 = [(-5529224697325899300_i64),(-3093904534079035518_i64),(-1846316523553299639_i64),(-863497076434055171_i64),(-7536104186934891495_i64),(-6228016537029524629_i64),(-1035917457449862369_i64),66985752480255498_i64];
_15 = (-1484294671_i32);
match _15 {
0 => bb3,
1 => bb4,
2 => bb5,
340282366920938463463374607430283916785 => bb7,
_ => bb6
}
}
bb3 = {
_1 = core::ptr::addr_of!(_7);
(*_1) = 13181626505390817522325090692882976619_u128 as isize;
(*_1) = _5 & _9;
(*_1) = _5 << _9;
_7 = 187552552052119078991804683484419587251_u128 as isize;
_10 = _6;
(*_1) = _5;
(*_1) = false as isize;
_1 = core::ptr::addr_of!(_4);
_13.0 = 6104_i16 as usize;
_13 = (14611445036862633975_usize, 14496817915280792562_usize);
(*_1) = _10;
(*_1) = _6 << _6;
(*_1) = _10 & _9;
(*_1) = _6 << _6;
(*_1) = _10;
_13.1 = !_13.0;
Call((*_1) = core::intrinsics::bswap(_5), ReturnTo(bb2), UnwindUnreachable())
}
bb4 = {
Return()
}
bb5 = {
Return()
}
bb6 = {
Return()
}
bb7 = {
(*_1) = -_6;
(*_1) = !_6;
(*_1) = _9;
(*_1) = '\u{e11b}' as isize;
(*_1) = -_5;
_12 = 16192942426662454037_u64 as f64;
(*_1) = _6;
(*_1) = _13.0 as isize;
_2 = _5;
(*_1) = 171_i16 as isize;
(*_1) = _5 | _6;
(*_1) = '\u{e88d2}' as isize;
_2 = _5;
(*_1) = -_6;
Call(_7 = core::intrinsics::bswap((*_1)), ReturnTo(bb8), UnwindUnreachable())
}
bb8 = {
(*_1) = 26_i8 as isize;
_7 = _10 & _9;
(*_1) = _5 << _6;
(*_1) = _10;
_11 = [(-8617182399493609537_i64),4912754595130009295_i64,2027125577465775955_i64,(-1890285332379830755_i64),6223917385298521548_i64,(-4677686961220511191_i64),2203243621266227965_i64,3304767822477101286_i64];
(*_1) = _10 + _9;
(*_1) = _5;
(*_1) = _7 + _2;
Call(_18 = fn19(Move(_1), (*_1), (*_1)), ReturnTo(bb9), UnwindUnreachable())
}
bb9 = {
_12 = _15 as f64;
RET = -_6;
_10 = _2;
_17 = -_18;
Goto(bb10)
}
bb10 = {
Call(_22 = dump_var(Move(_6), Move(_2), Move(_4), Move(_5)), ReturnTo(bb11), UnwindUnreachable())
}
bb11 = {
Call(_22 = dump_var(Move(_13), Move(_10), _23, _23), ReturnTo(bb12), UnwindUnreachable())
}
bb12 = {
Return()
}

}
}
#[custom_mir(dialect = "runtime", phase = "initial")]
pub fn fn19(mut _1: *const isize,mut _2: isize,mut _3: isize) -> f32 {
mir! {
type RET = f32;
let _4: u16;
let _5: *const isize;
let _6: (Adt18, [usize; 1]);
let _7: bool;
let _8: bool;
let _9: f64;
let _10: usize;
let _11: i8;
let _12: i64;
let _13: *mut ([i32; 4],);
let _14: f32;
let _15: *mut [i128; 7];
let _16: *mut [i128; 7];
let _17: &'static [usize; 1];
let _18: isize;
let _19: bool;
let _20: isize;
let _21: i128;
let _22: u128;
let _23: &'static mut Adt37;
let _24: u32;
let _25: char;
let _26: &'static mut [i128; 7];
let _27: f32;
let _28: ();
let _29: ();
{
RET = 43110_u16 as f32;
RET = 184014785386274533504337856758448165026_u128 as f32;
_1 = core::ptr::addr_of!(_2);
_2 = _3 ^ _3;
Call((*_1) = core::intrinsics::bswap(_3), ReturnTo(bb1), UnwindUnreachable())
}
bb1 = {
_3 = 51659_u16 as isize;
(*_1) = _3 >> _3;
(*_1) = 12327035864091563197_u64 as isize;
(*_1) = _3 | _3;
(*_1) = -_3;
(*_1) = (-140816555_i32) as isize;
_1 = core::ptr::addr_of!((*_1));
(*_1) = _3 >> _3;
(*_1) = !_3;
(*_1) = 4149643847_u32 as isize;
(*_1) = _3;
(*_1) = _3 >> _3;
_6.0 = Adt18::Variant1 { fld0: 46_u8,fld1: RET };
Goto(bb2)
}
bb2 = {
(*_1) = _3 >> _3;
(*_1) = _3;
_1 = core::ptr::addr_of!((*_1));
_6.1 = [16315069608733238949_usize];
_4 = 58092_u16 + 19311_u16;
(*_1) = _3 | _3;
_8 = false | false;
(*_1) = -_3;
Goto(bb3)
}
bb3 = {
_6.0 = Adt18::Variant1 { fld0: 60_u8,fld1: RET };
place!(Field::<u8>(Variant(_6.0, 1), 0)) = !247_u8;
_2 = _3 - _3;
(*_1) = _3 | _3;
(*_1) = _3 ^ _3;
_9 = 9227665988118948671_u64 as f64;
(*_1) = !_3;
(*_1) = _3 << Field::<u8>(Variant(_6.0, 1), 0);
(*_1) = _3 ^ _3;
_5 = core::ptr::addr_of!((*_1));
RET = -Field::<f32>(Variant(_6.0, 1), 1);
(*_5) = _3 << Field::<u8>(Variant(_6.0, 1), 0);
_5 = Move(_1);
_3 = _2 + _2;
_3 = _2 ^ _2;
RET = 51_i8 as f32;
_9 = Field::<u8>(Variant(_6.0, 1), 0) as f64;
_8 = _3 > _3;
Call(_12 = core::intrinsics::transmute(_3), ReturnTo(bb4), UnwindUnreachable())
}
bb4 = {
RET = _9 as f32;
_8 = false;
RET = Field::<f32>(Variant(_6.0, 1), 1) * Field::<f32>(Variant(_6.0, 1), 1);
RET = Field::<f32>(Variant(_6.0, 1), 1) * Field::<f32>(Variant(_6.0, 1), 1);
RET = Field::<f32>(Variant(_6.0, 1), 1) - Field::<f32>(Variant(_6.0, 1), 1);
_4 = !50008_u16;
_6.0 = Adt18::Variant3 { fld0: _8,fld1: '\u{106e6e}',fld2: _2,fld3: _9,fld4: 1629495908_u32,fld5: 13643078130024861295_u64,fld6: 228_u8,fld7: 146567244052286696494801703088262701671_i128 };
_12 = 4627926429589530839_i64;
_7 = Field::<isize>(Variant(_6.0, 3), 2) < Field::<isize>(Variant(_6.0, 3), 2);
place!(Field::<char>(Variant(_6.0, 3), 1)) = '\u{6a6b}';
_2 = -_3;
_4 = 41074_u16;
_11 = _3 as i8;
place!(Field::<u8>(Variant(_6.0, 3), 6)) = !68_u8;
_3 = _7 as isize;
place!(Field::<i128>(Variant(_6.0, 3), 7)) = Field::<f64>(Variant(_6.0, 3), 3) as i128;
_12 = 5_usize as i64;
_4 = 6934_u16 << Field::<i128>(Variant(_6.0, 3), 7);
_9 = Field::<f64>(Variant(_6.0, 3), 3) + Field::<f64>(Variant(_6.0, 3), 3);
_10 = 28500_i16 as usize;
Goto(bb5)
}
bb5 = {
_6.0 = Adt18::Variant0 { fld0: _11,fld1: '\u{ed99d}',fld2: _2 };
place!(Field::<char>(Variant(_6.0, 0), 1)) = '\u{c7790}';
_8 = _7;
place!(Field::<i8>(Variant(_6.0, 0), 0)) = _11 | _11;
_8 = _7;
_1 = core::ptr::addr_of!(_2);
_7 = _8;
_14 = (-8997641957319803378184347502380367742_i128) as f32;
(*_1) = !Field::<isize>(Variant(_6.0, 0), 2);
(*_1) = _3;
RET = _12 as f32;
(*_1) = _3 ^ _3;
Call((*_1) = core::intrinsics::bswap(Field::<isize>(Variant(_6.0, 0), 2)), ReturnTo(bb6), UnwindUnreachable())
}
bb6 = {
_12 = (-5839305569678417052_i64);
_5 = core::ptr::addr_of!((*_1));
_1 = core::ptr::addr_of!((*_5));
(*_5) = 884468553_i32 as isize;
match _12 {
0 => bb1,
1 => bb4,
2 => bb5,
3 => bb7,
4 => bb8,
5 => bb9,
6 => bb10,
340282366920938463457535301862089794404 => bb12,
_ => bb11
}
}
bb7 = {
_6.0 = Adt18::Variant0 { fld0: _11,fld1: '\u{ed99d}',fld2: _2 };
place!(Field::<char>(Variant(_6.0, 0), 1)) = '\u{c7790}';
_8 = _7;
place!(Field::<i8>(Variant(_6.0, 0), 0)) = _11 | _11;
_8 = _7;
_1 = core::ptr::addr_of!(_2);
_7 = _8;
_14 = (-8997641957319803378184347502380367742_i128) as f32;
(*_1) = !Field::<isize>(Variant(_6.0, 0), 2);
(*_1) = _3;
RET = _12 as f32;
(*_1) = _3 ^ _3;
Call((*_1) = core::intrinsics::bswap(Field::<isize>(Variant(_6.0, 0), 2)), ReturnTo(bb6), UnwindUnreachable())
}
bb8 = {
RET = _9 as f32;
_8 = false;
RET = Field::<f32>(Variant(_6.0, 1), 1) * Field::<f32>(Variant(_6.0, 1), 1);
RET = Field::<f32>(Variant(_6.0, 1), 1) * Field::<f32>(Variant(_6.0, 1), 1);
RET = Field::<f32>(Variant(_6.0, 1), 1) - Field::<f32>(Variant(_6.0, 1), 1);
_4 = !50008_u16;
_6.0 = Adt18::Variant3 { fld0: _8,fld1: '\u{106e6e}',fld2: _2,fld3: _9,fld4: 1629495908_u32,fld5: 13643078130024861295_u64,fld6: 228_u8,fld7: 146567244052286696494801703088262701671_i128 };
_12 = 4627926429589530839_i64;
_7 = Field::<isize>(Variant(_6.0, 3), 2) < Field::<isize>(Variant(_6.0, 3), 2);
place!(Field::<char>(Variant(_6.0, 3), 1)) = '\u{6a6b}';
_2 = -_3;
_4 = 41074_u16;
_11 = _3 as i8;
place!(Field::<u8>(Variant(_6.0, 3), 6)) = !68_u8;
_3 = _7 as isize;
place!(Field::<i128>(Variant(_6.0, 3), 7)) = Field::<f64>(Variant(_6.0, 3), 3) as i128;
_12 = 5_usize as i64;
_4 = 6934_u16 << Field::<i128>(Variant(_6.0, 3), 7);
_9 = Field::<f64>(Variant(_6.0, 3), 3) + Field::<f64>(Variant(_6.0, 3), 3);
_10 = 28500_i16 as usize;
Goto(bb5)
}
bb9 = {
_6.0 = Adt18::Variant1 { fld0: 60_u8,fld1: RET };
place!(Field::<u8>(Variant(_6.0, 1), 0)) = !247_u8;
_2 = _3 - _3;
(*_1) = _3 | _3;
(*_1) = _3 ^ _3;
_9 = 9227665988118948671_u64 as f64;
(*_1) = !_3;
(*_1) = _3 << Field::<u8>(Variant(_6.0, 1), 0);
(*_1) = _3 ^ _3;
_5 = core::ptr::addr_of!((*_1));
RET = -Field::<f32>(Variant(_6.0, 1), 1);
(*_5) = _3 << Field::<u8>(Variant(_6.0, 1), 0);
_5 = Move(_1);
_3 = _2 + _2;
_3 = _2 ^ _2;
RET = 51_i8 as f32;
_9 = Field::<u8>(Variant(_6.0, 1), 0) as f64;
_8 = _3 > _3;
Call(_12 = core::intrinsics::transmute(_3), ReturnTo(bb4), UnwindUnreachable())
}
bb10 = {
(*_1) = _3 >> _3;
(*_1) = _3;
_1 = core::ptr::addr_of!((*_1));
_6.1 = [16315069608733238949_usize];
_4 = 58092_u16 + 19311_u16;
(*_1) = _3 | _3;
_8 = false | false;
(*_1) = -_3;
Goto(bb3)
}
bb11 = {
_3 = 51659_u16 as isize;
(*_1) = _3 >> _3;
(*_1) = 12327035864091563197_u64 as isize;
(*_1) = _3 | _3;
(*_1) = -_3;
(*_1) = (-140816555_i32) as isize;
_1 = core::ptr::addr_of!((*_1));
(*_1) = _3 >> _3;
(*_1) = !_3;
(*_1) = 4149643847_u32 as isize;
(*_1) = _3;
(*_1) = _3 >> _3;
_6.0 = Adt18::Variant1 { fld0: 46_u8,fld1: RET };
Goto(bb2)
}
bb12 = {
(*_5) = -Field::<isize>(Variant(_6.0, 0), 2);
_5 = core::ptr::addr_of!((*_5));
(*_5) = _9 as isize;
(*_5) = !Field::<isize>(Variant(_6.0, 0), 2);
(*_5) = Field::<isize>(Variant(_6.0, 0), 2);
(*_5) = (-90841147917453012725024752654300844892_i128) as isize;
(*_5) = _3;
_4 = 34004_u16 - 44442_u16;
(*_5) = Field::<isize>(Variant(_6.0, 0), 2) | Field::<isize>(Variant(_6.0, 0), 2);
(*_5) = 60116731072817512426546677820762369255_u128 as isize;
_6.0 = Adt18::Variant2 { fld0: _4,fld1: '\u{29a43}',fld2: 2807195432_u32 };
(*_5) = _3;
_20 = (*_5) << (*_5);
RET = (*_5) as f32;
_19 = !_8;
(*_5) = _9 as isize;
Goto(bb13)
}
bb13 = {
_21 = 26114728215405331893090109948244290760_i128 * 112138168513595820167272555152630125086_i128;
place!(Field::<char>(Variant(_6.0, 2), 1)) = '\u{b1b23}';
_17 = &_6.1;
_18 = (*_5);
_1 = Move(_5);
_3 = _18 >> _21;
_6.0 = Adt18::Variant3 { fld0: _8,fld1: '\u{b2c45}',fld2: _18,fld3: _9,fld4: 1457576195_u32,fld5: 1546312924792084479_u64,fld6: 148_u8,fld7: _21 };
_7 = _20 <= _20;
_21 = Field::<i128>(Variant(_6.0, 3), 7) & Field::<i128>(Variant(_6.0, 3), 7);
_18 = Field::<isize>(Variant(_6.0, 3), 2) >> Field::<isize>(Variant(_6.0, 3), 2);
_14 = RET + RET;
_14 = RET - RET;
_1 = core::ptr::addr_of!(place!(Field::<isize>(Variant(_6.0, 3), 2)));
RET = _14 - _14;
_6.0 = Adt18::Variant3 { fld0: _8,fld1: '\u{4f7c6}',fld2: _20,fld3: _9,fld4: 737295909_u32,fld5: 16277681797675467949_u64,fld6: 245_u8,fld7: _21 };
_22 = !132337616957135210145609281390867359943_u128;
place!(Field::<u8>(Variant(_6.0, 3), 6)) = 292557891_i32 as u8;
_11 = -(-113_i8);
_8 = Field::<bool>(Variant(_6.0, 3), 0) & _7;
_5 = core::ptr::addr_of!(place!(Field::<isize>(Variant(_6.0, 3), 2)));
_1 = core::ptr::addr_of!((*_5));
(*_5) = -_3;
(*_5) = 6971508217228526520_u64 as isize;
place!(Field::<i128>(Variant(_6.0, 3), 7)) = _21 & _21;
_21 = Field::<i128>(Variant(_6.0, 3), 7) | Field::<i128>(Variant(_6.0, 3), 7);
_22 = 268446638626404287547847408507762424795_u128 | 25254686035932079614172782862633842987_u128;
Goto(bb14)
}
bb14 = {
Call(_28 = dump_var(Move(_10), Move(_3), Move(_18), Move(_7)), ReturnTo(bb15), UnwindUnreachable())
}
bb15 = {
Call(_28 = dump_var(Move(_12), Move(_2), _29, _29), ReturnTo(bb16), UnwindUnreachable())
}
bb16 = {
Return()
}

}
}
pub fn main() {
                fn0(std::hint::black_box(false), std::hint::black_box(27581_u16), std::hint::black_box(529735985821191353_u64), std::hint::black_box(2585599746321256169_i64), std::hint::black_box(7632100991799098745_usize), std::hint::black_box((-1637754488_i32)));
                
                unsafe {
                    println!("hash: {}", H.finish());
                }
            
            }
#[derive(Debug,Copy,Clone)]
pub enum Adt18 {
Variant0{
fld0: i8,
fld1: char,
fld2: isize,

},
Variant1{
fld0: u8,
fld1: f32,

},
Variant2{
fld0: u16,
fld1: char,
fld2: u32,

},
Variant3{
fld0: bool,
fld1: char,
fld2: isize,
fld3: f64,
fld4: u32,
fld5: u64,
fld6: u8,
fld7: i128,

}}
#[derive(Debug)]
pub enum Adt37 {
Variant0{
fld0: *mut f32,
fld1: *mut u128,
fld2: isize,
fld3: *mut [usize; 1],

},
Variant1{
fld0: *mut [usize; 1],
fld1: [isize; 3],
fld2: [usize; 1],
fld3: [i64; 8],
fld4: Adt18,
fld5: u128,
fld6: i64,
fld7: [i64; 6],

}}
#[derive(Debug)]
pub enum Adt41 {
Variant0{
fld0: bool,
fld1: usize,
fld2: [i32; 4],
fld3: u32,
fld4: *mut f32,
fld5: u64,
fld6: i64,
fld7: i128,

},
Variant1{
fld0: u32,
fld1: char,
fld2: [i32; 4],
fld3: i8,
fld4: Adt37,
fld5: [i64; 8],
fld6: usize,
fld7: (u16, bool, i128),

},
Variant2{
fld0: bool,
fld1: char,
fld2: u128,
fld3: [i128; 7],
fld4: u16,
fld5: [isize; 3],
fld6: (u16, bool, i128),

},
Variant3{
fld0: [i64; 6],
fld1: u32,
fld2: u64,
fld3: i64,

}}
#[derive(Debug)]
pub enum Adt47 {
Variant0{
fld0: bool,
fld1: f32,
fld2: (*mut f32, char),
fld3: Adt41,

},
Variant1{
fld0: *mut f32,
fld1: *const u128,
fld2: (f64, i128, Adt18),
fld3: Adt37,
fld4: [usize; 1],
fld5: Adt41,
fld6: (*mut f32, char),
fld7: u64,

}}
#[derive(Debug,Copy,Clone)]
pub struct Adt56 {
fld0: bool,
fld1: i64,
fld2: [i64; 8],
fld3: i8,
fld4: (f64, i128, Adt18),
fld5: i128,
}
#[derive(Debug)]
pub enum Adt58 {
Variant0{
fld0: (usize, usize),

},
Variant1{
fld0: i32,
fld1: i128,
fld2: *const u128,

},
Variant2{
fld0: [isize; 3],
fld1: f64,
fld2: *mut [usize; 1],
fld3: usize,
fld4: *const u128,

},
Variant3{
fld0: (Adt18, [usize; 1]),
fld1: u16,
fld2: *const u128,

}}
#[derive(Debug)]
pub enum Adt63 {
Variant0{
fld0: *mut [i128; 7],
fld1: u8,
fld2: [i64; 6],

},
Variant1{
fld0: *mut [i128; 7],
fld1: Adt56,

}}
#[derive(Debug)]
pub struct Adt69 {
fld0: bool,
fld1: Adt47,
fld2: isize,
fld3: i8,
fld4: Adt58,
fld5: f64,
fld6: (char, Adt18),
fld7: Adt18,
}

